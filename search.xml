<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>广义容斥原理 &amp; 二项式反演</title>
      <link href="/2022/03/13/%E5%B9%BF%E4%B9%89%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%20&amp;%20%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/"/>
      <url>/2022/03/13/%E5%B9%BF%E4%B9%89%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86%20&amp;%20%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/</url>
      
        <content type="html"><![CDATA[<div class="note warning modern"><p>本文仅作为整理思路，没有定理的严格证明。 </p></div><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>「容斥原理」和「广义容斥原理」这两章中，将使用以下定义。</p><p>$A$：一个包含 $n$ 个不同元素 $a_1,a_2\cdots a_n$ 的集合。注意 $n$ 的含义是集合大小。</p><p>$d_m$：$A$ 的子集中<strong>至少</strong>包含 $m$ 个元素的集合的数量。（$A$ 的子集中大小 $\ge m$ 的集合的数量）</p><p>$f_m$：$A$ 的子集中<strong>恰好</strong>包含 $m$ 个元素的集合的数量。（$A$ 的子集中大小 $= m$ 的集合的数量）</p><p>$g_{A’}$：$A’$ 是 $A$ 的子集，满足<strong>钦定</strong>选 $A’$ 中所有元素，其他元素无限制的条件的 $A$ 的子集的数量。</p><p>设所有包含元素 $a_i$ 的 $A$ 的子集所构成的集合为 $X_i$，以上定义用韦恩图表达如下：</p><p>白色代表这部分被算了 $0$ 次，红色代表这部分被算了 $1$ 次。</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/03/%E5%B9%BF%E4%B9%89%E5%AE%B9%E6%96%A5%E5%AE%9A%E7%90%86%20%20%26%20%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/1.png" width="50%" height="50%"></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/03/%E5%B9%BF%E4%B9%89%E5%AE%B9%E6%96%A5%E5%AE%9A%E7%90%86%20%20%26%20%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/2.png" width="50%" height="50%"></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/03/%E5%B9%BF%E4%B9%89%E5%AE%B9%E6%96%A5%E5%AE%9A%E7%90%86%20%20%26%20%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/3.png" width="50%" height="50%"></p><p>可以发现：</p><script type="math/tex; mode=display">g_{A'}=\left|\bigcap\limits_{a_i\in A'}X_i\right|</script><p>还有一条性质：</p><script type="math/tex; mode=display">\sum\limits_{A'\subseteq A,|A'|=m}g_{A'}=\sum\limits_{i=m}^{i\le n}\binom{i}{m}f_i</script><p>韦恩图表示如下：</p><p>蓝色代表这部分被算了 $3$ 次。</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/03/%E5%B9%BF%E4%B9%89%E5%AE%B9%E6%96%A5%E5%AE%9A%E7%90%86%20%20%26%20%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%8F%8D%E6%BC%94/4.png" width="50%" height="50%"></p><p>以集合的角度来理解容斥原理和广义容斥原理比较利于用韦恩图来数形结合理解。但是在 OI 题目中容斥原理的考察背景一般不是集合，而是有 $n$ 个性质，求恰好或至少满足 $m$ 个性质的方案数，而满足每条性质的方案数会有很多种，这点和集合不同，集合中每个元素如果被选择只有一种被选择的方法 <del>（好像是废话）</del>。</p><h3 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h3><p>我们都知道容斥原理可以求至少包含一个元素的子集数（或至少包含一条性质的方案数）：</p><script type="math/tex; mode=display">d_1=\sum\limits_{i=1}^{i\le n}(-1)^{i-1}\sum\limits_{A'\subseteq A,|A'|=i}g_{A'}</script><p>集合论的形式：</p><script type="math/tex; mode=display">\left|\bigcup\limits_{i=1}^{i\le n}X_i\right|=\sum\limits_{i=1}^{i\le n}(-1)^{i-1}\sum\limits_{p_j<p_{j+1}}\left|\bigcap\limits_{j=1}^{j\le i}X_{p_j}\right|</script><p>但是，容斥原理还有另一个形式，可以用于求恰好包含零个元素的子集数：</p><script type="math/tex; mode=display">\because f_0=|U|-d_1\\\therefore f_0=\sum\limits_{i=0}^{i\le n}(-1)^i\sum\limits_{A'\subseteq A,|A'|=i}g_{A'}\\</script><p>我们的广义容斥定理就是相对于这个公式的广义情况。</p><h3 id="广义容斥定理"><a href="#广义容斥定理" class="headerlink" title="广义容斥定理"></a>广义容斥定理</h3><script type="math/tex; mode=display">f_m=\sum\limits_{i=m}^{i\le n}(-1)^{i-m}\binom{i}{m}\sum\limits_{A'\subseteq A,|A'|=i}g_{A'}</script><p>可以看到普通容斥是广义容斥 $m=0$ 是的情况。</p><p>广义容斥定理是二项式反演的一种，和「定义」一章中的 $f$ 与 $g$ 的函数关系式互为反演关系。把广义容斥原理从几个二项式反演中单拎出来是因为我只理解这一个公式的组合意义 qwq，而且可以类比普通容斥。</p><h3 id="二项式反演"><a href="#二项式反演" class="headerlink" title="二项式反演"></a>二项式反演</h3><p>以下的 $d,f,a$ 不按照「定义」一章中的意义，而表示任意数列或变量。</p><p>反演在线性代数下的理解很简单，就是逆矩阵：</p><script type="math/tex; mode=display">d_m=\sum\limits_{i=0}^{i\le m}A_{m,i}f_i \iff f_m=\sum\limits_{i=0}^{i\le m}B_{m,i}d_i</script><p>相当于：</p><script type="math/tex; mode=display">\begin{bmatrix}d_0\\d_1\\\vdots\\d_n\end{bmatrix}=A\begin{bmatrix}f_0\\f_1\\\vdots\\f_n\end{bmatrix}\iff\begin{bmatrix}f_0\\f_1\\\vdots\\f_n\end{bmatrix}=B\begin{bmatrix}d_0\\d_1\\\vdots\\d_n\end{bmatrix}</script><p>显然，$A=B^{-1}$。</p><p>以下所有反演公式均可通过矩阵的逆证明，故省略证明 <del>(太菜了)</del>。</p><ol><li><p>首先是广义容斥定理的二项式反演形式：</p><script type="math/tex; mode=display"> d_m=\sum\limits_{i=m}^{\infty}\binom{i}{m}f_i\\ \iff f_m=\sum\limits_{i=m}^{\infty}(-1)^{i-m}\binom{i}{m}d_i\\</script></li><li><p>其次是：</p><script type="math/tex; mode=display"> d_m=\sum_{i=0}^{i\le m}\binom{m}{i}f_i\\ \iff f_m=\sum_{i=0}^{i\le m}(-1)^{m-i}\binom{m}{i}d_i\\</script></li><li><p>然后是：</p><script type="math/tex; mode=display"> d_m=\sum\limits_{i=m}^{\infty}(-1)^i\binom{i}{m}f_i\\ \iff f_m=\sum\limits_{i=m}^{\infty}(-1)^i\binom{i}{m}d_i\\</script></li><li><p>最后是：</p><script type="math/tex; mode=display"> d_m=\sum_{i=0}^{i\le m}(-1)^i\binom{m}{i}f_i\\ \iff f_m=\sum_{i=0}^{i\le m}(-1)^{i}\binom{m}{i}d_i\\</script></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《托马斯微积分》摘要</title>
      <link href="/2022/01/27/%E3%80%8A%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E3%80%8B%E6%91%98%E8%A6%81/"/>
      <url>/2022/01/27/%E3%80%8A%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E3%80%8B%E6%91%98%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本摘要包含<a href="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E7%94%B5%E5%AD%90%E7%89%88.pdf">《托马斯微积分》</a>第 0~4 章，省略了一些难度较高的、OI 中应该不需要的小节。</p></blockquote><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="一对一函数"><a href="#一对一函数" class="headerlink" title="一对一函数"></a>一对一函数</h3><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/0预备知识/1.png" alt=""></p><h3 id="反函数"><a href="#反函数" class="headerlink" title="反函数"></a>反函数</h3><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/0预备知识/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/0预备知识/3.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/0预备知识/4.png" alt=""></p><h3 id="对数"><a href="#对数" class="headerlink" title="对数"></a>对数</h3><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/0预备知识/5.png" alt=""></p><h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/0预备知识/6.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/0预备知识/7.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/0预备知识/8.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/0预备知识/9.png" alt=""></p><h3 id="参数曲线，参数方程"><a href="#参数曲线，参数方程" class="headerlink" title="参数曲线，参数方程"></a>参数曲线，参数方程</h3><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/0预备知识/10.png" alt=""></p><h2 id="极限和连续"><a href="#极限和连续" class="headerlink" title="极限和连续"></a>极限和连续</h2><h3 id="普通极限"><a href="#普通极限" class="headerlink" title="普通极限"></a>普通极限</h3><h4 id="非正式定义"><a href="#非正式定义" class="headerlink" title="非正式定义"></a>非正式定义</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/1变化率和极限/1.png" alt=""></p><h4 id="正式定义"><a href="#正式定义" class="headerlink" title="正式定义"></a>正式定义</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/1变化率和极限/5.png" alt=""></p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/1变化率和极限/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/1变化率和极限/3.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/1变化率和极限/4.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/2求极限和单侧极限/1.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/2求极限和单侧极限/7.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/2求极限和单侧极限/11.png" alt=""></p><h4 id="求值"><a href="#求值" class="headerlink" title="求值"></a>求值</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/2求极限和单侧极限/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/2求极限和单侧极限/3.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/2求极限和单侧极限/4.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/2求极限和单侧极限/5.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/2求极限和单侧极限/6.png" alt=""></p><h3 id="单侧极限"><a href="#单侧极限" class="headerlink" title="单侧极限"></a>单侧极限</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/2求极限和单侧极限/8.png" alt=""></p><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/2求极限和单侧极限/9.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/2求极限和单侧极限/10.png" alt=""></p><h3 id="与无穷有关的极限"><a href="#与无穷有关的极限" class="headerlink" title="与无穷有关的极限"></a>与无穷有关的极限</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/3与无穷有关的极限/1.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/3与无穷有关的极限/11.png" alt=""></p><h4 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/3与无穷有关的极限/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/3与无穷有关的极限/9.png" alt=""></p><h4 id="求值-1"><a href="#求值-1" class="headerlink" title="求值"></a>求值</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/3与无穷有关的极限/3.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/3与无穷有关的极限/4.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/3与无穷有关的极限/7.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/3与无穷有关的极限/8.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/3与无穷有关的极限/10.png" alt=""></p><h3 id="渐近线-amp-终极形态"><a href="#渐近线-amp-终极形态" class="headerlink" title="渐近线 &amp; 终极形态"></a>渐近线 &amp; 终极形态</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/3与无穷有关的极限/5.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/3与无穷有关的极限/6.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/3与无穷有关的极限/12.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/3与无穷有关的极限/13.png" alt=""></p><h4 id="求值-2"><a href="#求值-2" class="headerlink" title="求值"></a>求值</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/3与无穷有关的极限/14.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/3与无穷有关的极限/15.png" alt=""></p><h3 id="连续"><a href="#连续" class="headerlink" title="连续"></a>连续</h3><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/4连续性/1.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/4连续性/3.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/4连续性/4.png" alt=""></p><h4 id="判定"><a href="#判定" class="headerlink" title="判定"></a>判定</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/4连续性/2.png" alt=""></p><h4 id="性质-3"><a href="#性质-3" class="headerlink" title="性质"></a>性质</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/4连续性/5.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/4连续性/6.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/4连续性/7.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/4连续性/8.png" alt=""></p><h3 id="斜率-amp-切线"><a href="#斜率-amp-切线" class="headerlink" title="斜率 &amp; 切线"></a>斜率 &amp; 切线</h3><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/5切线/1.png" alt=""></p><h3 id="变化率-amp-导数"><a href="#变化率-amp-导数" class="headerlink" title="变化率 &amp; 导数"></a>变化率 &amp; 导数</h3><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/1极限和连续/5切线/2.png" alt=""></p><h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><h3 id="普通导数"><a href="#普通导数" class="headerlink" title="普通导数"></a>普通导数</h3><h4 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/1.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/3.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/5.png" alt=""></p><h4 id="性质-4"><a href="#性质-4" class="headerlink" title="性质"></a>性质</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/6.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/7.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/8.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/9.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/10.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/3积商以及负幂的导数/1.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/3积商以及负幂的导数/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/3积商以及负幂的导数/3.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/4三角函数的导数/1.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/4三角函数的导数/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/5链式法则/1.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/5链式法则/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/13.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/14.png" alt=""></p><h4 id="求值-3"><a href="#求值-3" class="headerlink" title="求值"></a>求值</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/4.png" alt=""></p><h3 id="单侧导数"><a href="#单侧导数" class="headerlink" title="单侧导数"></a>单侧导数</h3><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/11.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/12.png" alt=""></p><h3 id="高阶导数"><a href="#高阶导数" class="headerlink" title="高阶导数"></a>高阶导数</h3><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/15.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/1作为函数的导数/16.png" alt=""></p><h3 id="参数曲线的斜率"><a href="#参数曲线的斜率" class="headerlink" title="参数曲线的斜率"></a>参数曲线的斜率</h3><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/5链式法则/3.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/2导数/5链式法则/4.png" alt=""></p><blockquote><p>此处略过 P209 下半部分 ~ P226 上半部分。</p></blockquote><h2 id="导数的应用"><a href="#导数的应用" class="headerlink" title="导数的应用"></a>导数的应用</h2><h3 id="求极值"><a href="#求极值" class="headerlink" title="求极值"></a>求极值</h3><h4 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/1函数的极值/1.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/1函数的极值/3.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/1函数的极值/5.png" alt=""></p><h4 id="性质-5"><a href="#性质-5" class="headerlink" title="性质"></a>性质</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/1函数的极值/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/1函数的极值/4.png" alt=""></p><h4 id="求值-4"><a href="#求值-4" class="headerlink" title="求值"></a>求值</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/1函数的极值/6.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/1函数的极值/7.png" alt=""></p><h3 id="罗尔定理与中值定理"><a href="#罗尔定理与中值定理" class="headerlink" title="罗尔定理与中值定理"></a>罗尔定理与中值定理</h3><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/2中值定理和微分方程/1.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/2中值定理和微分方程/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/2中值定理和微分方程/3.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/2中值定理和微分方程/4.png" alt=""></p><h3 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h3><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/2中值定理和微分方程/5.png" alt=""></p><h3 id="求函数形状"><a href="#求函数形状" class="headerlink" title="求函数形状"></a>求函数形状</h3><h4 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/3图形的形状/1.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/3图形的形状/4.png" alt=""></p><h4 id="性质-6"><a href="#性质-6" class="headerlink" title="性质"></a>性质</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/3图形的形状/6.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/3图形的形状/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/3图形的形状/5.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/3图形的形状/3.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/3导数的应用/3图形的形状/7.png" alt=""></p><blockquote><p>此处略过 P280 下半部分 ~ P338。</p></blockquote><h2 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h2><h3 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h3><h4 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/1不定积分微分方程和建模/1.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/1不定积分微分方程和建模/3.png" alt=""></p><h4 id="性质-7"><a href="#性质-7" class="headerlink" title="性质"></a>性质</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/1不定积分微分方程和建模/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/2积分法则替换积分法/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/2积分法则替换积分法/1.png" alt=""></p><h4 id="求值-5"><a href="#求值-5" class="headerlink" title="求值"></a>求值</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/1不定积分微分方程和建模/4.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/2积分法则替换积分法/3.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/0其他/1.png" alt=""></p><h3 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h3><h4 id="定义-8"><a href="#定义-8" class="headerlink" title="定义"></a>定义</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/4黎曼和与定积分/1.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/4黎曼和与定积分/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/4黎曼和与定积分/4.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/4黎曼和与定积分/5.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/4黎曼和与定积分/6.png" alt=""></p><h4 id="性质-8"><a href="#性质-8" class="headerlink" title="性质"></a>性质</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/4黎曼和与定积分/3.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/4黎曼和与定积分/7.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/5中值定理和基本定理/1.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/5中值定理和基本定理/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/5中值定理和基本定理/4.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/5中值定理和基本定理/6.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/6定积分的变量替换/1.png" alt=""></p><h4 id="求值-6"><a href="#求值-6" class="headerlink" title="求值"></a>求值</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/5中值定理和基本定理/3.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/5中值定理和基本定理/5.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/5中值定理和基本定理/7.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/6定积分的变量替换/2.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E6%89%98%E9%A9%AC%E6%96%AF%E5%BE%AE%E7%A7%AF%E5%88%86%E6%91%98%E8%A6%81/4积分/6定积分的变量替换/3.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL大总结</title>
      <link href="/2022/01/18/STL%E5%A4%A7%E6%80%BB%E7%BB%93/"/>
      <url>/2022/01/18/STL%E5%A4%A7%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>收下吧，这是我最后的 STL 了。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ol><li><p>序列式容器</p><p> 包含：array、vector、deque、list。</p><p> <img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/STL%E5%A4%A7%E6%80%BB%E7%BB%93/1.png" alt=""></p><ol><li><p><code>.fill(val)</code></p></li><li><p><code>.assgin(bgit, edit)</code> / <code>.assgin(cnt, val)</code></p></li><li><p><code>.erase(...)</code></p><ul><li><p>返回值：指向删掉的一个（段）元素的之后的位置的迭代器。</p></li><li><p>传参格式</p><ul><li><p><code>.erase(it)</code></p></li><li><p><code>.erase(bgit, edit)</code></p></li></ul></li></ul></li><li><p><code>.insert(...)</code></p><p> 新插入的值在 <code>it</code> 之前。</p><ul><li><p>返回值：均返回第一个插入的元素的迭代器（即下标最小的）。</p></li><li><p>传参格式</p><ul><li><p><code>.insert(it, val)</code></p></li><li><p><code>.insert(it, cnt, val)</code></p></li><li><p><code>.insert(it, bgit, edit)</code></p></li><li><p><code>.insert(it, initlist)</code></p><p>  示例：</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="built_in">insert</span>(<span class="built_in">begin</span>(a) + <span class="number">2</span>, &#123;<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>.emplace(it, val)</code></p><p> 不能完全替代 <code>insert</code>，只能插入一个元素。</p><p> 返回插入的元素的迭代器。</p></li><li><p><code>.emplace_back(val)</code></p><p> 可替代 <code>push_back</code>。</p></li><li><p><code>.emplace_front(val)</code></p><p> 可替代     <code>push_front</code>。</p></li><li><p><code>.capacity()</code></p></li><li><p><code>.resize(size)</code></p></li><li><p><code>.shrink_to_fit()</code></p><p>所有可增大 size 的函数均可增大 capacity，但上述函数中只有 <code>shrink_to_fit</code> 可减小 capacity。</p></li></ol></li><li><p>关联式容器</p><p> 包含：map、multimap、set、multiset。</p><p> 因为 map 系和 set 系的查询类的成员函数在传参上有很多相同的不同点，所以以下规定下文中 Btt（by the type）：如果讨论的是 map 系，则 “Btt” 为键值，如果讨论的是 set 系，则 “Btt” 为权值，<code>btt</code> 为类型与 Btt 相同的变量。</p><ol><li><p><code>.find(btt)</code></p><p> 返回首个 Btt 与 <code>btt</code> 相等的元素的迭代器。</p></li><li><p><code>.count(btt)</code></p><p> 返回 Btt 与 <code>btt</code> 相等的元素的个数。</p></li><li><p><code>.lower_bound(btt)</code></p></li><li><p><code>.upper_bound(btt)</code></p></li><li><p><code>.equal_range(btt)</code></p><p> 返回一个 pair 对象，其中包含两个迭代器，其中 pair.first 和 <code>lower_bound()</code> 方法的返回值等价，pair.second 和 <code>upper_bound()</code> 方法的返回值等价。</p></li><li><p><code>.erase(...)</code></p><ul><li><p>返回值：对于传参为迭代器的，返回指向删掉的一个（段）元素的之后的位置的迭代器；对于传参基于 <code>btt</code> 的，返回删掉的元素个数。</p></li><li><p>传参格式</p><ul><li><p><code>.erase(btt)</code></p><p>  删掉 Btt 为 <code>btt</code> 的<strong>全部</strong>元素。</p></li><li><p><code>.erase(it)</code></p></li><li><p><code>.erase(bgit, edit)</code></p></li></ul></li></ul></li><li><p><code>.insert(...)</code></p><p> 规定下文中 Btt：如果讨论的是 map 系，则 “Btt” 为键值权值二元组，如果讨论的是 set 系，则 “Btt” 为权值。</p><ul><li><p>返回值（这里提到的返回值只适用于下面三种传参格式）</p><ul><li><p>插入一个元素，非 multi 系返回 <code>pair&lt;iterator, bool&gt;</code>，multi 系返回 <code>iterator</code></p><p>  插入成功，<code>iterator</code> 为该元素迭代器，<code>bool</code> 为 <code>true</code>。</p><p>  插入失败（set 和 map 中已有 Btt 与其相同的元素），<code>iterator</code> 回与他 Btt 相同的那个元素的迭代器，<code>bool</code> 为 <code>false</code>。</p></li><li><p>插入多个元素，返回 <code>void</code>。</p></li></ul></li><li><p>传参格式</p><ul><li><p><code>.insert(btt)</code></p></li><li><p><code>.insert(it, beit, edit)</code></p></li><li><p><code>.insert(it, initlist)</code></p></li></ul></li></ul></li><li><p><code>.emplace(...)</code></p><ul><li><p>返回值：同 <code>insert</code>。</p></li><li><p>传参格式</p><ul><li><p><code>.emplace(btt)</code></p><p>  注意这里如果写成这样会 CE。</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">m.<span class="built_in">emplace</span>(&#123;<span class="number">1</span>, <span class="number">2</span>&#125;);</span><br></pre></td></tr></table></figure><p>  原因是编译器把 <code>&#123;1, 2&#125;</code> 当成初始化列表了，虽然你的意思是 <code>&#123;1, 2&#125;</code> 是个 pair 二元组。用 <code>make_pair</code> 就可以了。</p></li><li><p><code>.emplace(key, val)</code>（对于 map 系）</p><p>  相当于将创建新键值对所需的数据作为参数直接传入。</p></li></ul></li></ul><p>上文中 Btt 的概念解释的不是很清楚，我在这里再梳理一遍。对于 set 系而言，一个元素只由一个部分组成，就是他本身的权值，所以 Btt 就是权值。而对于 map 系而言，一个元素由两部分组成，键值和权值，查询、删除时，只需要键值就可以找到相应的元素，所以这时候 Btt 为键值；而插入时需要提供完整的信息，所以 Btt 为键值权值二元组。</p><p>无序关联式容器中 Btt 的定义方法与关联式容器的相同。</p></li></ol></li><li><p>无序关联式容器</p><p> 包含：unordered_map、unordered_multimap、unordered_set、unordered_multiset。</p><p> 与无序式容器的不同点</p><ul><li><p>内部存储的元素是无序的。</p></li><li><p>成员函数没有 <code>lower_bound</code>、<code>upper_bound</code>，但是有 <code>equal_range</code>。</p></li><li><p>unordered 系的操作不都是 $O(1)$ 的，其通过指定键查找对应的值的操作平均时间复杂度为 $O(1)$，但对于插入操作，其复杂度相当于非 unordered 系，且常数大于非 unordered 系。</p></li></ul></li><li><p>容器适配器</p><p> 包含：stack、queue、priority_queue。</p><p> 容器适配器需要依赖基础容器，而且对于基础容器有一些要求，对于每种适配器满足要求，可以作为其基础容器的容器是：（加粗的为默认使用的）</p><p> stack：vector、<strong>deque</strong>、list。</p><p> queue：<strong>deque</strong>、list。</p><p> priority_queue：<strong>vector</strong>、deque。</p></li></ol><h3 id="算法函数"><a href="#算法函数" class="headerlink" title="算法函数"></a>算法函数</h3><p>只列举我认为比较生僻但是在算法竞赛中能派上用场的。</p><ol><li><p><code>stable_sort(bgit, edit)</code></p><p> 稳定排序。</p></li><li><p><code>partial_sort(bgit, mdit, edit)</code></p><p> 部分排序，参与排序的部分为 $[\mathrm{bgit}, \mathrm{edit})$，排好的部分为 $[\mathrm{bgit}, \mathrm{mdit})$。复杂度 $O(n\log m)$。</p></li><li><p><code>nth_element(bgit, mdit, egit)</code></p><p> 寻找 $k$ 小数，参与寻找的部分为 $[\mathrm{bgit}, \mathrm{edit})$，寻找到的 $k$ 大值下标为 $\mathrm{mdit}$（也就是 $k=\mathrm{mdit}-\mathrm{bgit}+1$），且满足所有左侧的数都比在大小关系中都比他靠左，右侧的数都比在大小关系中都比他靠右，复杂度 $O(n)$。</p></li><li><p><code>merge(bgit1, edit1, bgit2, edit2, it3)</code></p><p> 将 $[\mathrm{bgit_1},\mathrm{edit_1})$ 和 $[\mathrm{bgit_2},\mathrm{edit_2})$ 做归并排序存入以 $\mathrm{it_3}$ 为开始的容器中。</p></li><li><p><code>inplace_merge(bgit, mdit, edit)</code></p><p> 将 $[\mathrm{bgit},\mathrm{mdit})$ 和 $[\mathrm{mdit},\mathrm{edit})$ 做归并排序存入以 $\mathrm{bgit}$ 为开始的容器中。</p></li><li><p><code>find(bgit, edit, val)</code></p><p> 返回第一个等于 <code>val</code> 的元素的迭代器，否则返回指向 <code>edit</code> 的迭代器。</p></li><li><p><code>find_if(bgit, edit, func)</code></p><p> 返回第一个使 <code>func == true</code> 的元素迭代器，否则返回指向 <code>edit</code> 的迭代器。</p></li><li><p><code>find_if_not(bgit, edit, func)</code></p><p> 与 <code>find_if</code> 正好相反。</p></li><li><p><code>equal_range(bgit, edit, val)</code></p><p> 用法和效果和前面容器的成员函数一样。</p></li><li><p><code>swap_ranges(bgit1, edit1, bgit2)</code></p><p>交换 $[\mathrm{bgit_1},\mathrm{edit_1})$ 和 $[\mathrm{bgit_2},\mathrm{bgit_2}+\mathrm{edit_1}-\mathrm{bgit_1})$。</p></li><li><p><code>next_permutation(bgit, edit)</code> / <code>prev_permutation(bgit, edit)</code></p><p>这俩函数应该没有人不认识，我就是想提一下他们的复杂度：$O(n)$。</p></li></ol><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><p><a href="http://c.biancheng.net/stl/">C 语言中文网 STL 教程</a></p></li><li><p><a href="https://en.cppreference.com/w/">CppReference</a></p></li><li><p><del>亲手の实验</del></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>半平面交</title>
      <link href="/2022/01/15/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/"/>
      <url>/2022/01/15/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<div class="note warning modern"><p>本文缺少有力证明，且部分内容完全由个人添加，网上无法找到类似结论。可能存在错误。若读者发现错误可在评论区反馈。 </p></div><hr><p>Update 2022-03-05:</p><p>感谢 <a href="https://github.com/cjj490168650">俊杰_Charles</a> 的提醒，加入一个外边框可以避免情况 3，同时也处理了无穷大的情况。</p><hr><h3 id="大型-Hack-现场"><a href="#大型-Hack-现场" class="headerlink" title="大型 Hack 现场"></a>大型 Hack 现场</h3><p>恕我直言，现在网上很多 OJ 的半平面交模板题数据都太水了，而且有一些特殊的性质（下文中有提及），导致一些有缺陷的代码能够 AC。</p><p>半平面交<a href="https://www.luogu.com.cn/problem/P4196">主流模板</a>（数据水），<a href="https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/4/CGL_4_C">推荐模板</a>（相对强一些），<a href="">难用的模板</a>（数据据说强，但是 POJ 的功能和使用体验……）。</p><p>主要有 3 个需要注意的地方：</p><ol><li><p>半平面交大小为 0。</p></li><li><p>半平面交大小为 $\infty$。</p></li><li><p>存在两条排完序后相邻的向量的极角差大于 $\pi$。</p></li></ol><p>对于主流模板而言，这三条都没有 hack，第一条没有 hack 是因为数据水，后两条因为模板本身具有特殊性质（给出了至少一个凸包）而不会出现。</p><p>情况 1，这种情况下如果有方向相反的向量且这两个向量的半平面无交集，那么在找交点时会出现<del>呐呐呐</del> <code>nan</code> 或 <code>-nan</code> ，判一下 <code>nan</code> 或 <code>-nan</code> 即可，接下来有个我并不会证的结论：如果没有刚才那种情况，双端队列中最后会只有两个向量，不用特判，因为两个向量只会转化两个交点，面积就是 0。</p><p>情况 2 很好判，判一下做完半平面交后双端队列中相邻元素极角差是否有 $\ge\pi$ 的即可。</p><p>情况 3 的话比较复杂，也是一个我发现的 hack，目前我没有在网上找到题解提到过。hack 数据：</p><p>第一行一个整数 $n$ 表示向量个数，接下来 $n$ 行每行四个整数 $x_1,y_1,x_2,y_2$ 表示向量起点、终点横纵坐标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2 4 0 0</span><br><span class="line">2 4 4 0</span><br><span class="line">4 1 0 2</span><br></pre></td></tr></table></figure><p>图示：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2022/01/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/1.png" alt="图示"></p><p>我目测遇到这种情况换一下 <code>--ri</code> 和 <code>++le</code> 的顺序即可，但是没有严格证明（太菜了<img src="https://figurebed-1306986731.file.myqcloud.com/%E8%A1%A8%E6%83%85/kel.png" alt="">）。如果实在不行的话遇到这种情况 $O(n)$ 处理一下也可以，因为显然只会遇到一次。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码中只有对于情况 1 的特判，没有 2、3 的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span> &#123;</span></span><br><span class="line">    Point a, b;</span><br><span class="line">    <span class="keyword">double</span> angle;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Line sec) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">cmp</span>(angle, sec.angle)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">area</span>(a, b, sec.b) &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> angle &lt; sec.angle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; line[MAXn * MAXm + <span class="number">10</span>]; <span class="keyword">int</span> cntline;</span><br><span class="line"><span class="keyword">int</span> le = <span class="number">1</span>, ri, que[MAXn * MAXm + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">sort</span>(line + <span class="number">1</span>, line + <span class="number">1</span> + cntline);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntline; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">cmp</span>(line[i].angle, line[i - <span class="number">1</span>].angle)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (le &lt; ri &amp;&amp; <span class="built_in">area</span>(line[i].a, line[i].b, <span class="built_in">str_int_str</span>(line[que[ri - <span class="number">1</span>]].a, line[que[ri - <span class="number">1</span>]].b, line[que[ri]].a, line[que[ri]].b)) &lt;= <span class="number">0</span>) --ri;</span><br><span class="line">        <span class="keyword">while</span> (le &lt; ri &amp;&amp; <span class="built_in">area</span>(line[i].a, line[i].b, <span class="built_in">str_int_str</span>(line[que[le]].a, line[que[le]].b, line[que[le + <span class="number">1</span>]].a, line[que[le + <span class="number">1</span>]].b)) &lt;= <span class="number">0</span>) ++le;</span><br><span class="line">        que[++ri] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (le &lt; ri - <span class="number">1</span> &amp;&amp; <span class="built_in">area</span>(line[que[le]].a, line[que[le]].b, <span class="built_in">str_int_str</span>(line[que[ri - <span class="number">1</span>]].a, line[que[ri - <span class="number">1</span>]].b, line[que[ri]].a, line[que[ri]].b)) &lt;= <span class="number">0</span>) --ri;</span><br><span class="line">    <span class="keyword">while</span> (le &lt; ri - <span class="number">1</span> &amp;&amp; <span class="built_in">area</span>(line[que[ri]].a, line[que[ri]].b, <span class="built_in">str_int_str</span>(line[que[le]].a, line[que[le]].b, line[que[le + <span class="number">1</span>]].a, line[que[le + <span class="number">1</span>]].b)) &lt;= <span class="number">0</span>) ++le;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">double</span> ans = <span class="built_in">pol_area</span>(point, cntpoint);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isfinite</span>(ans)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>, ans);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;0.000&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小结论积累</title>
      <link href="/2021/12/16/%E5%B0%8F%E7%BB%93%E8%AE%BA%E7%A7%AF%E7%B4%AF/"/>
      <url>/2021/12/16/%E5%B0%8F%E7%BB%93%E8%AE%BA%E7%A7%AF%E7%B4%AF/</url>
      
        <content type="html"><![CDATA[<ol><li><p>带约数 $\sum$ 变连续 $\sum$</p><script type="math/tex; mode=display"> \begin{gather} \text{设}d'=\dfrac{d}{n}\\ \sum\limits_{n\mid d}=\sum\limits_{d'=1}^{d'<\infty}\\ \end{gather}</script></li><li><p>又一个求约数个数的公式</p><script type="math/tex; mode=display"> \begin{gather} \text{设}d(n)\text{为}n\text{约数个数}\\ d(nm)=\sum\limits_{d\mid n}\sum\limits_{g\mid m}[(d,g)=1]\\ \end{gather}</script></li><li><p>构造莫反</p><script type="math/tex; mode=display"> \begin{gather} \text{设}f(n)=\sum\limits_{\cdots}[(i,j)=n]\\ \text{设}F(n)=\sum\limits_{\cdots}[n\mid i\land n\mid j]\\ \text{则}F(n)=\sum\limits_{n\mid d}f(d) \end{gather}</script></li><li><p>含约数的 $\sum$ 改变变量定义的顺序</p><script type="math/tex; mode=display"> \begin{gather} \sum\limits_{i=1}^{i\le n}\sum\limits_{d\mid i}=\sum\limits_{d=1}^{d\le n}\sum\limits_{d\mid i}^{i\le n}\\ \end{gather}</script></li><li><p>含约数的 $\sum$ 改变变量定义的顺序2</p><script type="math/tex; mode=display"> \begin{gather} \sum\limits_{d\mid n}\sum\limits_{g\mid \frac{n}{d}}=\sum\limits_{g\mid n}\sum\limits_{d\mid \frac{n}{g}} \end{gather}</script></li><li><p>$\sum$ 的基本运算</p><ol><li><p>设 $A$ 为任意算式，若 $A$ 中不含 $\sum_1$ 中定义的变量，则 $\sum_1 A=A\sum_1$。</p></li><li><p>设 $A,B$ 为任意算式，若 $\sum_2$ 及 $B$ 中不含 $\sum_1$ 中定义的变量，则 $\sum_1 A\sum_2 B=(\sum_1 A)(\sum_2 B)$。</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫比乌斯函数 &amp; 莫比乌斯反演</title>
      <link href="/2021/12/15/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%87%BD%E6%95%B0%20&amp;%20%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
      <url>/2021/12/15/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%87%BD%E6%95%B0%20&amp;%20%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</url>
      
        <content type="html"><![CDATA[<h3 id="一-莫比乌斯函数"><a href="#一-莫比乌斯函数" class="headerlink" title="一. 莫比乌斯函数"></a>一. 莫比乌斯函数</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>设正整数 $n$，根据唯一分解定理分解为 $p_1^{c_1}p_2^{c_2}\cdots p_k^{c_k}$。</p><p>莫比乌斯函数可定义为 $\mu(n)=\begin{cases}0&amp;(\exists i,c_i&gt;1)\(-1)^k&amp;(else)\end{cases}$</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ol><li><p>莫比乌斯函数是积性函数，分类讨论可证得。</p><p> 因此我们可以用<a href="https://rsdbkhusky.github.io/1970/01/01/TemLib/%E7%BA%BF%E6%80%A7%E6%B1%82%E5%8C%BA%E9%97%B4%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%87%BD%E6%95%B0/">线性筛法筛莫比乌斯函数</a>。</p></li><li><p>$\sum\limits_{d\mid n}\mu(d)=\begin{cases}1&amp;(n=1)\0&amp;(n&gt;1)\end{cases}$</p><p> 证明：</p><ol><li><p>$n=1$ 时，显然成立。</p></li><li><p>$n&gt;1$ 时：</p><script type="math/tex; mode=display"> \begin{gather} \sum\limits_{d\mid n}\mu(d)=\sum\limits_{i=0}^{i\le c_1}\sum\limits_{j=0}^{j\le c_2}\cdots\sum\limits_{x=0}^{x\le c_k}\mu(p_1^ip_2^j\cdots p_k^x)\\ =\sum\limits_{i=0}^{i\le 1}\sum\limits_{j=0}^{j\le 1}\cdots\sum\limits_{x=0}^{x\le 1}\mu(p_1^ip_2^j\cdots p_k^x)\\ =\sum\limits_{i=0}^{i\le k}\binom{k}{i}(-1)^i\\ =(-1+1)^k\\ =0\\ \end{gather}</script></li></ol></li></ol><h3 id="二-莫比乌斯反演"><a href="#二-莫比乌斯反演" class="headerlink" title="二. 莫比乌斯反演"></a>二. 莫比乌斯反演</h3><h4 id="第一定理"><a href="#第一定理" class="headerlink" title="第一定理"></a>第一定理</h4><p>若 $F(n)=\sum\limits<em>{d\mid n}f(d)$，则 $f(n)=\sum\limits</em>{d\mid n}\mu(d)F(\dfrac{n}{d})$</p><p>证明：</p><script type="math/tex; mode=display">\begin{gather}\text{若证}f(n)=\sum\limits_{d\mid n}\mu(d)F(\dfrac{n}{d})\\\text{即证}f(n)=\sum\limits_{d\mid n}\mu(d)\sum\limits_{g\mid \frac{n}{d}}f(g)\\\text{即证}f(n)=\sum\limits_{d\mid n}\sum\limits_{g\mid \frac{n}{d}}\mu(d)f(g)\\\end{gather}</script><p>我们在这里需要证明 $\sum\limits<em>{d\mid n}\sum\limits</em>{g\mid \frac{n}{d}}=\sum\limits<em>{g\mid n}\sum\limits</em>{d\mid \frac{n}{g}}$。</p><p>什么情况下这两者等价呢？我们可以这样理解，每个 $\sum$，形如 $\sum\limits<em>{i=1}^{i\le n}$ 的也好，形如 $\sum\limits</em>{d\mid n}$ 的也罢，相当于是往后传递了若干次数，比如 $\sum\limits<em>{d\mid 6}$ 往后传递的数的集合为 ${1,2,3,6}$。两个 $\sum$ 就相当于传递了若干次数对。那么，设 $\sum\limits</em>{d\mid n}\sum\limits<em>{g\mid \frac{n}{d}}$ 向后传递的数对构成的集合为 $S_1$，$\sum\limits</em>{g\mid n}\sum\limits<em>{d\mid \frac{n}{g}}$ 向后传递的数对构成的集合为 $S_2$（其中数对的第一个位置表示 $d$，第二个位置表示 $g$）。如果我们能证明 $S_1=S_2$，我们就能证明 $\sum\limits</em>{d\mid n}\sum\limits<em>{g\mid \frac{n}{d}}=\sum\limits</em>{g\mid n}\sum\limits_{d\mid \frac{n}{g}}$。</p><p>因为每次向后传递的是一个数对，所以我们可以用一个矩阵来表示 $S_1$ 和 $S_2$。</p><p>因为 $d$ 严格单调，对于每个 $d$，$g$ 也严格单调，所以 $S_1$，$S_2$ 中均没有重复元素。我们可以用一个 $0/1$ 矩阵来表示 $S_1$ 和 $S_2$。</p><p>例如 $n=6$ 时 $\sum\limits<em>{d\mid n}\sum\limits</em>{g\mid \frac{n}{d}}$ 对应的 $0/1$ 矩阵：（每一行代表一个 $d$ 的值，每一列代表一个 $g$ 的值，省略 $0$）</p><script type="math/tex; mode=display">\begin{bmatrix} &1&2&3&4&5&6\\1&1&1&1& & &1\\2&1& &1& & & \\3&1&1& & & & \\4& & & & & & \\5& & & & & & \\6&1& & & & & \\\end{bmatrix}</script><p>根据这个例子，我们大概能猜出结论，这个矩阵一定是沿对角线对称的，我们来证明：</p><script type="math/tex; mode=display">\begin{gather}\text{若}a[i][j]=1\\\iff j\mid \dfrac{n}{i}\\\iff i\mid \dfrac{n}{j}\\\iff a[j][i]=1\\\text{若}a[i][j]=0\\\iff j\nmid \dfrac{n}{i}\\\iff i\nmid \dfrac{n}{j}\\\iff a[j][i]=0\\\end{gather}</script><p>由此证得该矩阵沿对角线对称，由于这条性质，当 $\sum\limits<em>{d\mid n}\sum\limits</em>{g\mid \frac{n}{d}}$ 中 $d$ 与 $g$ 更换位置变成 $\sum\limits<em>{g\mid n}\sum\limits</em>{d\mid \frac{n}{g}}$ 后，表示成的矩阵不变（注意虽然公式中 $d,g$ 交换位置，但矩阵每一行仍代表一个 $d$ 的值，每一列仍代表一个 $g$ 的值。用向后传数对的方式理解，数对的第一个位置仍表示 $d$，第二个位置仍表示 $g$）。故 $S<em>1=S_2$，证得 $\sum\limits</em>{d\mid n}\sum\limits<em>{g\mid \frac{n}{d}}=\sum\limits</em>{g\mid n}\sum\limits_{d\mid \frac{n}{g}}$。</p><p>接着主线证明：</p><script type="math/tex; mode=display">\begin{gather}\text{即证}f(n)=\sum\limits_{g\mid n}\sum\limits_{d\mid \frac{n}{g}}\mu(d)f(g)\\\text{即证}f(n)=\sum\limits_{g\mid n}f(g)\sum\limits_{d\mid \frac{n}{g}}\mu(d)\\\end{gather}</script><p>根据莫比乌斯函数的性质，发现右部的很多项都乘有 $0$，消去乘有 $0$ 的项可得：</p><script type="math/tex; mode=display">\begin{gather}\text{即证}f(n)=f(n)\end{gather}</script><p>显然成立，证毕。</p><p>本证明过程由个人独自完成，且引入了数对和矩阵辅助证明，所以难免有些啰嗦，读者可以思考简化证明过程。</p><h4 id="第二定理"><a href="#第二定理" class="headerlink" title="第二定理"></a>第二定理</h4><p>若 $F(n)=\sum\limits<em>{n\mid d}f(d)$，则 $f(n)=\sum\limits</em>{n\mid d}\mu(\dfrac{d}{n})F(d)$</p><p>证明：</p><p>前面和第一定理推导过程相同，一直到这一步：</p><script type="math/tex; mode=display">\begin{gather}\text{即证}f(n)=\sum\limits_{n\mid d}\sum\limits_{d\mid g}\mu(\dfrac{d}{n})f(g)\\\end{gather}</script><p>这里开始和第一公式的推导不一样了。设 $d’=\dfrac{d}{n}$，则 $d=d’n$，带入得：</p><script type="math/tex; mode=display">\begin{gather}\text{即证}f(n)=\sum\limits_{n\mid g}\sum\limits_{d'\mid \frac{g}{n}}\mu(d')f(g)\\\end{gather}</script><p>解释：$n\mid d\mid g$ 所以 $g$ 一定能去遍 $n$ 的所有倍数，$d’$ 是 $\dfrac{d}{n}$，所以一定有 $d’\mid \dfrac{g}{n}$。</p><p>有人可能会问，这个怎么无法用证第一定理时那样用数对和矩阵的方式证明呢，因为确实 $\sum\limits<em>{n\mid d}\sum\limits</em>{d\mid g}\neq\sum\limits<em>{n\mid g}\sum\limits</em>{d\mid g}$，但是这里这两个 $\sum$ 号后面并不会用到 $d$ 的值，只会用到 $d’$，所以只需要保证 $d’$ 不变就行了。</p><p>对应到矩阵上来说，以 $n=2$ 举例，$\sum\limits<em>{n\mid d}\sum\limits</em>{d\mid g}$ 对应的矩阵：</p><script type="math/tex; mode=display">\begin{bmatrix} &1&2&3&4&5&6\\1& & & & & & \\2& &1& &1& &1\\3& & & & & & \\4& & & &1& & \\5& & & & & & \\6& & & & & &1\\\end{bmatrix}</script><p>$\sum\limits<em>{n\mid g}\sum\limits</em>{d\mid g}$：</p><script type="math/tex; mode=display">\begin{bmatrix} &1&2&3&4&5&6\\1& &{\color{red}1}& &{\color{red}1}& &{\color{red}1}\\2& &1& &1& &1\\3& & & & & &{\color{red}1}\\4& & & &1& & \\5& & & & & & \\6& & & & & &1\\\end{bmatrix}</script><p>可以看到两者中有不同之处的行所对应的 $d’\notin\mathbb{Z}$（$\dfrac{1}{2}$ 和 $\dfrac{3}{2}$）。</p><p>继续证明：</p><script type="math/tex; mode=display">\begin{gather}\text{即证}f(n)=\sum\limits_{n\mid g}\sum\limits_{d'\mid \frac{g}{n}}\mu(d')f(g)\\\end{gather}</script><p>接下来就和第一定理的过程完全一样了。</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>如果有两个函数 $f(n)$ 和 $F(n)$，$F(n)$ 好求，$f(n)$ 不好求，而两者间又有 $F(n)=\sum\limits<em>{d\mid n}f(d)$ 或者 $F(n)=\sum\limits</em>{n\mid d}f(d)$ 的关系，可以使用莫反。</p><p>小技巧：遇到 $\sum\limits<em>{n\mid d}$ 的时候，可以设 $d’=\dfrac{d}{n}$，则 $d=d’n$，代入可得转化为 $\sum\limits</em>{d’=1}^{d’&lt;\infty}$，这样变量就是连续的了。</p><p>两个重要结论</p><ol><li><p>$\sum\limits_{d\mid n}\mu(d)=[n=1]$</p><p> 这条结论主要反着用。</p></li><li><p>$\sum\limits<em>{i=1}^{i\le n}\sum\limits</em>{d\mid i}=\sum\limits_{d=1}^{d\le n}\lfloor\dfrac{n}{d}\rfloor$</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整除分块</title>
      <link href="/2021/12/14/%E6%95%B4%E9%99%A4%E5%88%86%E5%9D%97/"/>
      <url>/2021/12/14/%E6%95%B4%E9%99%A4%E5%88%86%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="一-核心定理"><a href="#一-核心定理" class="headerlink" title="一. 核心定理"></a>一. 核心定理</h3><p>整除分块，又称数论分块，其核心是一个定理。</p><p>定理：设 $\operatorname{diff}$ 函数为求不同数值的个数，如 $\operatorname{diff}{1,1,3,4,6,6,6}=4$，则 $\mathop{\operatorname{diff}}\limits_{i=1}^{i\le n}\left\lfloor\dfrac{n}{i}\right\rfloor$ 最大不超过 $2\sqrt{n}$。</p><p>证明：</p><ol><li><p>考虑 $i\in[1,\sqrt{n}]$，最多 $\sqrt{n}$ 个。所以 $\mathop{\operatorname{diff}}\limits_{i=1}^{i\le\sqrt{n}}\left\lfloor\dfrac{n}{i}\right\rfloor$ 最大不超过 $\sqrt{n}$。</p></li><li><p>考虑 $i\in(\sqrt{n},n]$，$\left\lfloor\dfrac{n}{i}\right\rfloor$ 的值单调不增。$\left\lfloor\dfrac{n}{\left\lceil\sqrt{n}\right\rceil}\right\rfloor$ 的值最大为 $\sqrt{n}$，$\left\lfloor\dfrac{n}{n}\right\rfloor$ 为 $1$。所以 $\mathop{\operatorname{diff}}\limits_{i=\left\lceil\sqrt{n}\right\rceil}^{i\le n}\left\lfloor\dfrac{n}{i}\right\rfloor$ 最大不超过 $\sqrt{n}$。</p></li></ol><p>证毕。</p><h3 id="二-确定分界点"><a href="#二-确定分界点" class="headerlink" title="二. 确定分界点"></a>二. 确定分界点</h3><p>上一个标题中，我们认识到整除分块复杂度的正确性。这一个标题将会讲解如何确定块与块之间的分界点。</p><p>设 $g_n(x)$ 为大于等于 $x$ 且被 $n$ 整除的值与 $x$ 被 $n$ 整除的值相同的最大整数。可用公式表示为：</p><script type="math/tex; mode=display">\left\lfloor\dfrac{n}{x}\right\rfloor=\left\lfloor\dfrac{n}{g_n(x)}\right\rfloor,\left\lfloor\dfrac{n}{x}\right\rfloor>\left\lfloor\dfrac{n}{g_n(x)+1}\right\rfloor</script><p>定理：$g_n(x)=\left\lfloor\dfrac{n}{\left\lfloor\frac{n}{x}\right\rfloor}\right\rfloor$</p><p>证明：只要证明了上面“可用公式表示为”的两个式子成立，即可完成证明。</p><ol><li><p>证明第一个式子</p><p> 首先引入三个显然的东西：</p><ul><li><p>$\left\lfloor n\right\rfloor\le n$。</p></li><li><p>如果 $n\le m$，那么 $\left\lfloor n\right\rfloor\le \left\lfloor m\right\rfloor$。</p></li><li><p>如果 $n\in \mathbb{Z}$，那么 $\left\lfloor n\right\rfloor=n$。</p><p>开始证明：</p></li></ul><ol><li><p>证明 $x\le\left\lfloor\dfrac{n}{\left\lfloor\frac{n}{x}\right\rfloor}\right\rfloor$</p><script type="math/tex; mode=display"> \begin{gather} \dfrac{n}{x}\ge\left\lfloor\dfrac{n}{x}\right\rfloor\\ \text{又}\because\dfrac{n}{x},\left\lfloor\dfrac{n}{x}\right\rfloor\ne0\\ \Longrightarrow\dfrac{n}{\frac{n}{x}}\le\dfrac{n}{\left\lfloor\frac{n}{x}\right\rfloor}\\ \Longrightarrow\left\lfloor\dfrac{n}{\frac{n}{x}}\right\rfloor\le\left\lfloor\dfrac{n}{\left\lfloor\frac{n}{x}\right\rfloor}\right\rfloor\\ \Longrightarrow\left\lfloor x\right\rfloor\le\left\lfloor\dfrac{n}{\left\lfloor\frac{n}{x}\right\rfloor}\right\rfloor\\ \Longrightarrow x\le\left\lfloor\dfrac{n}{\left\lfloor\frac{n}{x}\right\rfloor}\right\rfloor\\ \end{gather}</script><p> 这条结论在接下来的证明中一直会用到。</p><p> 这一步相当于是证明了 $x\le g_n(x)$。</p></li><li><p>证明 $\left\lfloor\dfrac{n}{x}\right\rfloor\ge\left\lfloor\dfrac{n}{g_n(x)}\right\rfloor$</p><script type="math/tex; mode=display"> \begin{gather} x\le g_n(x)\\ \text{又}\because x,g_n(x)\ne0\\ \Longrightarrow\dfrac{n}{x}\ge\dfrac{n}{g_n(x)}\\ \Longrightarrow\left\lfloor\dfrac{n}{x}\right\rfloor\ge\left\lfloor\dfrac{n}{g_n(x)}\right\rfloor\\ \end{gather}</script></li><li><p>证明 $\left\lfloor\dfrac{n}{x}\right\rfloor\le\left\lfloor\dfrac{n}{g_n(x)}\right\rfloor$</p><script type="math/tex; mode=display"> \begin{gather} \text{即证}\left\lfloor\dfrac{n}{x}\right\rfloor\le\left\lfloor\dfrac{n}{\left\lfloor\frac{n}{\left\lfloor \frac{n}{x}\right\rfloor}\right\rfloor}\right\rfloor\\ \text{设}x'=\left\lfloor\dfrac{n}{x}\right\rfloor\\ \text{即证}x'\le\left\lfloor\dfrac{n}{\left\lfloor\frac{n}{\left\lfloor x'\right\rfloor}\right\rfloor}\right\rfloor,\text{该式已被证明}\\ \end{gather}</script><p>综上所述，$\left\lfloor\dfrac{n}{x}\right\rfloor=\left\lfloor\dfrac{n}{g_n(x)}\right\rfloor$</p></li></ol></li><li><p>证明第二个式子</p><p> 我们先设一下<strong>带余除法</strong>，带余除法是数论证明的常用手段，它能有效地消掉下去整号。</p><p> 设 $n=kx+b~(0\le b&lt;x)$，则 $\left\lfloor\dfrac{n}{x}\right\rfloor=k$。</p><p> 设 $n=pk+q~(0\le q&lt;k)$，则 $\left\lfloor\dfrac{n}{k}\right\rfloor=p$。</p><script type="math/tex; mode=display"> \begin{gather} \text{若证}\left\lfloor\dfrac{n}{x}\right\rfloor>\left\lfloor\dfrac{n}{g_n(x)+1}\right\rfloor\\ \text{即证}\left\lfloor\dfrac{n}{x}\right\rfloor>\left\lfloor\dfrac{n}{\left\lfloor\frac{n}{\left\lfloor \frac{n}{x}\right\rfloor}\right\rfloor+1}\right\rfloor\\ \text{即证}k>\left\lfloor\dfrac{n}{\left\lfloor\frac{n}{k}\right\rfloor+1}\right\rfloor\\ \text{即证}k>\left\lfloor\dfrac{n}{p+1}\right\rfloor\\ \end{gather}</script><p> 这里需要先证一个小结论：若 $a,b,c\in\mathbb{Z},a&gt;\left\lfloor\dfrac{b}{c}\right\rfloor$，则 $ac&gt;b$。</p><script type="math/tex; mode=display"> \begin{gather} \because a\in\mathbb{Z},a>\left\lfloor\dfrac{b}{c}\right\rfloor\\ \therefore a>\dfrac{b}{c}\\ \therefore ac>b\\ \end{gather}</script><p> 接着主线的证明：</p><script type="math/tex; mode=display"> \begin{gather} \text{即证}k(p+1)>n\\ \text{即证}n<pk+k\\ \text{又}\because n=pk+q,q<k.\text{该式成立} \end{gather}</script></li></ol><p>综上所述，$g_n(x)=\left\lfloor\dfrac{n}{\left\lfloor\frac{n}{x}\right\rfloor}\right\rfloor$。</p><h3 id="三-应用"><a href="#三-应用" class="headerlink" title="三. 应用"></a>三. 应用</h3><p>主要用于解决求类似 $\sum\limits_{i=1}^{i\le n}\left\lfloor\dfrac{n}{i}\right\rfloor$ 的式子，如果直接暴力求时间复杂度是 $O(n)$ 的，使用整除分块可以降到 $O(\sqrt{n})$。</p><p>求 $\sum\limits_{i=1}^{i\le n}\left\lfloor\dfrac{n}{i}\right\rfloor$ 的代码示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> il = <span class="number">1</span>, ir = <span class="built_in">min</span>(n, n / (n / il)); ; il = ir + <span class="number">1</span>, ir = <span class="built_in">min</span>(n, n / (n / il))) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (ir == n) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 <code>l &gt; n</code> 后运行这个语句会出现除零错，所以要在每个循环体的末尾判 <code>break</code> 而非 <code>for</code> 的第二个位置。</p><p>例题：</p><p><a href="https://www.luogu.com.cn/problem/P2261">[CQOI2007]余数求和</a></p><p><a href="https://www.luogu.com.cn/problem/P3455">[POI2007]ZAP-Queries</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VisualStudio常用设置</title>
      <link href="/2021/12/12/VisualStudio%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/"/>
      <url>/2021/12/12/VisualStudio%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><em>文章中的的设置纯属个性化设置，依据自身喜好而定。</em></p><h3 id="“选项”菜单"><a href="#“选项”菜单" class="headerlink" title="“选项”菜单"></a>“选项”菜单</h3><p>从“顶部栏/调试/选项”即可打开“选项”菜单，也有其他打开“选项”菜单的方法。</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/12/VisualStudio%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/1.png" alt="打开“选项”菜单"></p><p>接下来的 6 条操作都是在“选项”菜单中完成的。</p><h4 id="主题：（“环境-视觉体验-颜色主题-”）"><a href="#主题：（“环境-视觉体验-颜色主题-”）" class="headerlink" title="主题：（“环境/视觉体验/颜色主题/”）"></a>主题：（“环境/视觉体验/颜色主题/”）</h4><ul><li>深色</li></ul><h4 id="字体：（“环境-字体与颜色-”）"><a href="#字体：（“环境-字体与颜色-”）" class="headerlink" title="字体：（“环境/字体与颜色/”）"></a>字体：（“环境/字体与颜色/”）</h4><ul><li><p>consolas</p></li><li><p>粗体</p></li></ul><h4 id="键盘：（“环境-键盘-gt-搜索‘编辑-切换行注释’”）"><a href="#键盘：（“环境-键盘-gt-搜索‘编辑-切换行注释’”）" class="headerlink" title="键盘：（“环境/键盘/ -&gt; 搜索‘编辑.切换行注释’”）"></a>键盘：（“环境/键盘/ -&gt; 搜索‘编辑.切换行注释’”）</h4><ul><li>快捷键设为”ctrl+/“</li></ul><h4 id="代码格式设置：（“文本编辑器-「你要设置的语言」-代码样式-格式设置-”）"><a href="#代码格式设置：（“文本编辑器-「你要设置的语言」-代码样式-格式设置-”）" class="headerlink" title="代码格式设置：（“文本编辑器/「你要设置的语言」/代码样式/格式设置/”）"></a>代码格式设置：（“文本编辑器/「你要设置的语言」/代码样式/格式设置/”）</h4><ul><li><p>看着改改（根据个人口味）</p></li><li><p>如果是大括号不换行的选手，发现编辑代码的时候大括号自动换行，检查一下这里是不是勾选“在}后自动格式化程序块”了，如果是的话取消勾选。</p></li></ul><h4 id="底部状态栏：（“环境-常规-显示状态栏-”）"><a href="#底部状态栏：（“环境-常规-显示状态栏-”）" class="headerlink" title="底部状态栏：（“环境/常规/显示状态栏/”）"></a>底部状态栏：（“环境/常规/显示状态栏/”）</h4><ul><li>取消勾选</li></ul><h4 id="引用和作者更改项：（“文本编辑器-所有语言-CodeLens-启用CodeLens-”）"><a href="#引用和作者更改项：（“文本编辑器-所有语言-CodeLens-启用CodeLens-”）" class="headerlink" title="引用和作者更改项：（“文本编辑器/所有语言/CodeLens/启用CodeLens/”）"></a>引用和作者更改项：（“文本编辑器/所有语言/CodeLens/启用CodeLens/”）</h4><ul><li>取消勾选</li></ul><h3 id="“属性”菜单"><a href="#“属性”菜单" class="headerlink" title="“属性”菜单"></a>“属性”菜单</h3><p>此条面向 c++ 选手。</p><p>在编译 c++ 代码时，如果你的代码中有 <code>scanf</code> 等编译器认为不安全的函数，可能无法成功编译。如果你想使用这些函数，你需要看一看这一条。</p><p>从“顶部栏/调试/调试属性”即可打开“属性”菜单，或从“顶部栏/项目/属性”打开。</p><p>打开“属性”菜单后，进入“配置属性/C、C++/预处理器/预处理器定义/编辑/”，加入“_CRT_SECURE_NO_WARNINGS”即可。</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/12/VisualStudio%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/2.png" alt="允许不安全设置"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gdb中输出格式优化</title>
      <link href="/2021/12/12/Gdb%E4%B8%ADprint%E7%9A%84%E5%90%84%E7%A7%8D%E5%8F%82%E6%95%B0%E5%AF%B9%E6%95%88%E6%9E%9C%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
      <url>/2021/12/12/Gdb%E4%B8%ADprint%E7%9A%84%E5%90%84%E7%A7%8D%E5%8F%82%E6%95%B0%E5%AF%B9%E6%95%88%E6%9E%9C%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="gdb-打开-关闭输出格式优化的命令"><a href="#gdb-打开-关闭输出格式优化的命令" class="headerlink" title="gdb 打开 / 关闭输出格式优化的命令"></a>gdb 打开 / 关闭输出格式优化的命令</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set p [options] on/off</span><br></pre></td></tr></table></figure><h3 id="常用的-options-参数"><a href="#常用的-options-参数" class="headerlink" title="常用的 options 参数"></a>常用的 <code>options</code> 参数</h3><ul><li><p>array</p></li><li><p>array-index</p></li><li><p>pretty</p></li></ul><h3 id="在输出不同种类变量时各种格式优化参数的效果"><a href="#在输出不同种类变量时各种格式优化参数的效果" class="headerlink" title="在输出不同种类变量时各种格式优化参数的效果"></a>在输出不同种类变量时各种格式优化参数的效果</h3><div class="table-container"><table><thead><tr><th></th><th style="text-align:center">array</th><th style="text-align:center">array-indexes</th><th style="text-align:center">pretty</th></tr></thead><tbody><tr><td>关联式容器：<code>set</code>，<code>map</code>……</td><td style="text-align:center">$-$</td><td style="text-align:center">$-$</td><td style="text-align:center">$\surd$</td></tr><tr><td>序列式容器：<code>vector</code>……</td><td style="text-align:center">$\surd$</td><td style="text-align:center">$\surd$</td><td style="text-align:center">$-$</td></tr><tr><td>容器适配器：<code>stack</code>，<code>priority_queue</code>……</td><td style="text-align:center">$\surd$</td><td style="text-align:center">$\surd$</td><td style="text-align:center">$-$</td></tr><tr><td>普通数组</td><td style="text-align:center">$\surd$</td><td style="text-align:center">$\surd$</td><td style="text-align:center">$-$</td></tr><tr><td>结构体数组</td><td style="text-align:center">$\surd$</td><td style="text-align:center">$\surd$</td><td style="text-align:center">$\times$</td></tr></tbody></table></div><p>  $\surd$：添加会提升效果。</p><p>  $\times$：添加会降低效果。</p><p>  $-$：添不添加对效果不影响。</p><p>  （这里的效果纯属个人观点）</p><p>  图片示例：</p><p>  <img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/12/Gdb%E7%9A%84%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E4%BC%98%E5%8C%96/1.png" alt="优化后的set的输出"></p><p>  <img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/12/Gdb%E7%9A%84%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E4%BC%98%E5%8C%96/2.png" alt="优化后的vector的输出"></p><p>  <img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/12/Gdb%E7%9A%84%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E4%BC%98%E5%8C%96/3.png" alt="优化后的结构体数组的输出"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针优化dp &amp; Luogu P1973 [NOI2011] NOI 嘉年华</title>
      <link href="/2021/10/13/%E5%8F%8C%E6%8C%87%E9%92%88%E4%BC%98%E5%8C%96dp%20&amp;%20Luogu%20P1973%20%5BNOI2011%5D%20NOI%20%E5%98%89%E5%B9%B4%E5%8D%8E/"/>
      <url>/2021/10/13/%E5%8F%8C%E6%8C%87%E9%92%88%E4%BC%98%E5%8C%96dp%20&amp;%20Luogu%20P1973%20%5BNOI2011%5D%20NOI%20%E5%98%89%E5%B9%B4%E5%8D%8E/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1973">题目传送门</a></p><h2 id="一-思路"><a href="#一-思路" class="headerlink" title="一. 思路"></a>一. 思路</h2><p>首先进行离散化，将所有区间左右端点离散化，离散成 $m$ 个“离散点”，只有这些地方才可能设置为断点，不然一定是不优的。</p><p>首先考虑朴素 DP，设 $sec_{l,r}$ 为完全被包含在离散点 $l\sim r$ 内的区间总数，直接<br> $O(n^3)$ 暴力求就好了。</p><p>$pre_{i,j}$：离散点 $1\sim i$ 内包含的区间，一个组分到 $j$ 个区间时，另一组能分到的最大值。我们的方程应该写成这样：</p><script type="math/tex; mode=display">pre_{i,j}=\max\limits_{k=1}^{k<i}\{pre_{k,j}+sec_{k,i},pre_{k,j-sec_{k,i}}\}</script><p>然后没有限制条件下的答案就是 $\max\limits<em>{j=1}^n{\min(pre</em>{m,j},j)}$</p><p>$suf_{i,j}$：离散点 $i\sim m$ 内包含的区间，一个组分到 $j$ 个区间时，另一组能分到的最大值，与 $pre$ 相似。</p><p>$d_{i,j}$：限制为离散点 $i\sim j$ 间不能有断点的情况下分到的区间较少的组别中区间数量的最大值，有状转方程：</p><script type="math/tex; mode=display">d_{l,r}=\max_{x=1}^{m}\max_{y=1}^{m}\left\{\min\left(x+sec_{l,r}+y,pre_{l, x}+suf_{r, y}\right)\right\}</script><p>要求编号为 $i$ 的区间（左端点为 $le_i$，右端点 $ri_i$）不能被舍弃下的答案是：</p><script type="math/tex; mode=display">ans_{i}=\max _{l=1}^{le_{i}} \max _{r=ri_{i}}^{m}\left\{d_{l, r}\right\}</script><p>可以看到，整个解题过程的瓶颈就是 $2\operatorname{D}/2\operatorname{D}$ 的求 $d<em>{i,j}$ 的过程，我们无法承受 $O(n^4)$ 的复杂度，要考虑优化，我们发现对于固定的 $l,r$，固定一个 $x$ 后，有一个 $y$ 使 $\min\left(x+sec</em>{l,r}+y,pre<em>{l,x}+suf</em>{r,y}\right)$ 最大，设这个值为 $y’<em>x$ ，根据 $pre_i$ 的性质，$j$ 不变时，$pre</em>{i,j}$ 随着 $j$ 增大而减小。</p><p>假设我们已求出了 $y’<em>{x}$，现在考虑 $y’</em>{x+a}$（$a$ 为正整数），$x+a$ 相对于 $x$，$y$ 不变，$x+sec<em>{l,r}+y$ 的值增加，$pre</em>{l,x}+suf<em>{r,y}$ 的值减小。$y’_x+b$ （$b$ 为正整数）相对于 $y’_x$，$x$ 不变，$x+sec</em>{l,r}+y$ 的值增加，$pre<em>{l,x}+suf</em>{r,y}$ 的值减小。</p><p>所以得出结论，$y’_{x+a}\le y’_x$，因为 $&gt;y’_x$ 的决策，对 $x$ 是不优的，那么对于 $x+a$ 就更不优了。</p><p>设 $g<em>{l,r,x}(y)=\min\left(x+sec</em>{l,r}+y,pre<em>{l,x}+suf</em>{r,y}\right)$（在接下来的推导中都将 $l$ 和 $r$ 当作常量，所以简写为 $g<em>x(y)$），仔细想想可以发现，该函数有一个极值，即 $x+sec</em>{l,r}+y=pre<em>{l,x}+suf</em>{r,y}$ 时，当然因为取值都是整数他们有可能没有相等的时刻，这里指的是连成平滑曲线后的函数。并且函数 $g_x(y)$ 极点的一侧单调。</p><p>请注意现在的一个<strong>函数</strong>对应的是一个<strong>状态</strong>，<strong>横坐标</strong>对应的是<strong>决策</strong>。</p><p>于是我们尝试画出这个图象，刚才我们已经证出两条性质：</p><ul><li>$op$（最优决策）具有单调性。</li><li>$g_i(j)$ 极点的一侧具有单调性。</li></ul><p><img src="https://figurebed-1306986731.file.myqcloud.com/%E8%AF%BE%E4%BB%B6/%E6%A0%91%E5%BD%A2DP%20%26%20DP%E4%BC%98%E5%8C%96/6.png" alt=""></p><p>（图像仅供参考，不代表实际上就长这样，该图象只显示出了对解题有用的特征）</p><ul><li>$op$（最优决策）具有单调性。</li><li>$g_i(j)$ 极点的一侧具有单调性。</li></ul><p>根据这两条性质，可以直接用一个指针从右往左扫，向上“爬坡”，到顶点后就记录这个值，并转到下一条函数：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/%E8%AF%BE%E4%BB%B6/%E6%A0%91%E5%BD%A2DP%20%26%20DP%E4%BC%98%E5%8C%96/7.png" alt=""></p><p>转移的代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntmap; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= cntmap; ++j) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= n; ++x) &#123;</span><br><span class="line">            <span class="keyword">while</span> (y &amp;&amp; <span class="built_in">min</span>(x+sec[i][j]+y,pre[i][x]+suf[j][y])&lt;=<span class="built_in">min</span>(x+sec[i][j]+y<span class="number">-1</span>,pre[i][x]+suf[j][y<span class="number">-1</span>])) --y;</span><br><span class="line">            d[i][j] = <span class="built_in">max</span>(d[i][j], <span class="built_in">min</span>(x + sec[i][j] + y, pre[i][x] + suf[j][y]));</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, d[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-细节"><a href="#二-细节" class="headerlink" title="二. 细节"></a>二. 细节</h2><p><strong>很重要，也很致命</strong>。</p><ol><li><p>向上“爬坡”时，我们需要比较指针当前位置和指针下一个位置作为决策哪一个更优，有人会用 <code>&lt;=</code>，有人会用 <code>&lt;</code>，如果你用 <code>&lt;</code>，你会获得 ${\color{Red}0}$ 分的好成绩。问题在哪呢？如果有一个这样的函数：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/%E8%AF%BE%E4%BB%B6/%E6%A0%91%E5%BD%A2DP%20%26%20DP%E4%BC%98%E5%8C%96/8.png" alt=""></p></li><li><p>我们的代码实现和理论是有一定区别的，通常会自动忽略一些不可能是最优的决策，以本体为例，比如有这样的一个“区间”，里面刚好包含两个重合的区间（还记得加和不加引号的“区间”分别代表什么吗？）：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/%E8%AF%BE%E4%BB%B6/%E6%A0%91%E5%BD%A2DP%20%26%20DP%E4%BC%98%E5%8C%96/9.png" alt=""></p><p>我们当然不会舍弃这两个区间其中任意一个，因为完全可以不舍弃。但确实有一种选择是舍弃其中一个，虽然这样不优，但我们在代码中做的是将所选“区间”中区间的数量作为权值 $sec$，计算的时候加上 $sec$，就相当于忽略了舍弃一个区间这种情况，这就导致我在输出数组 $suf$ 中的值时，看到了这样的一幕：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/%E8%AF%BE%E4%BB%B6/%E6%A0%91%E5%BD%A2DP%20%26%20DP%E4%BC%98%E5%8C%96/10.png" alt=""></p></li></ol><p>可以看到，$suf$ 函数不是单调的了，这是因为我的输入数据有两个区间是重合的，我们在计算 $suf$ 时没有算只丢弃他们之中一个这种情况，对于朴素 DP 自然无伤大雅，但双指针优化 DP 要求函数有严格的单调不降性。用图像来说话就是出现了这种情况：</p><p>   <img src="https://figurebed-1306986731.cos.ap-beijing.myqcloud.com/%E8%AF%BE%E4%BB%B6/%E6%A0%91%E5%BD%A2DP%20%26%20DP%E4%BC%98%E5%8C%96/11.png" alt=""></p><p>   <strong>注意</strong>：上面这个函数表示的是数组里存的值，是用计算机算出来的值，而非实际的函数，如果函数确实就长这样他根本就满足不了双指针优化的前提条件！</p><p>   因为满足 $suf<em>i\ge suf</em>{i+a}$（$a$ 为正整数），可以将这个坑填平：</p><p>   <img src="https://figurebed-1306986731.file.myqcloud.com/%E8%AF%BE%E4%BB%B6/%E6%A0%91%E5%BD%A2DP%20%26%20DP%E4%BC%98%E5%8C%96/12.png" alt=""></p><p>填坑代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntmap; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; ~j; --j) &#123;</span><br><span class="line">        pre[i][j] = <span class="built_in">max</span>(pre[i][j], pre[i][j + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntmap; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; ~j; --j) &#123;</span><br><span class="line">        suf[i][j] = <span class="built_in">max</span>(suf[i][j], suf[i][j + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-代码"><a href="#三-代码" class="headerlink" title="三. 代码"></a>三. 代码</h2><p>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">2e2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;n, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> cntmap, mapup[MAXn * <span class="number">2</span> + <span class="number">10</span>]; map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mapdown;</span><br><span class="line"><span class="keyword">int</span> le[MAXn + <span class="number">10</span>], ri[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> sec[MAXn * <span class="number">2</span> + <span class="number">10</span>][MAXn * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> pre[MAXn * <span class="number">2</span> + <span class="number">10</span>][MAXn + <span class="number">10</span>], suf[MAXn * <span class="number">2</span> + <span class="number">10</span>][MAXn + <span class="number">10</span>], d[MAXn * <span class="number">2</span> + <span class="number">10</span>][MAXn * <span class="number">2</span> + <span class="number">10</span>], ans;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l, len, r; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(l, len); r = l + len;</span><br><span class="line">        le[i] = l;</span><br><span class="line">        ri[i] = r;</span><br><span class="line">        mapup[++cntmap] = l;</span><br><span class="line">        mapup[++cntmap] = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(mapup + <span class="number">1</span>, mapup + <span class="number">1</span> + cntmap);</span><br><span class="line">    cntmap = <span class="built_in">unique</span>(mapup + <span class="number">1</span>, mapup + <span class="number">1</span> + cntmap) - (mapup + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntmap; ++i) &#123;</span><br><span class="line">        mapdown[mapup[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        le[i] = mapdown[le[i]];</span><br><span class="line">        ri[i] = mapdown[ri[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntmap; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= cntmap; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (le[k] &gt;= i &amp;&amp; ri[k] &lt;= j) ++sec[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(pre, <span class="number">0xc0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(pre));</span><br><span class="line">    pre[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= cntmap; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; i; ++k) &#123;</span><br><span class="line">                pre[i][j] = <span class="built_in">max</span>(pre[i][j], <span class="built_in">max</span>(pre[k][j - sec[k][i]], pre[k][j] + sec[k][i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntmap; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; ~j; --j) &#123;</span><br><span class="line">            pre[i][j] = <span class="built_in">max</span>(pre[i][j], pre[i][j + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(suf, <span class="number">0xc0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(suf));</span><br><span class="line">    suf[cntmap][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = cntmap - <span class="number">1</span>; i; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = cntmap; k &gt; i; --k) &#123;</span><br><span class="line">                suf[i][j] = <span class="built_in">max</span>(suf[i][j], <span class="built_in">max</span>(suf[k][j - sec[i][k]], suf[k][j] + sec[i][k]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntmap; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; ~j; --j) &#123;</span><br><span class="line">            suf[i][j] = <span class="built_in">max</span>(suf[i][j], suf[i][j + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntmap; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= cntmap; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = n;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= n; ++x) &#123;</span><br><span class="line">                <span class="keyword">while</span> (y &amp;&amp; <span class="built_in">min</span>(x + sec[i][j] + y, pre[i][x] + suf[j][y]) &lt;= <span class="built_in">min</span>(x + sec[i][j] + y - <span class="number">1</span>, pre[i][x] + suf[j][y - <span class="number">1</span>])) --y;</span><br><span class="line">                d[i][j] = <span class="built_in">max</span>(d[i][j], <span class="built_in">min</span>(x + sec[i][j] + y, pre[i][x] + suf[j][y]));</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, d[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> partans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = le[i]; j; --j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = ri[i]; k &lt;= cntmap; ++k) &#123;</span><br><span class="line">                partans = <span class="built_in">max</span>(partans, d[j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, partans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题解 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu U182676 完全图切割</title>
      <link href="/2021/10/06/Luogu%20U182676%20%E5%AE%8C%E5%85%A8%E5%9B%BE%E5%88%87%E5%89%B2/"/>
      <url>/2021/10/06/Luogu%20U182676%20%E5%AE%8C%E5%85%A8%E5%9B%BE%E5%88%87%E5%89%B2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/U182676">题目传送门</a></p><p>（题目非原创）</p><h3 id="一-思路"><a href="#一-思路" class="headerlink" title="一. 思路"></a>一. 思路</h3><h4 id="没有连通性限制的情况"><a href="#没有连通性限制的情况" class="headerlink" title="没有连通性限制的情况"></a>没有连通性限制的情况</h4><p>$f_{i, j}$：$i$ 个点所有连边情况的简单无向图（无重边自环，不要求连通），每种情况边数 $j$ 次方的和。</p><p>考虑 $f$ 的递推式，因为没有连通性要求，边随便连，可以考虑每加入一个点，他和其他所有点的连边情况，显然，如果原来有 $i - 1$ 个点，加入一个点，新连边的所有情况 $\begin{cases}\operatorname{C}<em>{i-1}^{0}\times\text{新连0边}\\operatorname{C}</em>{i-1}^{1}\times\text{新连1边}\\cdots\\operatorname{C}<em>{i-1}^{i-1}\times\text{新连i-1边}\\end{cases}$，设集合 $T_i=\begin{cases}\operatorname{C}</em>{i-1}^{0}\text{个0}\\operatorname{C}<em>{i-1}^{1}\text{个1}\\cdots\\operatorname{C}</em>{i-1}^{i-1}\text{个i-1}\\end{cases}$，集合 $F_i$ 表示 $i$ 个点所有连边情况的简单无向图的边数构成的集合。那么：</p><script type="math/tex; mode=display">\begin{gather}\because F_i=\left\{z\mid z=x+y,x\in F_{i-1},y\in T_i\right\}\\\And f_{i,j}=\sum\limits_{z\in F_i}z^j\\\therefore f_{i,j}=\sum\limits_{x\in F_{i-1}}\sum\limits_{y\in T_{i}}(x+y)^j\\\end{gather}</script><p>$f_{i,j}$ 对于不同的 $j$ 继续拆解这个式子：</p><script type="math/tex; mode=display">\begin{gather}f_{i,0}=\sum\limits_{x\in F_{i-1}}\sum\limits_{y\in T_{i}}(x+y)^0\\=\sum\limits_{x\in F_{i-1}}\sum\limits_{y\in T_{i}}1\\=\left|F_{i-1}\right|\left|T_{i}\right|\\=f_{i-1,0}\times2^{i-1}\\\end{gather}</script><script type="math/tex; mode=display">\begin{gather}f_{i,1}=\sum\limits_{x\in F_{i-1}}\sum\limits_{y\in T_{i}}(x+y)^1\\=\sum\limits_{y\in T_{i}}\sum\limits_{x\in F_{i-1}}x+\sum\limits_{x\in F_{i-1}}\sum\limits_{y\in T_{i}}y\\=\left|T_{i}\right|\sum\limits_{x\in F_{i-1}}x+\left|F_{i-1}\right|\sum\limits_{y\in T_{i}}y\\=2^{i-1}\times f_{i-1}+f_{i-1,0}\times\sum\limits_{y\in T_{i}}y\\\end{gather}</script><script type="math/tex; mode=display">\begin{gather}f_{i,2}=\sum\limits_{x\in F_{i-1}}\sum\limits_{y\in T_{i}}(x+y)^2\\=\sum\limits_{x\in F_{i-1}}\sum\limits_{y\in T_{i}}(x^2+y^2+2xy)\\=\sum\limits_{y\in T_{i}}\sum\limits_{x\in F_{i-1}}x^2+\sum\limits_{x\in F_{i-1}}\sum\limits_{y\in T_{i}}y^2+2\sum\limits_{x\in F_{i-1}}x\sum\limits_{y\in T_{i}}y\\=2^{i-1}\times f_{i-1,2}+f_{i-1,0}\times \sum\limits_{y\in T_{i}}y^2+2\times f_{i-1,1}\times \sum\limits_{y\in T_{i}}y\end{gather}</script><p>可以预处理出 $2^i$、$\sum\limits<em>{y\in T</em>{i}}y$ 和 $\sum\limits<em>{y\in T</em>{i}}y^2$。</p><h4 id="有连通性限制的情况"><a href="#有连通性限制的情况" class="headerlink" title="有连通性限制的情况"></a>有连通性限制的情况</h4><p>$d_{i, j}$：$i$ 个点所有保证连通的连边情况的简单无向图，每种情况边数 $j$ 次方的和。</p><p>$D_i$：$i$ 个点所有保证连通的连边情况的简单无向图的边数构成的集合。</p><p>正难则反，不方便直接推出符合条件的情况，可以用总的情况减去不符合的情况。随意选一个点作为基准，枚举这个点所在连通块的大小，显然这个点所在连通块一定连通<del>（废话）</del>，剩余点连通性随意，如果节点总数 $i$ 基准节点所在连通块大小为 $k$，除去那个基准节点一定被选，剩余点中要选 $k-1$ 个作为连通块中的其他节点，方案数 $\operatorname{C}_{i-1}^{k-1}$。</p><script type="math/tex; mode=display">\begin{gather}d_{i,j}=f_{i,j}-\sum\limits_{k=1}^{k<i}\left(\operatorname{C}_{i-1}^{k-1}\times\sum_{z\in\left\{z\mid z=x+y,x\in D_k,y\in F_{i-k}\right\}}z^j\right)\\=f_{i,j}-\sum\limits_{k=1}^{k<i}\left(\operatorname{C}_{i-1}^{k-1}\times\sum\limits_{x\in D_k}\sum\limits_{y\in F_{i-k}}(x+y)^j\right)\end{gather}</script><p>道理和无连通性限制的情况是相同的。</p><p>这里为了<del>偷懒</del>节约篇幅 $d<em>{i,j}$ 对于不同的 $j$ 的具体过程就不写了，只写最终式，如果读者真正明白了 $f</em>{i,j}$ 的推导是可以自己推出 $d_{i,j}$ 的。</p><script type="math/tex; mode=display">d_{i,0}=f_{i,0}-\sum\limits_{k=1}^{k<i}\left(\operatorname{C}_{i-1}^{k-1}\times d_{j,0}\times f_{i-j,0}\right)</script><script type="math/tex; mode=display">d_{i,1}=f_{i,1}-\sum\limits_{k=1}^{k<i}\left(\operatorname{C}_{i-1}^{k-1}\times(f_{i-j,0}\times d_{j,1}+d_{j,0}\times f_{i-j,1})\right)</script><script type="math/tex; mode=display">d_{i,2}=f_{i,2}-\sum\limits_{k=1}^{k<i}\left(\operatorname{C}_{i-1}^{k-1}\times(f_{i-j,0}\times d_{j,2}+d_{j,0}\times f_{i-j,2}+2\times d_{j,1}\times f_{i-j,1})\right)</script><h3 id="二-代码"><a href="#二-代码" class="headerlink" title="二.代码"></a>二.代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">2e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mod, C[MAXn + <span class="number">10</span>][MAXn + <span class="number">10</span>], row1[MAXn + <span class="number">10</span>], row2[MAXn + <span class="number">10</span>], sum[MAXn + <span class="number">10</span>], sumpower[MAXn + <span class="number">10</span>], power2[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>] = C[i][i] = <span class="number">1</span>;</span><br><span class="line">        row1[i] = i; row2[i] = (i * i) % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">            C[i][j] = (C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j]) % mod;</span><br><span class="line">            row1[i] = (row1[i] + C[i][j] * j) % mod;</span><br><span class="line">            row2[i] = (row2[i] + C[i][j] * (j * j) % mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    power2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        sum[i] = (sum[i - <span class="number">1</span>] + i) % mod;</span><br><span class="line">        sumpower[i] = (sumpower[i - <span class="number">1</span>] + i * i) % mod;</span><br><span class="line">        power2[i] = (power2[i - <span class="number">1</span>] * <span class="number">2</span>) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, d[MAXn + <span class="number">10</span>][<span class="number">3</span>], f[MAXn + <span class="number">10</span>][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; mod;</span><br><span class="line">    <span class="built_in">Init</span>(n);</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>] = d[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = f[<span class="number">1</span>][<span class="number">2</span>] = d[<span class="number">1</span>][<span class="number">1</span>] = d[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        f[i][<span class="number">0</span>] = (f[i - <span class="number">1</span>][<span class="number">0</span>] * power2[i - <span class="number">1</span>]) % mod;</span><br><span class="line">        f[i][<span class="number">1</span>] = ((f[i - <span class="number">1</span>][<span class="number">1</span>] * power2[i - <span class="number">1</span>]) % mod + (f[i - <span class="number">1</span>][<span class="number">0</span>] * row1[i - <span class="number">1</span>]) % mod) % mod;</span><br><span class="line">        f[i][<span class="number">2</span>] = ((f[i - <span class="number">1</span>][<span class="number">2</span>] * power2[i - <span class="number">1</span>]) % mod + (f[i - <span class="number">1</span>][<span class="number">0</span>] * row2[i - <span class="number">1</span>]) % mod + (<span class="number">2</span> * f[i - <span class="number">1</span>][<span class="number">1</span>]) % mod * row1[i - <span class="number">1</span>] % mod) % mod;</span><br><span class="line">        d[i][<span class="number">0</span>] = f[i][<span class="number">0</span>];</span><br><span class="line">        d[i][<span class="number">1</span>] = f[i][<span class="number">1</span>];</span><br><span class="line">        d[i][<span class="number">2</span>] = f[i][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">            d[i][<span class="number">0</span>] = (d[i][<span class="number">0</span>] - (C[i - <span class="number">1</span>][j - <span class="number">1</span>] * (d[j][<span class="number">0</span>] * f[i - j][<span class="number">0</span>] % mod) % mod)) % mod;</span><br><span class="line">            d[i][<span class="number">1</span>] = (d[i][<span class="number">1</span>] - (C[i - <span class="number">1</span>][j - <span class="number">1</span>] * ((f[i - j][<span class="number">0</span>] * d[j][<span class="number">1</span>] % mod) + (d[j][<span class="number">0</span>] * f[i - j][<span class="number">1</span>] % mod)) % mod)) % mod;</span><br><span class="line">            d[i][<span class="number">2</span>] = (d[i][<span class="number">2</span>] - (C[i - <span class="number">1</span>][j - <span class="number">1</span>] * ((f[i - j][<span class="number">0</span>] * d[j][<span class="number">2</span>] % mod) + (d[j][<span class="number">0</span>] * f[i - j][<span class="number">2</span>] % mod) + (<span class="number">2</span> * d[j][<span class="number">1</span>] * f[i - j][<span class="number">1</span>] % mod)) % mod)) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (d[n][<span class="number">2</span>] % mod + mod) % mod &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题解 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树套矩阵 &amp; Luogu P7453 [THUSCH2017] 大魔法师</title>
      <link href="/2021/09/05/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E7%9F%A9%E9%98%B5%20&amp;%20Luogu%20P7453%20%5BTHUSCH2017%5D%20%E5%A4%A7%E9%AD%94%E6%B3%95%E5%B8%88/"/>
      <url>/2021/09/05/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E7%9F%A9%E9%98%B5%20&amp;%20Luogu%20P7453%20%5BTHUSCH2017%5D%20%E5%A4%A7%E9%AD%94%E6%B3%95%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P7453">题目传送门</a></p><p>本文分思路（线段树套矩阵的原理），细节和卡常，代码三个部分，大家可以直接跳到自己想看的章节。</p><h2 id="零-前置知识"><a href="#零-前置知识" class="headerlink" title="零. 前置知识"></a>零. 前置知识</h2><h5 id="1-线段树"><a href="#1-线段树" class="headerlink" title="1. 线段树"></a>1. <a href="https://www.luogu.com.cn/problem/P3373">线段树</a></h5><p>  为什么我的链接指向的是线段树 2， 而不是 1？自然是因为本题中线段树含有区间乘的要求（虽然没了区间加），强烈建议要写这道题的同学先熟练写出这道题（我就是线段树没写对调了好长时间）。</p><h5 id="2-矩阵运算"><a href="#2-矩阵运算" class="headerlink" title="2. 矩阵运算"></a>2. <a href="https://www.luogu.com.cn/problem/P3390">矩阵运算</a></h5><p>  建议将矩阵进行封装并重载运算符，因为在本体的大码量下不重载个运算符写起来真的很难受。</p><h2 id="一-线段树套矩阵（思路）"><a href="#一-线段树套矩阵（思路）" class="headerlink" title="一. 线段树套矩阵（思路）"></a>一. 线段树套矩阵（思路）</h2><p>  如果这题只要求我们维护一种元素，或是各种元素之间没有影响，那这就是个线段树的板题。关键是这几种元素会相互影响。</p><p>  但是我们发现，这些操作其实都可以通过矩阵乘法来实现。比如操作一（G 矩阵就是我代码中变量名为 G 的矩阵）：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/09/05/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E7%9F%A9%E9%98%B5%20%26%20Luogu%20P7453%20%5BTHUSCH2017%5D%20%E5%A4%A7%E9%AD%94%E6%B3%95%E5%B8%88/1.png" alt=""></p><p>操作四：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/09/05/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E7%9F%A9%E9%98%B5%20%26%20Luogu%20P7453%20%5BTHUSCH2017%5D%20%E5%A4%A7%E9%AD%94%E6%B3%95%E5%B8%88/2.png" alt=""></p><p>（其他操作的转移矩阵见“三. 代码”）</p><p>  线段树上的矩阵只需开 $1 \times 4$（而我开了 $4 \times 4$，不过也卡过去了），其中三列的上维护三种元素，另一列维护常数 $1$。</p><p>  转移矩阵需要开 $4 \times 4$。</p><p>  那么每个操作就是将一个区间上的所有矩阵乘上一个数矩阵，如果把一个矩阵看作一个数，那这就是线段树裸题，所以，把一个支持区间乘和求区间和的线段树的 <code>mul</code> 数组（乘法懒标记）和 <code>sum</code> 数组（区间和）的数据类型改为 $4 \times 4$ 矩阵或 $1 \times 4$ 向量，<code>mul[xxx] = 1</code> 改为 <code>mul[xxx] = I</code> （<code>I</code>：单位矩阵）就行了。</p><h2 id="二-卡常"><a href="#二-卡常" class="headerlink" title="二. 卡常"></a>二. 卡常</h2><ol><li><p>不要使用 <code>long long</code>，有溢出风险的地方用强制转换就好了。</p></li><li><p>使用快读或：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">std::cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br></pre></td></tr></table></figure></li><li><p>开 O2。</p></li><li><p>如果还卡不过去，那就应该试试将线段树上的 $4 \times 4$ 矩阵换成 $1 \times 4$ 的向量。</p></li></ol><h2 id="三-代码"><a href="#三-代码" class="headerlink" title="三. 代码"></a>三. 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">2e5</span> + <span class="number">5e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXmat = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>);<span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;<span class="keyword">register</span> T x = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mat[MAXmat][MAXmat];</span><br><span class="line">    <span class="built_in">Mat</span>() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(mat, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(mat));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Mat</span>(<span class="keyword">int</span> a[MAXmat][MAXmat]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXmat; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAXmat; ++j) &#123;</span><br><span class="line">                mat[i][j] = a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>=(Mat x) &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXmat; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAXmat; ++j) &#123;</span><br><span class="line">                mat[i][j] = x.mat[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> Mat <span class="keyword">operator</span>+(Mat x) &#123;</span><br><span class="line">        Mat ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXmat; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAXmat; ++j) &#123;</span><br><span class="line">                ans.mat[i][j] = ((ll)mat[i][j] + x.mat[i][j]) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> Mat <span class="keyword">operator</span>*(Mat x) &#123;</span><br><span class="line">        Mat ans;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXmat; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (re <span class="keyword">int</span> k = <span class="number">0</span>; k &lt; MAXmat; ++k) &#123;</span><br><span class="line">                <span class="keyword">int</span> a = mat[i][k];</span><br><span class="line">                <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAXmat; ++j) &#123;</span><br><span class="line">                    ans.mat[i][j] = ((ll)a * x.mat[k][j] + ans.mat[i][j]) % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> Mat <span class="keyword">operator</span>^(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        Mat ans, base;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXmat; ++i) &#123;</span><br><span class="line">            ans.mat[i][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXmat; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAXmat; ++j) &#123;</span><br><span class="line">                base.mat[i][j] = mat[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                ans = ans * base;</span><br><span class="line">            &#125;</span><br><span class="line">            base = base * base;</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> I_[MAXmat][MAXmat] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Mat <span class="title">I</span><span class="params">(I_)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> le[MAXn * <span class="number">4</span> + <span class="number">10</span>], ri[MAXn * <span class="number">4</span> + <span class="number">10</span>];</span><br><span class="line">Mat sum[MAXn * <span class="number">4</span> + <span class="number">10</span>], mul[MAXn * <span class="number">4</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    sum[id] = (sum[id &lt;&lt; <span class="number">1</span>] + sum[(id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    sum[id &lt;&lt; <span class="number">1</span>] = (sum[id &lt;&lt; <span class="number">1</span>] * mul[id]);</span><br><span class="line">    sum[(id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>] = (sum[(id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>] * mul[id]);</span><br><span class="line">    mul[id &lt;&lt; <span class="number">1</span>] = (mul[id &lt;&lt; <span class="number">1</span>] * mul[id]);</span><br><span class="line">    mul[(id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>] = (mul[(id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>] * mul[id]);</span><br><span class="line">    mul[id] = I;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildUseArr</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, Mat *a)</span> </span>&#123;</span><br><span class="line">    le[id] = l;</span><br><span class="line">    ri[id] = r;</span><br><span class="line">    mul[id] = I;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        sum[id] = a[l];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">BuildUseArr</span>(id &lt;&lt; <span class="number">1</span>, l, mid, a);</span><br><span class="line">        <span class="built_in">BuildUseArr</span>((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, r, a);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mul</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, Mat k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        mul[id] = (mul[id] * k);</span><br><span class="line">        sum[id] = (sum[id] * k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">Mul</span>(id &lt;&lt; <span class="number">1</span>, l, r, k);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) <span class="built_in">Mul</span>((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, r, k);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Mat <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        Mat ans;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) ans = <span class="built_in">Sum</span>(id &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) ans = (ans + <span class="built_in">Sum</span>((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, r));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">Mat a[MAXn + <span class="number">10</span>], G;</span><br><span class="line"><span class="keyword">int</span> A_[MAXmat][MAXmat] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Mat <span class="title">A</span><span class="params">(A_)</span></span>;</span><br><span class="line"><span class="keyword">int</span> B_[MAXmat][MAXmat] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Mat <span class="title">B</span><span class="params">(B_)</span></span>;</span><br><span class="line"><span class="keyword">int</span> C_[MAXmat][MAXmat] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Mat <span class="title">C</span><span class="params">(C_)</span></span>;</span><br><span class="line"><span class="keyword">int</span> D_[MAXmat][MAXmat] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, <span class="comment">// [3][0] = v</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Mat <span class="title">D</span><span class="params">(D_)</span></span>;</span><br><span class="line"><span class="keyword">int</span> E_[MAXmat][MAXmat] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, <span class="comment">// [1][1] = v</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Mat <span class="title">E</span><span class="params">(E_)</span></span>;</span><br><span class="line"><span class="keyword">int</span> F_[MAXmat][MAXmat] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, <span class="comment">// [3][2] = v</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Mat <span class="title">F</span><span class="params">(F_)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i].mat[<span class="number">0</span>][<span class="number">0</span>]), <span class="built_in">read</span>(a[i].mat[<span class="number">0</span>][<span class="number">1</span>]), <span class="built_in">read</span>(a[i].mat[<span class="number">0</span>][<span class="number">2</span>]);</span><br><span class="line">        a[i].mat[<span class="number">0</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BuildUseArr</span>(<span class="number">1</span>, <span class="number">1</span>, n, a);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, opt, l, r, v; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt);</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (opt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">read</span>(l), <span class="built_in">read</span>(r);</span><br><span class="line">            <span class="built_in">Mul</span>(<span class="number">1</span>, l, r, A);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">read</span>(l), <span class="built_in">read</span>(r);</span><br><span class="line">            <span class="built_in">Mul</span>(<span class="number">1</span>, l, r, B);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">read</span>(l), <span class="built_in">read</span>(r);</span><br><span class="line">            <span class="built_in">Mul</span>(<span class="number">1</span>, l, r, C);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="built_in">read</span>(l), <span class="built_in">read</span>(r), <span class="built_in">read</span>(v);</span><br><span class="line">            D.mat[<span class="number">3</span>][<span class="number">0</span>] = v;</span><br><span class="line">            <span class="built_in">Mul</span>(<span class="number">1</span>, l, r, D);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">read</span>(l), <span class="built_in">read</span>(r), <span class="built_in">read</span>(v);</span><br><span class="line">            E.mat[<span class="number">1</span>][<span class="number">1</span>] = v;</span><br><span class="line">            <span class="built_in">Mul</span>(<span class="number">1</span>, l, r, E);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="built_in">read</span>(l), <span class="built_in">read</span>(r), <span class="built_in">read</span>(v);</span><br><span class="line">            F.mat[<span class="number">3</span>][<span class="number">2</span>] = v;</span><br><span class="line">            <span class="built_in">Mul</span>(<span class="number">1</span>, l, r, F);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="built_in">read</span>(l), <span class="built_in">read</span>(r);</span><br><span class="line">            G = <span class="built_in">Sum</span>(<span class="number">1</span>, l, r);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, G.mat[<span class="number">0</span>][<span class="number">0</span>], G.mat[<span class="number">0</span>][<span class="number">1</span>], G.mat[<span class="number">0</span>][<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P2518 [HAOI2010]计数</title>
      <link href="/2021/09/02/%E8%AE%A1%E6%95%B0/"/>
      <url>/2021/09/02/%E8%AE%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2518">题目传送门</a></p><h2 id="一-思路"><a href="#一-思路" class="headerlink" title="一. 思路"></a>一. 思路</h2><h4 id="1-拆分原数（数位DP思想）"><a href="#1-拆分原数（数位DP思想）" class="headerlink" title="1. 拆分原数（数位DP思想）"></a>1. 拆分原数（数位DP思想）</h4><p>求某个区间的数中满足某个条件的数的个数，这是典型的数位 DP 题的套路。于是我们可以试着拆分这个数，把 [0, 原数) 这个区间按位拆成一些区间：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/09/02/%E8%AE%A1%E6%95%B0/1.png" alt=""></p><p>我们只需计算出所有整块区间中满足条件的数并求和就好了。</p><h4 id="2-处理每个区间（多重集排列）"><a href="#2-处理每个区间（多重集排列）" class="headerlink" title="2. 处理每个区间（多重集排列）"></a>2. 处理每个区间（多重集排列）</h4><p>所谓符合要求，就是由原数中的每一位上的非零数和任意个零按位拼凑而成。看似这个要求不好处理，实则完全可以通过多重集排列得出。</p><p>多重集排列，将一个可以有重复元素的集合中的元素进行排列的方案数，如：{1, 3, 3}，多重集排列：[1, 3, 3]，[3, 1, 3]，[3, 3, 1]，共三种。这篇文章中设多重集排列的符号为 $\operatorname{Pmult}(cnt_1, cnt_2 \ldots cnt_n)$，如 {1, 3, 3} 的排列是 $\operatorname{Pmult}(1, 2)$。</p><p>应用到这题上来就是例如 [0, 1000) 这个区间，首位是 “0”，除了首位外还有 3 位，有两个非零数字 “1”，”2”。答案就是 一个 “1”，一个 “2”，一个 “0”（”0” 的个数为除首位外的位数 - 非零位数），即 $\operatorname{Pmult}(1, 1, 1)$。</p><p>多重集排列的计算公式就是：</p><script type="math/tex; mode=display">\operatorname{Pmult}(cnt_1, cnt_2 \ldots cnt_n) = \operatorname{C}_{sumcnt}^{cnt_1} \times \operatorname{C}_{sumcnt - cnt_1}^{cnt_2} \times \ldots \times \operatorname{C}_{sumcnt - cnt_1 - cnt_2 - \ldots - cnt_{n - 1}}^{cnt_n}~~~~(sumcnt = \sum\limits_{i = 1}^n cnt_i)</script><p>简略证明就是你有 $sumcnt$ 个空，先将 $cnt<em>1$ 个相同物品放进去，就是 $\operatorname{C}</em>{sumcnt}^{cnt_1}$ 种，空的数量变为 $sumcnt - cnt_1$ 个，以此类推。</p><h4 id="3-代码实现中的细节："><a href="#3-代码实现中的细节：" class="headerlink" title="3. 代码实现中的细节："></a>3. 代码实现中的细节：</h4><ol><li>拆分原数是从高位往低位。每一次处理完一位处理下一位之前，如果这一位非零，将 <code>cnt</code> 数组中这一位数字的数量减一，因为之后处理的更低位中，高位是确定的，也就是说无法在使用高位的这个数字了。如 “1020” 处理完 [0, 1000) 后，之后所有区间的千位都是 “1”， “1” 无法再参与排列，所以直接 <code>--cnt[1]</code>。</li><li>处理某个非零位时，先枚举该位，将还剩下的数（还剩下 “x”，即 <code>cnt[x] &gt; 0</code>）中小于改位原数的依次填到该位，再用多重集排列算出剩下的位的排列数。（具体见代码）</li><li>遇到为零的位如 “1020” 中个位和百位，他们拆分出的区间没有数，直接跳过就好，不浪费程序运行时间。</li></ol><h2 id="二-代码"><a href="#二-代码" class="headerlink" title="二. 代码"></a>二. 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> C[MAXn + <span class="number">10</span>][MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaC</span><span class="params">(<span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>] = C[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">            C[i][j] = C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pmult</span><span class="params">(<span class="keyword">int</span> top, <span class="keyword">int</span> *cnt, <span class="keyword">int</span> sum = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (sum == <span class="number">-1</span>) &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">            sum += cnt[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt[i]) &#123;</span><br><span class="line">            ans *= C[sum][cnt[i]];</span><br><span class="line">            sum -= cnt[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[MAXn + <span class="number">10</span>]; <span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">int</span> sumcnt, cnt[<span class="number">11</span>], ans; <span class="comment">// cnt[x]: &quot;x&quot;数还可参与排列的数量，也就是&quot;x&quot;在当前位和比当前位低的位中的数量。</span></span><br><span class="line">                          <span class="comment">// cnt[10]: 在当前位和比当前位低的位中&quot;0&quot;的数量。</span></span><br><span class="line">                          <span class="comment">// sumcnt: Sum&#123;cnt[1] ~ cnt[9]&#125;，用于计算&quot;0&quot;的个数。</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">EvaC</span>(MAXn);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str + <span class="number">1</span>);</span><br><span class="line">    len = <span class="built_in">strlen</span>(str + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(str + <span class="number">1</span>, str + <span class="number">1</span> + len);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] - <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            ++cnt[str[i] - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">            ++sumcnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = len; i; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] - <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            cnt[<span class="number">10</span>] = i - <span class="number">1</span> - sumcnt;</span><br><span class="line">            ans += <span class="built_in">Pmult</span>(<span class="number">10</span>, cnt, i - <span class="number">1</span>);</span><br><span class="line">            cnt[<span class="number">10</span>] = i - <span class="number">1</span> - (sumcnt - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt; str[i] - <span class="string">&#x27;0&#x27;</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt[j]) &#123;</span><br><span class="line">                    --cnt[j];</span><br><span class="line">                    ans += <span class="built_in">Pmult</span>(<span class="number">10</span>, cnt, i - <span class="number">1</span>);</span><br><span class="line">                    ++cnt[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            --cnt[str[i] - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">            --sumcnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P3225 [HNOI2012]矿场搭建</title>
      <link href="/2021/08/18/%E7%9F%BF%E5%9C%BA%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/08/18/%E7%9F%BF%E5%9C%BA%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="一-思路"><a href="#一-思路" class="headerlink" title="一. 思路"></a>一. 思路</h2><h4 id="0-前置知识：割点，v-dcc（再说一遍，无向图有的是双连通分量，没有强连通分量一说！）。"><a href="#0-前置知识：割点，v-dcc（再说一遍，无向图有的是双连通分量，没有强连通分量一说！）。" class="headerlink" title="0. 前置知识：割点，v-dcc（再说一遍，无向图有的是双连通分量，没有强连通分量一说！）。"></a>0. 前置知识：割点，v-dcc（再说一遍，无向图有的是双连通分量，没有强连通分量一说！）。</h4><p>​    这里推荐几道模板题，学习 Tarjan 建议把他们都 A 了：</p><ol><li><p>dcc 割边：<a href="https://www.luogu.com.cn/problem/T103481">Luogu</a> <a href="https://rsdbkhusky.github.io/2021/07/21/割边/">Std</a>。</p></li><li><p>dcc 割点：<a href="https://www.luogu.com.cn/problem/P3388">Luogu</a> <a href="https://rsdbkhusky.github.io/2021/07/21/割点/">Std</a>。</p></li><li><p>e-dcc：<a href="https://www.luogu.com.cn/problem/T103489">Luogu</a> <a href="https://rsdbkhusky.github.io/2021/07/21/边双连通分量/">Std</a>。</p></li><li><p>v-dcc：<a href="https://www.luogu.com.cn/problem/T103492">Luogu</a> <a href="https://rsdbkhusky.github.io/2021/07/21/点双连通分量/">Std</a>。</p></li><li><p>scc：<a href="https://www.luogu.com.cn/problem/B3609">Luogu</a> <a href="https://rsdbkhusky.github.io/2021/07/21/强连通分量/">Std</a>。</p></li><li><p>scc 缩点：<a href="https://www.luogu.com.cn/problem/P3387">Luogu</a>。</p><p>（没有找到双连通分量的缩点模板，知道的小伙伴欢迎在评论中补充）</p></li></ol><p>　<a href="https://baike.baidu.com/item/算法竞赛进阶指南/57610153?fr=aladdin">蓝书</a>上这部分讲的很详细。</p><p>那么接下来我们以这个图为例讲解此题：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/08/18/%E7%9F%BF%E5%9C%BA%E6%90%AD%E5%BB%BA/1.png" alt=""></p><p>命名三个双连通分量为：A，B，C。红色的为割点。</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/08/18/%E7%9F%BF%E5%9C%BA%E6%90%AD%E5%BB%BA/2.png" alt=""></p><h4 id="1-一个包含一个割点的双连通分量（A，C）"><a href="#1-一个包含一个割点的双连通分量（A，C）" class="headerlink" title="1. 一个包含一个割点的双连通分量（A，C）"></a>1. 一个包含一个割点的双连通分量（A，C）</h4><ol><li><p>非割点坍塌：</p><p> 没有关系，比如 A 中 1 号点坍塌，3 号点中的人可以来到割点（2 号点），然后去往其他双连通分量中的出口逃生。</p></li><li><p>割点坍塌：</p><p>  比如 2 号塌了，1 号和 3 号中就必须有一个出口。</p></li></ol><p>综上，对于包含一个割点的双连通分量，需要建 $1$ 个出口，方案数为 $\operatorname{size} - 1$。（$\operatorname{size}$：该 dcc 大小）。</p><h4 id="2-一个包含两个及以上个割点的双连通分量（B）"><a href="#2-一个包含两个及以上个割点的双连通分量（B）" class="headerlink" title="2. 一个包含两个及以上个割点的双连通分量（B）"></a>2. 一个包含两个及以上个割点的双连通分量（B）</h4><ol><li><p>非割点坍塌：（同 1 - 1）</p></li><li><p>割点坍塌：</p><p>这次情况不同了，塌了一个割点，还有至少一个割点可以供里面的工人离开这个 dcc。</p></li></ol><p>综上，对于包含两个及以上个割点的双连通分量，根本无需建出口。</p><p>看到这里，很多人有 <strong>问题</strong> 了：如果全是包含两个及以上个割点的 dcc，所有人总想着往其他 dcc 跑，其他 dcc 却也没出口怎么办。那么恭喜你，这种情况根本不可能成立。比如有一圈像 B 一样的 dcc 拼在一起：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/08/18/%E7%9F%BF%E5%9C%BA%E6%90%AD%E5%BB%BA/3.png" alt=""></p><p>但再仔细看，一当形成环，割点就直接没有了，也就是说上图 4 个红色点都应该是白色的，这就是第三种情况（待会要讲）。</p><p>而如果环不合拢，两端必然存在包含一个割点的 dcc，也就自然能成功逃离：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/08/18/%E7%9F%BF%E5%9C%BA%E6%90%AD%E5%BB%BA/4.png" alt=""></p><h4 id="3-环"><a href="#3-环" class="headerlink" title="3. 环"></a>3. 环</h4><p>如果是一个环，看上去建一个出口就行了，但还要考虑出口坍塌的情况！所以需要建 $2$ 个出口。方案数为 $\operatorname{C}^2_{\operatorname{size}} = \dfrac{\operatorname{size} \times (\operatorname{size} - 1)}{2}$。</p><h4 id="4-最终结果"><a href="#4-最终结果" class="headerlink" title="4. 最终结果"></a>4. 最终结果</h4><ol><li>出口数：将所有 dcc 建的出口数相加。</li><li>方案数：将所有 dcc 的方案数相乘。（乘法原理）</li></ol><h2 id="二-代码"><a href="#二-代码" class="headerlink" title="二. 代码"></a>二. 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">5e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">3e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; a)</span> </span>&#123;</span><br><span class="line">    re <span class="keyword">char</span> c; <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>); <span class="function">re T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>; <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123; x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>; &#125;a = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXn + <span class="number">10</span>], cntnex, nex[MAXm * <span class="number">2</span> + <span class="number">10</span>], to[MAXm * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> top, stk[MAXn + <span class="number">10</span>], cntdcc;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; dcc[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> is[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> root, cntdfs, dfs[MAXn + <span class="number">10</span>], low[MAXn + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cntnex = top = root = cntdfs = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(head));</span><br><span class="line">    <span class="built_in">memset</span>(nex, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(nex));</span><br><span class="line">    <span class="built_in">memset</span>(to, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(to));</span><br><span class="line">    <span class="built_in">memset</span>(stk, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(stk));</span><br><span class="line">    <span class="built_in">memset</span>(is, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(is));</span><br><span class="line">    <span class="built_in">memset</span>(dfs, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dfs));</span><br><span class="line">    <span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(low));</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntdcc; ++i) &#123;</span><br><span class="line">        dcc[i].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cntdcc = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> times = <span class="number">0</span>;</span><br><span class="line">    dfs[cur] = low[cur] = ++cntdfs;</span><br><span class="line">    <span class="keyword">if</span> (!head[cur]) &#123;</span><br><span class="line">        ++cntdcc;</span><br><span class="line">        dcc[cntdcc].<span class="built_in">push_back</span>(cur);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    stk[++top] = cur;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfs[to[i]]) &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(to[i]);</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], low[to[i]]);</span><br><span class="line">            <span class="keyword">if</span> (dfs[cur] &lt;= low[to[i]]) &#123;</span><br><span class="line">                ++times;</span><br><span class="line">                <span class="keyword">if</span> (cur != root || times &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                    is[cur] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ++cntdcc;</span><br><span class="line">                <span class="keyword">int</span> instk;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    instk = stk[top--];</span><br><span class="line">                    dcc[cntdcc].<span class="built_in">push_back</span>(instk);</span><br><span class="line">                &#125; <span class="keyword">while</span> (instk != to[i]);</span><br><span class="line">                dcc[cntdcc].<span class="built_in">push_back</span>(cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], dfs[to[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;m)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++T;</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">Init</span>();</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">            n = <span class="built_in">max</span>(n, u); n = <span class="built_in">max</span>(n, v);</span><br><span class="line">            <span class="keyword">if</span> (u == v) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Insert</span>(u, v); <span class="built_in">Insert</span>(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dfs[i]) &#123;</span><br><span class="line">                root = i;</span><br><span class="line">                <span class="built_in">Tarjan</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 除核心以外的都是纯板子</span></span><br><span class="line"><span class="comment">// ---------------核心---------------</span></span><br><span class="line">        <span class="keyword">int</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntdcc; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (re vector&lt;<span class="keyword">int</span>&gt;::iterator j = dcc[i].<span class="built_in">begin</span>(); j != dcc[i].<span class="built_in">end</span>(); ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (is[*j]) &#123;</span><br><span class="line">                    ++cnt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt == <span class="number">1</span>) &#123;</span><br><span class="line">                ++ans1;</span><br><span class="line">                ans2 *= dcc[i].<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;</span><br><span class="line">                ans1 += <span class="number">2</span>;</span><br><span class="line">                ans2 *= dcc[i].<span class="built_in">size</span>() * (dcc[i].<span class="built_in">size</span>() - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// ---------------核心---------------</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %lld: %lld %lld\n&quot;</span>, T, ans1, ans2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu CF679A Bear and Prime 100</title>
      <link href="/2021/07/21/Bear%20and%20Prime%20100/"/>
      <url>/2021/07/21/Bear%20and%20Prime%20100/</url>
      
        <content type="html"><![CDATA[<h2 id="CF679A-Bear-and-Prime-100"><a href="#CF679A-Bear-and-Prime-100" class="headerlink" title="CF679A Bear and Prime 100"></a><a href="https://www.luogu.com.cn/problem/CF679A">CF679A Bear and Prime 100</a></h2><h2 id="一-审题："><a href="#一-审题：" class="headerlink" title="一. 审题："></a>一. 审题：</h2><h4 id="1-前提条件："><a href="#1-前提条件：" class="headerlink" title="1. 前提条件："></a>1. 前提条件：</h4><ul><li>无</li></ul><h4 id="2-询问-amp-输入："><a href="#2-询问-amp-输入：" class="headerlink" title="2. 询问 &amp; 输入："></a>2. 询问 &amp; 输入：</h4><ul><li><p>询问：（最多 $20$ 次）<br>  输出一个数 $x$，代表询问 $x$ 是否是被猜数的约数。</p></li><li><p>输入：<br>  读入一个字符 <code>yes</code> 或 <code>no</code> 代表这个数是否是被猜数的约数。</p></li></ul><h4 id="3-输出："><a href="#3-输出：" class="headerlink" title="3. 输出："></a>3. 输出：</h4><ul><li>该数是否是素数。</li></ul><h2 id="二-思路"><a href="#二-思路" class="headerlink" title="二. 思路"></a>二. 思路</h2><ul><li><p>我们知道质数的因数有且只有 $1$ 和自己，也就是 $1$ 和一个质数。所以第一感觉是把 $1-100$ 的质数问一遍。但很快发现询问次数不够。而且也用不着，因为，<strong>如果只问 1-50 内的质数：</strong></p><ol><li>如果有2个及以上的 $yes$ 回答，直接判断为合数。</li><li>如果有一个 $yes$ 回答，$51-100$ 不可能有因数，那样所猜数就超100了。</li><li>如果无 $yes$ 回答，$51-100$ 必有且只有一个因数，就是他本身呀。<br>所以问 $51-100$ 的质数是无意义的。</li></ol></li><li><p>问完质数还不够，例如 <strong>4</strong> 就判断不出来，因为本交互程序只判断有没有这个因数，不能说出该因数个数。所以还得判断质数的平方数（$100$ 以内的）</p></li></ul><h2 id="三-代码"><a href="#三-代码" class="headerlink" title="三. 代码"></a>三. 代码</h2><p>因为每个输出后都跟了<code>endl</code>，所以不需要加<code>fflush(stdout)</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> primes[<span class="number">20</span>] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, </span><br><span class="line">                  <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>&#125;;<span class="comment">//1-50内质数，共15个</span></span><br><span class="line"><span class="keyword">int</span> sq_nums[<span class="number">10</span>] = &#123;<span class="number">4</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">49</span>&#125;;<span class="comment">//质数的平方数(100以内的) </span></span><br><span class="line">string feedback;<span class="comment">//交互返回的字符串</span></span><br><span class="line"><span class="keyword">bool</span> once;<span class="comment">//是否已经返回过一次yes了</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; primes[i] &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; feedback;</span><br><span class="line">        <span class="keyword">if</span> (feedback == <span class="string">&quot;yes&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!once) &#123;</span><br><span class="line">                once = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;composite&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; sq_nums[i] &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; feedback;</span><br><span class="line">        <span class="keyword">if</span> (feedback == <span class="string">&quot;yes&quot;</span>) &#123;<span class="comment">//这些平方数本来就是合数，所以只要返回1次yes就可以判断了</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;composite&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;prime&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P4544 [USACO10NOV]Buying Feed G</title>
      <link href="/2021/07/21/Buying%20Feed%20G/"/>
      <url>/2021/07/21/Buying%20Feed%20G/</url>
      
        <content type="html"><![CDATA[<h2 id="P4544-USACO10NOV-Buying-Feed-G"><a href="#P4544-USACO10NOV-Buying-Feed-G" class="headerlink" title="P4544 USACO10NOV Buying Feed G"></a><a href="https://www.luogu.com.cn/problem/P4544">P4544 USACO10NOV Buying Feed G</a></h2><p>放在前面：本方法时间复杂度为 $O(nW)$ ，单调队列优化 DP。本题还有一道<a href="https://www.luogu.com.cn/problem/P2616">弱化版</a>，欢迎大佬切完这题顺便把那题也切了，并欢迎大家来该题题解看我的<a href="https://rsdbk-husky.blog.luogu.org/luogo-p2616-usaco10janbuying-feed-ii-s">另一篇博客</a>。 </p><h3 id="一-变量声明："><a href="#一-变量声明：" class="headerlink" title="一. 变量声明："></a>一. 变量声明：</h3><ul><li>$W$：代替题目中的 $K$，到家时应带的饲料吨数，相当于背包中的背包最大承重（weight）。</li><li>$n$：代替题目中的 $N$，商店数量，相当于背包问题中的物品数。</li><li>$x_i$：同题目中的 $x_i$。</li><li>$w_i$：代替题目中的 $f_i$，商店 $i$ 食物数量。</li><li>$v_i$：代替题目中的 $c_i$，商店 $i$ 食物单价。</li></ul><h2 id="二-思路"><a href="#二-思路" class="headerlink" title="二. 思路"></a>二. 思路</h2><h5 id="1-思考解法"><a href="#1-思考解法" class="headerlink" title="1. 思考解法"></a>1. 思考解法</h5><ul><li>路线上后面的商店不会影响路线前半部分的最优解，<strong>符合无后效性</strong>。</li><li>有最大容量 $W$，有可选择的物品，每个物品有重量和价值，明显是背包类问题。</li></ul><p>所以考虑背包 DP。</p><h5 id="2-初始状态"><a href="#2-初始状态" class="headerlink" title="2. 初始状态"></a>2. 初始状态</h5><p>$d_{i,j}=\begin{cases} 0&amp;(i=0~\land~j=0)\ \infty&amp;(else) \end{cases}$</p><h5 id="3-结束状态"><a href="#3-结束状态" class="headerlink" title="3. 结束状态"></a>3. 结束状态</h5><p>$d_{\operatorname{home},W}$        （$\operatorname{home}$：见代码和代码中的注释）</p><h5 id="4-确定状态转移方程"><a href="#4-确定状态转移方程" class="headerlink" title="4. 确定状态转移方程"></a>4. 确定状态转移方程</h5><p>$d_{i,j}$：已经经过前 $i$ 个商店（已到 $i$ 号商店买了东西但还没有往 $i+1$ 号走）且恰好一共买了 $j$ 份食物时最少花费的费用。</p><p>本题就是一道改装版的<a href="https://www.luogu.com.cn/problem/P1776">多重背包问题</a>，就加了一个转移花费，转移花费怎么求呢？$i$ 店与上一家店距离差为 $x<em>i-x</em>{i-1}$，若在 $i$ 号店之前买的食物份数一共为 $k$ ，在 $i$ 店购物后车上的食物份数为 $j$，则这段路上车辆运送的食物数为 $k$。转移花费就是 $(x<em>i-x</em>{i-1})\times k^2$。</p><p>综上所述，朴素状转方程：$d<em>{i,j}=\min</em>{k=0}^{k\leqslant j}\left{d<em>{i-1,k}+(x_i-x</em>{i-1})\times k^2+v_i\times (j-k)\right}$ </p><h4 id="5-单调队列优化（重点）"><a href="#5-单调队列优化（重点）" class="headerlink" title="5. 单调队列优化（重点）"></a>5. 单调队列优化（重点）</h4><p>枚举 $i$ 复杂度为 $O(n)$，枚举 $j$ 复杂度为 $O(W)$，枚举 $k$ 最坏情况下复杂度也是 $O(W)$。总复杂度 $O(nW^2)$ 显然会超。那么让我们观察一下状转方程：</p><script type="math/tex; mode=display">~~~~~~~~d_{i,j}=\min_{k=0}^{k\leqslant j}\left\{d_{i-1,k}+(x_i-x_{i-1})\times k^2+v_i\times (j-k)\right\}</script><script type="math/tex; mode=display">\Longrightarrow d_{i,j}=\min_{k=0}^{k\leqslant j}\left\{d_{i-1,k}+(x_i-x_{i-1})\times k^2-v_i\times k+v_i\times j\right\}</script><p><strong>重点一</strong> ：观察上面这个拆了个括号的方程，左边是我们要去求的状态，在该状态下，$i$ 和 $j$ 是已知的，因为该状态就是由 $i$ 和 $j$ 定义的，$i$ 和 $j$ 在一个具体的状态下为常量（或者换一种解释：$i$ 和 $j$ 是用 <code>for</code> 循环枚举出来的，所以我们当然知道他的值）。所以我们可以将 $v_i\times j$ 提出括号。可得：</p><script type="math/tex; mode=display">\Longrightarrow d_{i,j}=\min_{k=0}^{k\leqslant j}\left\{d_{i-1,k}+(x_i-x_{i-1})\times k^2-v_i\times k\right\}+v_i\times j</script><p><strong>重点二</strong>：这个方程中的变量只有 $k$，而又有 $k\leqslant j$，因为在 $i$ 店购物后的食物数不可能低于购物前。那么我们就可以使用<a href="https://www.luogu.com.cn/problem/P1886">单调队列</a>优化。单调队列中存放的就是 $\min$ 内的部分 $d<em>{i-1,k}+(x_i-x</em>{i-1})\times k^2-v<em>i\times k$ （在这里我们把它称作 $calc</em>{i,k}$），对于每一个 $i$ ，将 $j$ 从 $0$ 到 $W$ 枚举一遍，对于每个 $j$ 先将它作为 $k$ 计算 $calc<em>{i,k}$ 并放到单调队列中，再先计算状态 $d</em>{i.j}$。</p><h2 id="三-代码"><a href="#三-代码" class="headerlink" title="三. 代码"></a>三. 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXW = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">&#x27;0&#x27;</span>;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">min</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Shop</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Shop</span>(): <span class="built_in">x</span>(<span class="number">0</span>), <span class="built_in">w</span>(<span class="number">0</span>), <span class="built_in">v</span>(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">Shop</span>(<span class="keyword">int</span> x_, <span class="keyword">int</span> w_, <span class="keyword">int</span> v_): <span class="built_in">x</span>(x_), <span class="built_in">w</span>(w_), <span class="built_in">v</span>(v_) &#123;&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Shop &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;x &lt; a.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Shop shop[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> W, n, d[MAXn + <span class="number">10</span>][MAXW + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> head, tail, que[MAXW + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> d[i - <span class="number">1</span>][k] + (shop[i].x - shop[i - <span class="number">1</span>].x) * k * k - shop[i].v * k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> E;</span><br><span class="line">    <span class="built_in">read</span>(W), <span class="built_in">read</span>(E), <span class="built_in">read</span>(n);</span><br><span class="line">    shop[<span class="number">0</span>] = <span class="built_in">Shop</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);    <span class="comment">//本人将起点和终点（家）时当做食物数为 0 的商店，这样能避免特判，所以“home”就是n+1</span></span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, x, w, v; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(x), <span class="built_in">read</span>(w), <span class="built_in">read</span>(v);</span><br><span class="line">        shop[i] = <span class="built_in">Shop</span>(x, w, v);</span><br><span class="line">    &#125;</span><br><span class="line">    shop[n + <span class="number">1</span>] = <span class="built_in">Shop</span>(E, <span class="number">0</span>, <span class="number">0</span>);    <span class="comment">//同上</span></span><br><span class="line">    <span class="built_in">sort</span>(shop, shop + n + <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(d));</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i) &#123;    <span class="comment">//i：当前阶段是在哪个店 </span></span><br><span class="line">        head = <span class="number">1</span>; tail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= W; ++j) &#123;    <span class="comment">//j：当前状态要求在此处商店购买后车上有多少饲料</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">calc</span>(i, que[tail]) &gt; <span class="built_in">calc</span>(i, j) &amp;&amp; head &lt;= tail)</span><br><span class="line">                --tail;</span><br><span class="line">            <span class="keyword">if</span> (j - que[head] &gt; shop[i].w &amp;&amp; head &lt;= tail)</span><br><span class="line">                ++head;</span><br><span class="line">            que[++tail] = j;</span><br><span class="line">            d[i][j] = <span class="built_in">calc</span>(i, que[head]) + shop[i].v * j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, d[n + <span class="number">1</span>][W]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogo P2616 [USACO10JAN]Buying Feed, II S</title>
      <link href="/2021/07/21/Buying%20Feed,%20II%20S/"/>
      <url>/2021/07/21/Buying%20Feed,%20II%20S/</url>
      
        <content type="html"><![CDATA[<h2 id="P2616-USACO10-JANBuying-Feed-II-S"><a href="#P2616-USACO10-JANBuying-Feed-II-S" class="headerlink" title="P2616 USACO10 JANBuying Feed, II S"></a><a href="https://www.luogu.com.cn/problem/P2616">P2616 USACO10 JANBuying Feed, II S</a></h2><p>放在前面：为对应“普及-”的难度，本文讲解的是 $O(nW^2)$ 复杂度的朴素 DP，如想挑战更高难度请进 <a href="https://www.luogu.com.cn/problem/P4544">Here</a>，并欢迎大家来该题题解看我的<a href="https://rsdbk-husky.blog.luogu.org/luogu-p4544-usaco10novbuying-feed-g">另一篇博客</a>上的 $O(nW)$ 解法。 </p><h3 id="一-变量声明："><a href="#一-变量声明：" class="headerlink" title="一. 变量声明："></a>一. 变量声明：</h3><ul><li>$W$：代替题目中的 $K$，到家时应带的饲料吨数，相当于背包中的背包最大承重（weight）。</li><li>$n$：代替题目中的 $N$，商店数量，相当于背包问题中的物品数。</li><li>$x_i$：同题目中的 $x_i$。</li><li>$w_i$：代替题目中的 $f_i$，商店 $i$ 食物数量。</li><li>$v_i$：代替题目中的 $c_i$，商店 $i$ 食物单价。</li></ul><h2 id="二-思路"><a href="#二-思路" class="headerlink" title="二. 思路"></a>二. 思路</h2><h4 id="1-思考解法"><a href="#1-思考解法" class="headerlink" title="1. 思考解法"></a>1. 思考解法</h4><ul><li>路线上后面的商店不会影响路线前半部分的最优解，<strong>符合无后效性</strong>。</li><li>有最大容量 $W$，有可选择的物品，每个物品有重量和价值，明显是背包类问题。</li></ul><p>所以考虑背包 DP。</p><h4 id="2-初始状态"><a href="#2-初始状态" class="headerlink" title="2. 初始状态"></a>2. 初始状态</h4><p>$d_{i,j}=\begin{cases} 0&amp;(i=0~\land~j=0)\ \infty&amp;(else) \end{cases}$</p><h4 id="3-结束状态"><a href="#3-结束状态" class="headerlink" title="3. 结束状态"></a>3. 结束状态</h4><p>$d_{\operatorname{home},W}$        （$\operatorname{home}$：见代码和代码中的注释）</p><h4 id="4-确定状态转移方程"><a href="#4-确定状态转移方程" class="headerlink" title="4. 确定状态转移方程"></a>4. 确定状态转移方程</h4><p>$d_{i,j}$：已经经过前 $i$ 个商店（已到 $i$ 号商店买了东西但还没有往 $i+1$ 号走）且恰好一共买了 $j$ 份食物时最少花费的费用。</p><p>本题就是一道改装版的<a href="https://www.luogu.com.cn/problem/P1776">多重背包问题</a>，就加了一个转移花费，转移花费怎么求呢？$i$ 店与上一家店距离差为 $x<em>i-x</em>{i-1}$，若在 $i$ 号店买的食物份数为 $k$ ，在 $i$ 店购物后车上的食物份数为 $j$（$j$ 和 $k$ 这两个量都是 for 循环枚举出来的），则这段路上车辆运送的食物数为 $j-k$。转移花费就是 $(x<em>i-x</em>{i-1})\times (j-k)$。</p><p><strong>综上所述，状转方程</strong>：$d<em>{i,j}=\min</em>{k=0}^{k\leqslant w<em>i}\left{d</em>{i-1,j-k}+(x<em>i-x</em>{i-1})\times (j-k)+v_i\times k\right}$ </p><h2 id="三-代码"><a href="#三-代码" class="headerlink" title="三. 代码"></a>三. 代码</h2><p>代码中有一些例如构造函数和重载运算符一样的技巧，这些暂时不会也不妨碍理解算法，只需看 <code>main</code> 函数中的内容就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXW = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span>    <span class="comment">//模板函数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">&#x27;0&#x27;</span>;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Shop</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Shop</span>(): <span class="built_in">x</span>(<span class="number">0</span>), <span class="built_in">w</span>(<span class="number">0</span>), <span class="built_in">v</span>(<span class="number">0</span>)&#123;&#125;    <span class="comment">//构造函数 </span></span><br><span class="line">    <span class="built_in">Shop</span>(<span class="keyword">int</span> x_, <span class="keyword">int</span> w_, <span class="keyword">int</span> v_): <span class="built_in">x</span>(x_), <span class="built_in">w</span>(w_), <span class="built_in">v</span>(v_) &#123;&#125;    <span class="comment">//同上 </span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Shop &amp;a) &#123;    <span class="comment">//重载运算符 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;x &lt; a.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Shop shop[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> W, n, d[MAXn + <span class="number">10</span>][MAXW + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> E;</span><br><span class="line">    <span class="built_in">read</span>(W), <span class="built_in">read</span>(E), <span class="built_in">read</span>(n);</span><br><span class="line">    shop[<span class="number">0</span>] = <span class="built_in">Shop</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);    <span class="comment">//本人将起点和终点（家）时当做食物数为 0 的商店，这样能避免特判，所以“home”就是n+1</span></span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, x, w, v; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(x), <span class="built_in">read</span>(w), <span class="built_in">read</span>(v);</span><br><span class="line">        shop[i] = <span class="built_in">Shop</span>(x, w, v);</span><br><span class="line">    &#125;</span><br><span class="line">    shop[n + <span class="number">1</span>] = <span class="built_in">Shop</span>(E, <span class="number">0</span>, <span class="number">0</span>);    <span class="comment">//同上 </span></span><br><span class="line">    <span class="built_in">sort</span>(shop, shop + n + <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(d));</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; ++i) &#123;    <span class="comment">//i：当前阶段是在哪个店 </span></span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> j = W; j &gt;= <span class="number">0</span>; --j) &#123;    <span class="comment">//j：当前状态要求车上有多少饲料 </span></span><br><span class="line">            <span class="keyword">for</span> (re <span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= shop[i].w; ++k) &#123;    <span class="comment">//k：当前转移中要从本店买多少饲料 </span></span><br><span class="line">                <span class="keyword">if</span> (j &lt; k) <span class="keyword">continue</span>;</span><br><span class="line">                d[i][j] = <span class="built_in">min</span>(d[i][j], d[i - <span class="number">1</span>][j - k] + (shop[i].x - shop[i - <span class="number">1</span>].x) * (j - k) + k * shop[i].v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, d[n + <span class="number">1</span>][W]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题解 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu CF727C Guess the Array</title>
      <link href="/2021/07/21/Guess%20the%20Array/"/>
      <url>/2021/07/21/Guess%20the%20Array/</url>
      
        <content type="html"><![CDATA[<h2 id="CF727C-Guess-the-Array"><a href="#CF727C-Guess-the-Array" class="headerlink" title="CF727C Guess the Array"></a><a href="https://www.luogu.com.cn/problem/CF727C">CF727C Guess the Array</a></h2><p><strong>注：本文含交互题 endl 与 fflush 不同种类的配合使用效果的 测试（见 “四”）</strong></p><h2 id="一-审题："><a href="#一-审题：" class="headerlink" title="一. 审题："></a>一. 审题：</h2><h4 id="1-前提条件："><a href="#1-前提条件：" class="headerlink" title="1. 前提条件："></a>1. 前提条件：</h4><ul><li>一个数 $n$ 代表数组中数的个数。</li></ul><h4 id="2-询问-amp-输入："><a href="#2-询问-amp-输入：" class="headerlink" title="2. 询问 &amp; 输入："></a>2. 询问 &amp; 输入：</h4><ul><li><p>询问：</p><p>  输出两个数 $x$，$y$ 。代表询问 $a_x$ 和 $a_y$ 的和。</p><p>  格式：<code>? x y</code></p></li><li><p>输入：</p><p>  读入一个数代表这两个数的和。</p></li></ul><h4 id="3-输出："><a href="#3-输出：" class="headerlink" title="3. 输出："></a>3. 输出：</h4><ul><li>数组中所有数的值。格式：<code>! a[1] a[2] a[3] ... a[n]</code></li></ul><h2 id="二-思路"><a href="#二-思路" class="headerlink" title="二. 思路"></a>二. 思路</h2><h4 id="1-思考解法"><a href="#1-思考解法" class="headerlink" title="1. 思考解法"></a>1. 思考解法</h4><p>我们可以不一口气把 $n$ 次都询问完（当然最后肯定是都要询问完的），既然 $n$ 个数询问 $n$ 次一定有解，那么我们可以先询问 $a_1+a_2$ ， $a_2+a_3$ 以及 $a_3+a_1$ 。这样就能先计算出 $a_1$，$a_2$ 以及 $a_3$。</p><p>只要有了一个数的具体值，我们每询问一次就可以算出一个数的具体值，这样一气呵成，避免了一口气询问完后堆积过多条件无从下手的情况。</p><h4 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2. 具体实现"></a>2. 具体实现</h4><ol><li><p>前三个数：</p><p> 解法有很多，如</p><script type="math/tex; mode=display">\ \ \ \ \begin{cases}x+y=a\\y+z=b\\z+x=c\end{cases}</script><script type="math/tex; mode=display">\Longrightarrow 2x+2y+2z=a+b+c</script><script type="math/tex; mode=display">\Longrightarrow x+y+z=\dfrac{a+b+c}{2}</script><script type="math/tex; mode=display">\Longrightarrow x=\dfrac{a+b+c}{2}-b</script><p> $y$，$z$ 同理。 </p></li><li><p>剩下的数：</p><p> 接下来询问$a_1+a_4$，$a_1+a_5$ . . . $a_1+a_n$。</p></li></ol><h2 id="三-代码"><a href="#三-代码" class="headerlink" title="三. 代码"></a>三. 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> add12,add13,add23;<span class="comment">//addxy:第x个和第y个数的和</span></span><br><span class="line"><span class="keyword">int</span> add[MAXn + <span class="number">10</span>];<span class="comment">//add[x]:第1个和第x个数的和</span></span><br><span class="line"><span class="keyword">int</span> first;<span class="comment">//第一个数的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;? 1 2&quot;</span> &lt;&lt; endl;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;add12);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;? 2 3&quot;</span> &lt;&lt; endl;    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;add23);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;? 1 3&quot;</span> &lt;&lt; endl;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;add13);<span class="comment">//这里用了endl就不需要fflush(stdout)了</span></span><br><span class="line">    first = (add13 - add23 + add12) &gt;&gt; <span class="number">1</span>;<span class="comment">//读入前三个数间两两值得和，并计算第一个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span> ; i &lt;= n; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;? 1 &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;add[i]);</span><br><span class="line">    &#125;<span class="comment">//读入第1个数和第4-n个数间两两的值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;! &quot;</span> &lt;&lt; first;<span class="built_in">fflush</span>(stdout);</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; add12 - first;<span class="built_in">fflush</span>(stdout);</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; add23 - add12 + first;<span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; add[i] - first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-endl-与-fflush"><a href="#四-endl-与-fflush" class="headerlink" title="四. endl 与 fflush"></a>四. endl 与 fflush</h2><p>对交互题来说，弄清楚 <code>endl</code> 和 <code>fflush</code> 怎么用格外重要。不多废话了，直接摆上测试结果：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/07/21/Guess%20the%20Array/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt=""></p><p><strong>结论：</strong><code>endl</code> 后面 不用跟 <code>fflush</code>，但如果没有 <code>endl</code> （或是用 <code>printf</code>）要加上 <code>fflush(stdout)</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OI中的数论</title>
      <link href="/2021/07/21/OI%E4%B8%AD%E7%9A%84%E6%95%B0%E8%AE%BA/"/>
      <url>/2021/07/21/OI%E4%B8%AD%E7%9A%84%E6%95%B0%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="一-质数"><a href="#一-质数" class="headerlink" title="一. 质数"></a>一. 质数</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li><p>$\varphi(n)$：$1\sim n$ 中与 $n$ 互质的数的个数。</p></li><li><p>如果当 $a, b$ 互质时，有 $f(a\times b)=f(a)\times (b)$。那么称函数 $f$ 为积性函数。若 $f$ 是积性函数，且在算术基本定理中 $n=\prod<em>{i=1}^{m}p</em>{i}^{c<em>{i}}$，则显然 $f(n)=\prod</em>{i=1}^{m}f\left(p<em>{i}^{c</em>{i}}\right)$。</p></li></ul><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ul><li><p>$1\sim n$ 中质数的个数：<strong>约</strong> $\dfrac{n}{\ln n}$。</p></li><li><p>欧拉函数</p><ol><li><p>$\forall n&gt;1,1 \sim n$ 中与 $n$ 互质的数的和为 $\dfrac{n}{2}\times\varphi(n)$。</p><p> 证明：因为 $\gcd(n,x)=gcd(n,n-x)$，所以 $1\sim n$ 中与 $n$ 互质的数总是成对出现，平均值为 $\dfrac{n}{2}$，总和为 $\dfrac{n}{2}\times\varphi(n)$。</p></li><li><p>若 $a, b$ 互质, 则 $\varphi(a\times b)=\varphi(a)\times\varphi(b)$。</p><p> 证明：根据下文欧拉函数单点计算公式直接得出。</p></li><li><p>设 $p$ 为质数，若 $p \mid n$ 且 $p^{2} \mid n$，则 $\varphi(n)=\varphi(\dfrac{n}{p})\times p$.</p><p> 证明：由条件得 $n$ 与 $\dfrac{n}{p}$ 质因子种类相同，只是指数不同，将 $\varphi(n)$ 和 $\varphi(\dfrac{n}{p})$ 根据下文单点计算公式拆分发现他们的商为 $p$。</p></li><li><p>设 $p$ 为质数，若 $p \mid n$ 但 $p^{2} \nmid n$，则 $\varphi(n)=\varphi(\dfrac{n}{p})\times(p-1)$。</p><p> 证明：由条件得 $p$ 与 $\dfrac{n}{p}$ 互质，由性质 2 可得 $\varphi(n)=\varphi(\dfrac{n}{p})\times\varphi(p)=\varphi(\dfrac{n}{p})\times(p-1)$。</p></li><li><p>$\sum_{d\mid n}\varphi(d)=n$。</p><p> 证明：设 $n,m$ 互质，$n=p_1^{c_1}p_2^{c_2}\cdots$，$m=p_1’^{~c_1’}p_2’^{~c_2’}\cdots$。</p><script type="math/tex; mode=display"> \begin{gather} \sum_{d\mid nm}\varphi(d)=\sum\limits_{i=0}^{c_1}\sum\limits_{j=0}^{c_2}\cdots\sum\limits_{k=0}^{c_1'}\sum\limits_{l=0}^{c_2'}\cdots\varphi(p_1^ip_2^j\cdots p_1'^{~k}p_2'^{~l}\cdots)\\ =\sum\limits_{i=0}^{c_1}\sum\limits_{j=0}^{c_2}\cdots\varphi(p_1^ip_2^j\cdots)\sum\limits_{k=0}^{c_1'}\sum\limits_{l=0}^{c_2'}\cdots\varphi(p_1'^{~k}p_2'^{~l}\cdots)\\ =\sum_{f\mid n}\varphi(f)\sum_{g\mid m}\varphi(g)\\ \end{gather}</script><p> 所以 $\sum_{d\mid n}\varphi(d)$ 是积性函数。</p><p> 设 $n$ 的质因子种类共 $k$ 种。</p><script type="math/tex; mode=display"> \begin{gather} \sum_{d\mid n}\varphi(d)=\prod_{i=1}^{i\le k}\sum_{f\mid p_i^{c_i}}\varphi(f)\\ =\prod_{i=1}^{i\le k}\sum_{j=0}^{j\le c_i}\varphi(p_i^j)\\ \text{由等比数列求和公式可得}\sum_{j=0}^{j\le c_i}\varphi(p_i^j)=p_i^{c_i}\\ =\prod_{i=1}^{i\le k}p_i^{c_i}\\ =n\\ \end{gather}</script></li></ol></li></ul><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><ul><li><p>单点计算公式：$\varphi(n)=n \times \dfrac{p<em>{1}-1}{p</em>{1}} \times \dfrac{p<em>{2}-1}{p</em>{2}} \times \cdots \times \dfrac{p<em>{m}-1}{p</em>{m}}=n \times \prod_{\text{质数} p \mid n}\left(1-\dfrac{1}{p}\right)$。 </p><p>  感性理解：对于 $n$ 的每个质因子 $p$ 来说，$1\sim n$ 中有这个质因子的数在所有数中的比例为 $\dfrac{1}{p}$，这部分肯定无法与 $n$ 互质，剩下 $\dfrac{p-1}{p}$ 可能与 $n$ 互质，这是考虑一个质因子的情况。考虑所有质因子的情况就是 $\prod_{\text{质数}p\mid n}\left(1-\dfrac{1}{p}\right)$，再乘上 $1\sim n$ 中整数个数。</p></li><li><p>递推式：$\varphi(p\times i)=\varphi(i)\times\begin{cases}p&amp;(p\mid i)\p-1&amp;(p\nmid i)\end{cases}$。</p><p>  由性质 3、4 可得。</p></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ul><li><p>单点质数筛</p><ul><li>试除法</li></ul></li><li><p>区间质数筛</p><ul><li><p>埃氏筛</p></li><li><p>线性筛</p></li></ul></li><li><p>自由区间质数筛</p><ul><li>双筛法（筛小素数再筛区间素数）</li></ul></li><li><p>单点质因数分解</p><ul><li>试除法</li></ul></li><li><p>单点欧拉函数——质因数分解（求值公式）</p></li><li><p>区间欧拉函数——线性法（积性性质）</p></li><li><p>自由区间欧拉函数——双筛法（求值公式）</p></li></ul><h3 id="二-约数"><a href="#二-约数" class="headerlink" title="二. 约数"></a>二. 约数</h3><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><ul><li><p>$n$ 的约数个数<strong>上界</strong>：$2\sqrt{n}$。</p><p>  试除法的推论。</p></li><li><p>$1\sim n$ 每个数约数个数的总和：<strong>约</strong> $n\log n$。</p><p>  倍数法的推论：</p><p>  估算每个数的约数和比较难，可以反过来考虑每个数的贡献，即每个数会作为多少个数（$1\sim n$ 内）的约数。</p><p>  $1\sim n$ 的贡献分别是 $\dfrac{n}{1},\dfrac{n}{2},\dfrac{n}{3}\cdots\dfrac{n}{n}$，可发现个数约是 $n\log n$。</p></li><li><p>$0\sim 2\times 10^9$ 中约数个数最多的数的约数个数是 $1600$。</p></li></ul><h4 id="公式-1"><a href="#公式-1" class="headerlink" title="公式"></a>公式</h4><ul><li><p>正约数个数：$\left(c<em>{1}+1\right) \times\left(c</em>{2}+1\right) \times \cdots \times\left(c<em>{m}+1\right)=\prod</em>{i=1}^{m}\left(c_{i}+1\right)$。</p></li><li><p>正约数和：$\left(1+p<em>{1}+p</em>{1}^{2}+\cdots+p<em>{1}^{c</em>{1}}\right) \times\cdots \times\left(1+p<em>{m}+p</em>{m}^{2}+\cdots+p<em>{m}^{c</em>{m}}\right)=\prod<em>{i=1}^{m}\left(\sum</em>{j=0}^{c<em>{i}}\left(p</em>{i}\right)^{j}\right)$。</p><p>  证明：使用组合数证明即可。</p></li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><ul><li><p>$gcd~lcm$</p></li><li><p>单点约数筛</p><ul><li>试除法</li></ul></li><li><p>区间约数筛</p><ul><li>倍数法（埃氏）</li></ul></li></ul><h3 id="三-余数"><a href="#三-余数" class="headerlink" title="三. 余数"></a>三. 余数</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul><li><p>对于 $\forall a \in[0, m-1]$，合 ${a+k m}(k \in \mathbb{Z})$ 的所有数模 $m$ 同余，余数都是 $a_{0}$ 该集合称为一个模 $m$ 的<strong>同余类</strong>，简记为 $\bar{a}$ 。</p></li><li><p>模 $m$ 的同余类一共有 $m$ 个，分别为 $\overline{0}, \overline{1}, \overline{2}, \cdots, \overline{m-1}$ 。它们构成 $m$ 的<strong>完全剩余系</strong>。</p></li><li><p>$1 \sim m$ 中与 $m$ 互质的数代表的同余类共有 $\varphi(m)$ 个，它们构成 $m$ 的<strong>简化剩余系</strong>。 例如, 模 10 的简化剩余系为 ${\overline{1}, \overline{3}, \overline{7}, \overline{9}}$ 。</p><p>  乘法封闭：集合中的任意两个元素进行乘法运算，得到的结果还在这个集合中。</p><p>  简化剩余系的性质：$m$ 的简化剩余系关于 $m$ 乘法封闭。</p><p>  证明：设 $m$ 的简化剩余系中两数为 $a,b$，则 $a\times b$ 也与 $m$ 互质，根据余数的性质， $a\times b\bmod m$ 也与 $m$ 互质。</p></li><li><p>若整数 $b, m$ 互质，并且 $b \mid a$，则存在一个整数 $x$，使得 $a / b \equiv a \times x(\bmod m)$ 。称 $x$ 为 $b$ 的模 $m$ <strong>乘法逆元</strong>，记为 $b^{-1}(\bmod m)$。因为 $a / b \equiv a \times b^{-1} \equiv a / b \times b \times b^{-1}(\bmod m)$，所以 $b \times b^{-1} \equiv 1(\bmod m)$。</p></li></ul><h4 id="定理-公式"><a href="#定理-公式" class="headerlink" title="定理 / 公式"></a>定理 / 公式</h4><ul><li><p>欧拉定理：若正整数 $x, n$ 互质，则 $x^{\varphi(n)} \equiv 1(\bmod n)$，其中 $\varphi(n)$ 为欧拉函数。</p><p>  证明：设集合 $S$ 为 $n$ 的简化剩余系，记作 ${\overline{a}<em>1,\overline{a}_2\cdots\overline{a}</em>{\varphi(n)}}$，$T$ 为 $n$ 的简化剩余系中所有数乘上 $x$ 构成的集合，记作 ${\overline{x\times a}<em>1,\overline{x\times a}_2\cdots \overline{x\times a}</em>{\varphi(n)}}$。</p><ol><li><p>证明所有 $T$ 中元素都在 $S$ 中：</p><p> 因为 $x,n$ 互质，所以 $\gcd(x,n)=1$，所以 $\gcd(x\bmod n, n)=1$。又因为简化剩余系具有乘法封闭的性质，所以 $x\times a_i\in S$</p></li><li><p>证明所有 $T$ 中元素在模意义下不重复：</p><p> 反证法。若 $a_i$ 和 $a_j$ 是 $S$ 中两个不同元素，且 $x\times a_i\equiv x\times a_j(\bmod n)$，则 $x\times(a_i-a_j)\equiv0(\bmod n)$。又因为 $x\not\equiv 0(\bmod n)$，所以 $a_i-a_j\equiv 0(\bmod n)$，$a_i\equiv a_j(\bmod n)$。矛盾。</p></li><li><p>证明 $S=T$：</p><p> 因为 1 和 2，又因为 $S$、$T$ 中元素数量相等，所以 $S=T$。</p></li><li><p>证明定理：</p><script type="math/tex; mode=display"> \begin{gather} \because x^{\varphi(n)}a_1a_2\cdots a_{\varphi(n)}\equiv (xa_1)(xa_2)\cdots(xa_{\varphi(n)})\equiv a_1a_2\cdots a_{\varphi(n)}(\bmod n)\\ \therefore a^{\varphi(n)}\equiv 1(\bmod n)\\ \end{gather}</script></li></ol></li><li><p>费马小定理：若 $p$ 是质数，则对于任意整数 $a$，有 $a^{p} \equiv a(\bmod p)$。</p><p>  欧拉定理中 $n$ 为质数，两边同乘 $a$ 的情况。</p></li><li><p>欧拉定理推论1：若正整数 $a, n$ 互质，则对于任意正整数 $b$，有 $a^{b} \equiv a^{b \bmod \varphi(n)}(\bmod n)$。</p><p>  证明：设 $b=k\times \varphi(n)+r$。</p><script type="math/tex; mode=display">  \begin{gather}  \because a^b\equiv a^b(\bmod n),a^{\varphi(n)}\equiv 1(\bmod n)\\  \therefore a^b\times (1^{-1})^k\equiv a^b\times ((a^{\varphi(n)})^{-1})^k(\bmod n)\\  a^b\equiv a^{b \bmod \varphi(n)}(\bmod n)\\  \end{gather}</script></li><li><p>欧拉定理推论2：当 $a, n$ 不一定互质且 $b&gt;\varphi(n)$ 时, 有 $a^{b} \equiv a^{b \bmod \varphi(n)+\varphi(n)}(\bmod n)$。</p><p>  证明：略。</p></li><li><p>裴蜀定理：对于任意整数 $a, b$，存在一对整数 $x, y$，满足 $a x+b y=\operatorname{gcd}(a, b)$。</p><p>  证明：</p><ol><li><p>$b=0$ 时，有 $\begin{cases}x=0\y=1\end{cases}$ 满足。</p></li><li><p>$b&gt;0$ 时。设 $b\times x’+(a\bmod b)\times y’=\gcd(b,a\bmod b)$。</p><script type="math/tex; mode=display"> b\times x'+(a-\left\lfloor \dfrac{a}{b}\right\rfloor\times b)\times y'=gcd(a,b)\\ a\times y'+b\times(x'-\left\lfloor\dfrac{a}{b}\right\rfloor\times y')=gcd(a,b)</script><p> 所以，有 $\begin{cases}x=y’\y=x’-\left\lfloor\dfrac{a}{b}\right\rfloor\times y’\end{cases}$ 满足。</p></li></ol></li><li><p>方程 $a x+b y=c$ 的通解：$x=\frac{c}{d} x<em>{0}+k \frac{b}{d},\quad y=\frac{c}{d} y</em>{0}-k \frac{a}{d}(k \in \mathbb{Z})$。</p></li></ul><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><ul><li><p>$exgcd$</p></li><li><p>求逆元</p><ul><li><p>单点——$exgcd$、费马小定理</p></li><li><p>区间——线性求逆元</p></li><li><p>任意 $n$ 数——前缀积</p></li></ul></li><li><p>$crt$ </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P1654 OSU!</title>
      <link href="/2021/07/21/OSU!/"/>
      <url>/2021/07/21/OSU!/</url>
      
        <content type="html"><![CDATA[<h2 id="P1654-OSU"><a href="#P1654-OSU" class="headerlink" title="P1654 OSU!"></a><a href="https://www.luogu.com.cn/problem/P1654">P1654 OSU!</a></h2><p><del>放在前面：这是一道期望dp大水题，属于那种看题解一看就会，自己写一写就废的那种。</del></p><h2 id="一-思路"><a href="#一-思路" class="headerlink" title="一. 思路"></a>一. 思路</h2><p><del>（不想看我前面唠叨就直接看代码吧）</del></p><h4 id="1-确定状态转移方程"><a href="#1-确定状态转移方程" class="headerlink" title="1. 确定状态转移方程"></a>1. 确定状态转移方程</h4><p>$d_i$：$i$ 次操作后得的分数。则 $E(d_i)$：$i$ 次操作后期望的的分数。</p><p>第 $i$ 轮后，得分发生了怎样的变化了呢？我们先只看从最近一次失败后算起的成功的一段，$i$ 轮前得分是 $x^3$，如果低 $i$ 次成功，$i$ 轮后是 $(x+1)^3=x^3+3x^2+3x+1$，反之是 $0$。变化了 $3x^2+3x+1$。再加上之前的得分 $d_{i-1}$。</p><p>综上所述，已知成败情况的状转方程：</p><p>$x<em>i=\begin{cases}0&amp;(fail)\x</em>{i-1}+1&amp;(success)\end{cases}$</p><p>${x^2}<em>i=\begin{cases}0&amp;(fail)\{x^2}</em>{i-1}+2x_{i-1}+1&amp;(success)\end{cases}$</p><p>$d<em>i=d</em>{i-1}+\begin{cases}0&amp;(fail)\3{x^2}<em>{i-1}+3x</em>{i-1}+1&amp;(success)\end{cases}$</p><p>设第 $i$ 次成功的几率为 $prob_i$。</p><p><strong>综上所述，期望状转方程</strong>：</p><script type="math/tex; mode=display">\begin{aligned}E(x)_i&=prob_i\times (E(x)_{i-1}+1)+(1-prob_i)\times 0 \\&=prob_i\times (E(x)_{i-1}+1) \\E({x^2})_i&=prob_i\times(E({x^2})_{i-1}+2E(x)_{i-1}+1)+(1-prob_i)\times 0 \\&=prob_i\times(E({x^2})_{i-1}+2E(x)_{i-1}+1) \\E(d)_i&=E(d)_{i-1}+prob_i\times(3E({x^2})_{i-1}+3E(x)_{i-1}+1)+(1-prob_i)\times 0 \\&=E(d)_{i-1}+prob_i\times(3E({x^2})_{i-1}+3E(x)_{i-1}+1) \\\end{aligned}</script><h4 id="2-坑点"><a href="#2-坑点" class="headerlink" title="2. 坑点"></a>2. 坑点</h4><ul><li><p>$E(a^2)\ne E(a)^2$</p><p>也就是说，不能将状转方程中的 $E(x^2)$ 用 $E(x)$ 表示。</p></li><li><p>$d\ne x^3$</p><p>$d$ 比 $x^3$ 还额外需要考虑之前的累计得分，也就是 $d<em>i$ 要加上 $d</em>{i-1}$。</p></li><li><p>$E(d)$、$E(x^2)$ 和 $E(x)$ 更新的顺序</p><p>如果你不开数组，就要格外注意这一点。$d$ 的期望状转方程中用到 $E(d)$、 $E(x^2)$ 和 $E(x)$；$x^2$ 的用到 $E(x^2)$ 和 $E(x)$；$x$ 的只用到自己，并且用的都是上一阶段的。所以先刷新 $E(d)$，再刷新 $E(x^2)$，最后 $E(x)$。</p></li></ul><h2 id="二-代码"><a href="#二-代码" class="headerlink" title="二. 代码"></a>二. 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n; <span class="keyword">double</span> prob, d, x2, x;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;prob);</span><br><span class="line">        d = d + prob * (<span class="number">3</span> * x2 + <span class="number">3</span> * x + <span class="number">1</span>);</span><br><span class="line">        x2 = prob * (x2 + <span class="number">2</span> * x + <span class="number">1</span>);</span><br><span class="line">        x = prob * (x + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.1lf&quot;</span>, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题解 </tag>
            
            <tag> DP </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P2432 zxbsmk爱查错</title>
      <link href="/2021/07/21/zxbsmk%E7%88%B1%E6%9F%A5%E9%94%99/"/>
      <url>/2021/07/21/zxbsmk%E7%88%B1%E6%9F%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h2 id="P2432-zxbsmk爱查错"><a href="#P2432-zxbsmk爱查错" class="headerlink" title="P2432 zxbsmk爱查错"></a><a href="https://www.luogu.com.cn/problem/P2432">P2432 zxbsmk爱查错</a></h2><h2 id="一-审题："><a href="#一-审题：" class="headerlink" title="一. 审题："></a>一. 审题：</h2><h4 id="1-已知-amp-输入："><a href="#1-已知-amp-输入：" class="headerlink" title="1.已知&amp;输入："></a>1.已知&amp;输入：</h4><ul><li>给出一个长度为 $L$ 的文本串。</li><li>给出 $W$ 个单词串。</li></ul><h4 id="2-目标-amp-输出："><a href="#2-目标-amp-输出：" class="headerlink" title="2.目标&amp;输出："></a>2.目标&amp;输出：</h4><ul><li>在文本串中删除尽量少的字母使得文本串只有由词串构成，输出这个最少删除的字母数。</li></ul><h2 id="二-思路"><a href="#二-思路" class="headerlink" title="二. 思路"></a>二. 思路</h2><h4 id="1-思考解法"><a href="#1-思考解法" class="headerlink" title="1. 思考解法"></a>1. 思考解法</h4><ul><li>文本串后面的内容不会影响文本串前半部分的最优解，<strong>符合无后效性</strong>。</li><li>若把文本串右端位置作为状态，文本串右端位置较靠右的状态需要通过文本串右端位置较靠左的状态得到（如 $d<em>i$ 需要通过 $d_0 \dots d</em>{i-1}$ 的其中之一得到），<strong>符合子问题重叠性</strong>。</li></ul><p>所以考虑DP。</p><h4 id="2-确定状态转移方程"><a href="#2-确定状态转移方程" class="headerlink" title="2. 确定状态转移方程"></a>2. 确定状态转移方程</h4><p>$d_i$：前 $i$ 个子母的文本串中最少删除的字母数。</p><p>$txtidx$：用该第 $j$ 个单词串匹配前 $i$ 个子母的文本串，匹配完时文本串的下标。（<strong>3.</strong> 中有详解）</p><p>$delcnt$：用该第 $j$ 个单词串匹配前 $i$ 个子母的文本串，匹配过程中失配的次数。（<strong>3.</strong> 中有详解）</p><p>$seccessmatch$：用该第 $j$ 个单词串匹配前 $i$ 个子母的文本串，是否匹配成功。（<strong>3.</strong> 中有详解）</p><p><strong>综上所述，状转方程</strong>：$d<em>i=\min</em>{j=1}^{W}\begin{cases}d<em>{i-1}+1&amp;(seccessmatch=false)\d</em>{txtidx}+delcnt&amp;(seccessmatch=true)\end{cases}$</p><h4 id="3-细节-amp-详解"><a href="#3-细节-amp-详解" class="headerlink" title="3.细节&amp;详解"></a>3.细节&amp;详解</h4><p><del>反正跟字符串有关题的题解，没图我是看不懂。</del></p><p>比如文本串是 <strong>cabbcxyz</strong> ，我们现在正在求 $d_5$ （$i=5$） 用其中一个单词串 <strong>abc</strong> 匹配，用某个单词匹配时不用管其他单词。</p><p>初始时把 $txtidx$ 设为 $i$ （也就是 $5$），$wordidx$ 设为单词长度， $delcnt$ 设为 $0$ 。（注意 $delnum$ 不是整个文本串删去的字母个数，而是当前情况下匹配过部分的文本串的删去字母个数。<strong>3.</strong> 中有详解）</p><p>初始时：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/07/21/zxbsmk%E7%88%B1%E6%9F%A5%E9%94%99/0.png" alt=""></p><p>第一次匹配后：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/07/21/zxbsmk%E7%88%B1%E6%9F%A5%E9%94%99/1.png" alt=""></p><p>第二次匹配后：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/07/21/zxbsmk%E7%88%B1%E6%9F%A5%E9%94%99/2.png" alt=""></p><p>第三次匹配后：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/07/21/zxbsmk%E7%88%B1%E6%9F%A5%E9%94%99/3.png" alt=""></p><p>第四次匹配后：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/07/21/zxbsmk%E7%88%B1%E6%9F%A5%E9%94%99/4.png" alt=""></p><h2 id="三-代码"><a href="#三-代码" class="headerlink" title="三. 代码"></a>三. 代码</h2><p>代码中有比较详细的注释。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXwordcnt = <span class="number">600</span>;<span class="comment">//单词数量最大值 </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXwordlen = <span class="number">25</span>;<span class="comment">//单词长度最大值 </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXtxtlen = <span class="number">300</span>;<span class="comment">//文本长度最大值 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> wordcnt<span class="comment">/*单词数量*/</span>, txtlen<span class="comment">/*文本长度*/</span>;</span><br><span class="line"><span class="keyword">char</span> word[MAXwordcnt + <span class="number">10</span>][MAXwordlen + <span class="number">10</span>]<span class="comment">/*单词*/</span>, txt[MAXtxtlen + <span class="number">10</span>]<span class="comment">/*文本*/</span>;</span><br><span class="line"><span class="keyword">int</span> d[MAXtxtlen];<span class="comment">//DP数组 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;wordcnt, &amp;txtlen);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, txt + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= wordcnt; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, word[i] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= txtlen; ++i) &#123;</span><br><span class="line">        d[i] = d[i - <span class="number">1</span>] + <span class="number">1</span>;<span class="comment">//如果没有单次得以再次位置匹配，需要删除的单词数++ </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= wordcnt; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> wordidx = <span class="built_in">strlen</span>(word[j] + <span class="number">1</span>);<span class="comment">//此时单词串的下标</span></span><br><span class="line">            <span class="keyword">int</span> txtidx;<span class="comment">//此时文本串的下标</span></span><br><span class="line">            <span class="keyword">int</span> delcnt = <span class="number">0</span>;<span class="comment">//当前情况下匹配过部分的文本串的删去字母个数</span></span><br><span class="line">            <span class="keyword">bool</span> seccessmatch = <span class="number">0</span>;<span class="comment">//是否匹配成功</span></span><br><span class="line">            <span class="keyword">for</span> (txtidx = i; txtidx &gt;= <span class="number">1</span>; --txtidx) &#123;</span><br><span class="line">                <span class="keyword">if</span> (wordidx == <span class="number">0</span>) &#123;<span class="comment">//wordidx == 0代表单词已经匹配完了 </span></span><br><span class="line">                    seccessmatch = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (txt[txtidx] == word[j][wordidx]) &#123;<span class="comment">//如果单词串与文本串在该位置相同... </span></span><br><span class="line">                    --wordidx;  <span class="comment">//那么匹配下一位 </span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;  <span class="comment">//否则...</span></span><br><span class="line">                    ++delcnt;  <span class="comment">//需要删的个数++ </span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (wordidx == <span class="number">0</span>) &#123;<span class="comment">//wordidx == 0代表单词已经匹配完了 </span></span><br><span class="line">                seccessmatch = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (seccessmatch) &#123; <span class="comment">//如果成功匹配... </span></span><br><span class="line">                d[i] = <span class="built_in">min</span>(d[i], d[txtidx] + delcnt);<span class="comment">//转移状态</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, d[txtlen]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题解 </tag>
            
            <tag> DP </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对拍</title>
      <link href="/2021/07/21/%E5%AF%B9%E6%8B%8D/"/>
      <url>/2021/07/21/%E5%AF%B9%E6%8B%8D/</url>
      
        <content type="html"><![CDATA[<p>在 <strong>OI 赛制</strong> 中，代码只能交一次，这是比赛与 OJ 最大的不同。我们如果不能保证代码是正确的，就需要对拍：</p><ol><li><p><strong>code1/2.cpp</strong>：暴力及正解代码。</p></li><li><p><strong>random.cpp</strong>：随机数据生成器。</p></li><li><p><strong>match.cpp</strong>：对拍程序：</p></li></ol><h4 id="一-对拍程序"><a href="#一-对拍程序" class="headerlink" title="一. 对拍程序"></a>一. 对拍程序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> T = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;./random &gt; in.txt&quot;</span>);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;./1 &lt; in.txt &gt; 1.txt&quot;</span>);</span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;./2 &lt; in.txt &gt; 2.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">system</span>(<span class="string">&quot;diff -b 1.txt 2.txt&quot;</span>)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Error!!!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Ok\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意头文件。</p><h4 id="二-随机数程序"><a href="#二-随机数程序" class="headerlink" title="二. 随机数程序"></a>二. 随机数程序</h4><p>主推 <strong>mt19937</strong> （需要 <strong>c++11</strong>）。随机数范围到 $2^{19937}-1$。完全不用担心不够用，具体实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">mt19937 <span class="title">rd</span><span class="params">(time(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">random</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">rd</span>() % (r - l + <span class="number">1</span>) + l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三-图像示例"><a href="#三-图像示例" class="headerlink" title="三. 图像示例"></a>三. 图像示例</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/07/21/%E5%AF%B9%E6%8B%8D/%E5%AF%B9%E6%8B%8D%E6%89%80%E9%9C%80%E6%96%87%E4%BB%B6.png" alt=""></p><div class="video"><video controls preload><source src='http://1306986731.vod2.myqcloud.com/3df88316vodtranscq1306986731/03425e4e3701925923175092978/v.f100800.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA 1025 城市里的间谍 A Spy in the Metro</title>
      <link href="/2021/07/21/%E5%9F%8E%E5%B8%82%E9%87%8C%E7%9A%84%E9%97%B4%E8%B0%8D/"/>
      <url>/2021/07/21/%E5%9F%8E%E5%B8%82%E9%87%8C%E7%9A%84%E9%97%B4%E8%B0%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="UVA1025-城市里的间谍-A-Spy-in-the-Metro"><a href="#UVA1025-城市里的间谍-A-Spy-in-the-Metro" class="headerlink" title="UVA1025 城市里的间谍 A Spy in the Metro"></a><a href="https://www.luogu.com.cn/problem/UVA1025">UVA1025 城市里的间谍 A Spy in the Metro</a></h2><p>（本题有多倍经验哦）</p><h2 id="一-思路"><a href="#一-思路" class="headerlink" title="一. 思路"></a>一. 思路</h2><h4 id="1-思考解法"><a href="#1-思考解法" class="headerlink" title="1. 思考解法"></a>1. 思考解法</h4><ul><li><p><strong>时间</strong> 是个好的 DP 阶段，时间轴上靠后发生的不会影响前面的事，反映到本题上就是 Maria 之后怎么走不会影响现在的最优解，<strong>符合无后效性</strong>。</p></li><li><p>Maria 既可以乘向东的地铁，又可以乘向西的地铁，还可以呆着不动。那么一种情况可以由多种情况而来，多种情况也可以发展成一种情况，各种情况互相交织，<strong>符合子问题重叠性</strong>。</p></li></ul><p>所以考虑 DP。</p><h4 id="2-前缀和初始化"><a href="#2-前缀和初始化" class="headerlink" title="2. 前缀和初始化"></a>2. 前缀和初始化</h4><p>   题目给出了站的时间间距和每列地铁发车时的时间（只会从首末两站发车），事实上，地铁在前进中到达每站的时间就是个前缀和 <del>（偷偷点开标签我们也可以看到前缀和）</del>，到达某站的时间就是前面所有站时间间距之和，当然还要加上发车时间。</p><h4 id="3-DP"><a href="#3-DP" class="headerlink" title="3. DP"></a>3. DP</h4><p>我采用的是 <strong>刷表法</strong>，当然，<strong>填表法</strong> 也可以。</p><ol><li><p>所需条件：</p><ul><li><p>$stabet_i$：站 $i-1$ 与站 $i$ 间相隔的时间。</p></li><li><p>$canright<em>{i,j}(canleft</em>{i,j})$：$i$ 时刻 $j$ 站是否有开向末站（首站）的火车。</p></li><li><p>$d_{i,j}$：得到 $i$ 时刻在 $j$ 站这种状态最少的停留时间。</p><p>通过前缀和我们已经得到 $canright$ 以及$canleft$ 数组。接下来就是状态转移了。</p></li></ul></li><li><p>初始状态：</p><p> 易得，应初始化为： $d_{i,j}=\begin{cases}0&amp;(i=0~\land~j=1)\\infty&amp;(else)\end{cases}$</p><p> 其中 $\infty$ 代表无法到达。</p></li><li><p>状态转移：</p><p> 因为本题的阶段之间不像普通的0/1背包那样只会由上一阶段转移到，而是也会由很多个单位时间之前的阶段转移到（站与站之间的时间不止1），所以我选择多维数组而非滚动数组。</p><p> 首先，无论此刻此站有没有地铁，都可以在本站等待，这是普遍的转移；另外，如果此刻此站恰好有地铁，可以做特殊的转移。</p><p> <strong>综上所述，状转方程</strong>：（因为是刷表法，状转方程不方便写在一个括号里，蒟蒻就这么写了 qwq）</p><p> （$\operatorname{self}$ 代表自己）</p><script type="math/tex; mode=display"> \begin{aligned} &d_{i,j}=\min(\operatorname{self},~d_{i-1,j}+1)&(i>0) \\ &d_{i+stabet_{j+1},j+1}=\min(\operatorname{self},~d_{i,j})&(canright_{i,j}=true) \\ &d_{i+stabet_j,j-1}=\min(\operatorname{self},~d_{i,j})&(canleft_{i,j}=true) \\ \end{aligned}</script></li><li><p>结果状态：</p><p> $d_{T,n}$</p></li></ol><h2 id="二-代码"><a href="#二-代码" class="headerlink" title="二. 代码"></a>二. 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXT = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">&#x27;0&#x27;</span>;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, T, stabet[MAXn + <span class="number">10</span>], rightcnt, leftcnt;</span><br><span class="line"><span class="keyword">bool</span> canright[MAXT + <span class="number">10</span>][MAXn + <span class="number">10</span>], canleft[MAXT + <span class="number">10</span>][MAXn + <span class="number">10</span>]; </span><br><span class="line"><span class="keyword">int</span> d[MAXT + <span class="number">10</span>][MAXn + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        ++k;</span><br><span class="line">        <span class="built_in">memset</span>(canright, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(canright));<span class="comment">// </span></span><br><span class="line">        <span class="built_in">memset</span>(canleft, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(canleft));<span class="comment">//多组数据要初始化</span></span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(d));<span class="comment">//</span></span><br><span class="line">        <span class="built_in">read</span>(T);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">read</span>(stabet[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> time;<span class="comment">//</span></span><br><span class="line">        <span class="built_in">read</span>(rightcnt);<span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rightcnt; ++i) &#123;<span class="comment">// </span></span><br><span class="line">            <span class="built_in">read</span>(time);<span class="comment">//</span></span><br><span class="line">            canright[time][<span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n; ++j) &#123;<span class="comment">//</span></span><br><span class="line">                time += stabet[j];<span class="comment">//</span></span><br><span class="line">                canright[time][j] = <span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">            &#125;<span class="comment">//</span></span><br><span class="line">        &#125;<span class="comment">//边读入边用前缀和计算canright和canleft数组</span></span><br><span class="line">        <span class="built_in">read</span>(leftcnt);<span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= leftcnt; ++i) &#123;<span class="comment">//</span></span><br><span class="line">            <span class="built_in">read</span>(time);<span class="comment">//</span></span><br><span class="line">            canleft[time][n] = <span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j) &#123;<span class="comment">//</span></span><br><span class="line">                time += stabet[j + <span class="number">1</span>];<span class="comment">//</span></span><br><span class="line">                canleft[time][j] = <span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">            &#125;<span class="comment">//</span></span><br><span class="line">        &#125;<span class="comment">//</span></span><br><span class="line">        d[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= T; ++i) &#123;<span class="comment">//</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;<span class="comment">//</span></span><br><span class="line">                <span class="keyword">if</span> (i)<span class="comment">//</span></span><br><span class="line">                    d[i][j] = <span class="built_in">min</span>(d[i][j], <span class="comment">//</span></span><br><span class="line">                                  d[i - <span class="number">1</span>][j] + <span class="number">1</span>);<span class="comment">//</span></span><br><span class="line">                <span class="keyword">if</span> (canright[i][j])<span class="comment">//</span></span><br><span class="line">                    d[i + stabet[j + <span class="number">1</span>]][j + <span class="number">1</span>] = <span class="built_in">min</span>(d[i + stabet[j + <span class="number">1</span>]][j + <span class="number">1</span>], <span class="comment">//动态规划 </span></span><br><span class="line">                                                      d[i][j]  );<span class="comment">//</span></span><br><span class="line">                <span class="keyword">if</span> (canleft[i][j])<span class="comment">//</span></span><br><span class="line">                    d[i + stabet[j]][j - <span class="number">1</span>] = <span class="built_in">min</span>(d[i + stabet[j]][j - <span class="number">1</span>], <span class="comment">//</span></span><br><span class="line">                                                  d[i][j]  );<span class="comment">//</span></span><br><span class="line">            &#125;<span class="comment">//</span></span><br><span class="line">        &#125;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span> (d[T][n] == INF) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Case Number %d: impossible\n&quot;</span>, k);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Case Number %d: %d\n&quot;</span>, k, d[T][n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题解 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P3868 [TJOI2009]猜数字</title>
      <link href="/2021/07/21/%E7%8C%9C%E6%95%B0%E5%AD%97/"/>
      <url>/2021/07/21/%E7%8C%9C%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="P3868-TJOI2009-猜数字"><a href="#P3868-TJOI2009-猜数字" class="headerlink" title="P3868 [TJOI2009]猜数字"></a><a href="https://www.luogu.com.cn/problem/P3868">P3868 [TJOI2009]猜数字</a></h2><h2 id="一-思路"><a href="#一-思路" class="headerlink" title="一. 思路"></a>一. 思路</h2><p>首先拿道题看到条件给出两组数，其中一组互素，让猜一个数字。自然而然往 <strong>crt</strong> 上想。但为什么是 <strong>crt</strong> 呢？</p><p>$\forall i \in [1,k]$，有 $b_i \mid (n - a_i)$，这句话可以化为一组同余方程，再移项可得标准的 <strong>crt</strong> 格式：</p><script type="math/tex; mode=display">~~~~~~~~~~~~~~\begin{cases}n - a_1 \equiv 0 &(\operatorname{mod}~b_1) \\n - a_2 \equiv 0 &(\operatorname{mod}~b_2) \\\cdots \\n - a_k \equiv 0 &(\operatorname{mod}~b_k) \\\end{cases} \\~\\\Longrightarrow\begin{cases}n \equiv a_1 &(\operatorname{mod}~b_1) \\n \equiv a_2 &(\operatorname{mod}~b_2) \\\cdots \\n \equiv a_k &(\operatorname{mod}~b_k) \\\end{cases}</script><p>然后 <strong>crt</strong> 求解就好了。<strong>crt</strong> ——中国剩余定理就是提供了一个解同余方程组 $\begin{cases}x \equiv a<em>1 &amp;(\operatorname{mod}~m_1) \ x \equiv a_2 &amp;(\operatorname{mod}~m_2) \ \cdots \ x \equiv a_n &amp;(\operatorname{mod}~m_n) \ \end{cases}$ 的公式，即 $x = \sum\limits</em>{i = 1}^{n} { a<em>i \times M_i \times t_i }$，其中 $M_i = \dfrac{\prod\limits</em>{j = 1}^{n}m_j}{m_i}$， $t_i = \operatorname{inv}(M_i)$。公式的推导详见 <a href="https://oi-wiki.org/math/crt/">OI-Wiki</a>。</p><h2 id="二-坑点"><a href="#二-坑点" class="headerlink" title="二. 坑点"></a>二. 坑点</h2><p>交代码上去一看，为什么只有 90 分？最后一个点 WA 掉了，并且显示第一行第一列输出了减号。看来是爆 long long 了。所以需要<del>龟速</del>快速乘防止爆 long long。（本蒟蒻不会long double）</p><h2 id="三-代码"><a href="#三-代码" class="headerlink" title="三. 代码"></a>三. 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">qmul</span><span class="params">(T x, T y, T mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span> || y == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    T ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ret = ((ret % mod) + (x % mod)) % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        x = ((x % mod) + (x % mod)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">        y -= a / b * x;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, inv;</span><br><span class="line">    <span class="built_in">exgcd</span>(a, m, inv, k);</span><br><span class="line">    <span class="keyword">return</span> (inv % m + m) % m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">crt</span><span class="params">(<span class="keyword">int</span> cnta, <span class="keyword">int</span> *a, <span class="keyword">int</span> *m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> prod = <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnta; ++i) &#123;</span><br><span class="line">        prod *= m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, M; i &lt;= cnta; ++i) &#123;</span><br><span class="line">        M = prod / m[i];</span><br><span class="line">        ans = (ans + <span class="built_in">qmul</span>(<span class="built_in">qmul</span>(a[i], M, prod), <span class="built_in">inv</span>(M, m[i]), prod)) % prod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[MAXn + <span class="number">10</span>], m[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;m[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">crt</span>(n, a, m));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 题解 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P3601 签到题</title>
      <link href="/2021/07/21/%E7%AD%BE%E5%88%B0%E9%A2%98/"/>
      <url>/2021/07/21/%E7%AD%BE%E5%88%B0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="P3601-签到题"><a href="#P3601-签到题" class="headerlink" title="P3601 签到题"></a><a href="https://www.luogu.com.cn/problem/P3601">P3601 签到题</a></h2><h2 id="一-思路"><a href="#一-思路" class="headerlink" title="一. 思路"></a>一. 思路</h2><p>$1 \le l \le r \le 10^{12}$，$r-l \le 10^6$。很显然，传统的用欧拉函数是积性函数这条性质的从 $1$ 扫到区间右端的方法肯定不行。<br>虽然传统的方法不行。但欧拉函数还有一条有用的公式：$\varphi(n)=n \times \prod\limits_{i=1}^{n}\dfrac{p_i-1}{p_i}$ 。也就是说，我们只要知道 $l \sim r$ 中所有数的质因数分解就好了。不难发现一个数 $n$ 的质因数中有一个或零个大于 $\sqrt{n}$ 。那么我们把小于等于 $\sqrt{r}$ 的质数姑且称为“小质数”；大于 $\sqrt{r}$ 的叫“大质数”。</p><p>先预处理出所有小质数（也就是 $1 \sim 10^6$ 内的）开一个数组 $inv$ 每个位置预处理为下标的值（就是 $\varphi(n)=n \times \prod\limits<em>{i=1}^{n}\dfrac{p_i-1}{p_i}$ 中的等式右边的 $n$），然后用倍数法枚举所有小质数在 $l \sim r$ 区间中的倍数，将相应的 $inv_i$ 乘上 $\prod\limits</em>{i=1}^{n}\dfrac{p_i-1}{p_i}$。</p><p>当然，不要忘了大质数，因为每个数至多有一个大质数，所以大质数也很好处理。开一个数组 $bidprime$ 全初始化为下标。用倍数法枚举 $prime_i$ 的倍数枚举到相应的 $inv_j$ 时，顺便把 $bigprime_j$ 中所有的的因数 $prime_i$ 剔除。最后就得到了每个数的大质数。</p><h2 id="二-细节"><a href="#二-细节" class="headerlink" title="二. 细节"></a>二. 细节</h2><p>最重要的细节就是枚举小指数的倍数时从几枚举了。设该小质数为 $p$，区间左端点为 $l$ 。答案是 $\max{ p^2, \left\lceil\dfrac{l}{p}\right\rceil \times p }$。</p><p>为什么呢？首先小于 $p^2$ 的 $p$ 的倍数在枚举 $2$，$3$ 等比它更小的质数时就已经枚举过了。而 $\left\lceil\dfrac{l}{p}\right\rceil \times p $ 是大于等于 $l$ 的第一个 $p$ 的倍数。</p><h2 id="三-代码"><a href="#三-代码" class="headerlink" title="三. 代码"></a>三. 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXprime = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">666623333</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cntp, prime[MAXprime / <span class="number">5</span> + <span class="number">100</span>];</span><br><span class="line"><span class="keyword">bool</span> notp[MAXprime + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrimeSieve</span><span class="params">(<span class="keyword">int</span> up)</span> </span>&#123;<span class="comment">//线性筛不解释 </span></span><br><span class="line">    notp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= up; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!notp[i]) </span><br><span class="line">            prime[++cntp] = i;</span><br><span class="line">        <span class="keyword">int</span> upj = up / i;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cntp &amp;&amp; prime[j] &lt;= upj; ++j) &#123;</span><br><span class="line">            notp[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!(i % prime[j])) </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans, l, r, phi[MAXn + <span class="number">10</span>], bigprime[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">PrimeSieve</span>(MAXprime);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;<span class="comment">//初始化 </span></span><br><span class="line">        phi[i - l] = bigprime[i - l] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntp; ++i) &#123;<span class="comment">//倍数法：枚举所有小质数的倍数 </span></span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="built_in">max</span>(prime[i] * prime[i], (<span class="keyword">int</span>)<span class="built_in">ceil</span>((<span class="keyword">double</span>)l / prime[i]) * prime[i]); j &lt;= r; j += prime[i]) &#123;</span><br><span class="line">            phi[j - l] = phi[j - l] / prime[i] * (prime[i] - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (!(bigprime[j - l] % prime[i])) &#123;</span><br><span class="line">                bigprime[j - l] /= prime[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;<span class="comment">//处理大质数 </span></span><br><span class="line">        <span class="keyword">if</span> (bigprime[i - l] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            phi[i - l] = phi[i - l] / bigprime[i - l] * (bigprime[i - l] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;<span class="comment">//求和 </span></span><br><span class="line">        ans = (ans + i - phi[i - l]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一只小傻蜂</title>
      <link href="/2021/07/21/%E8%AE%B0%E4%B8%80%E5%8F%AA%E5%B0%8F%E5%82%BB%E8%9C%82/"/>
      <url>/2021/07/21/%E8%AE%B0%E4%B8%80%E5%8F%AA%E5%B0%8F%E5%82%BB%E8%9C%82/</url>
      
        <content type="html"><![CDATA[<p>今天，2021 年 6 月 28 日。</p><p>笃行楼 5 楼 第三机房，不足 40 cm 的狭窄门缝中，钻进了一只蜂。</p><p>这只蜂比较肥大，巨身修尾，青项金翅。</p><p>进来就盘旋在天花板上面，半天赶不下来。</p><p>傻死了，她要么一直撞灯管，要么一直盘旋着飞，<del>给她掰了些饼干也不吃</del>。</p><hr><p>稍晚些的时候，杰从机房的外面进来了，但是杰哥要怎么把她从高度 4m 的高高天花板中再赶出去啊！</p><p>天啊，她怎么一直在飞，真的不累吗。</p><p>放张照片：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/07/21/%E8%AE%B0%E4%B8%80%E5%8F%AA%E5%B0%8F%E5%82%BB%E8%9C%82/img.png" alt=""></p><hr><p>又过了一会</p><p>她不知什么时候又飞到灯泡管上面了，半天一直没动静。</p><p>我好怕啊。</p><hr><p>被杰哥一扫帚打下来，估计是没了。</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/07/21/%E8%AE%B0%E4%B8%80%E5%8F%AA%E5%B0%8F%E5%82%BB%E8%9C%82/kk.png" alt=""></p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/07/21/%E8%AE%B0%E4%B8%80%E5%8F%AA%E5%B0%8F%E5%82%BB%E8%9C%82/dk.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>锁机</title>
      <link href="/2021/07/21/%E9%94%81%E6%9C%BA/"/>
      <url>/2021/07/21/%E9%94%81%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>作为一名 $OIer$，我们时时刻刻都有被 $jc$ 的风险。这事我们需要一款简单的锁机程序来<del>锁死</del>保护我们的电脑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;winable.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    FreeConsole(); </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (clock() &gt; <span class="number">10000</span>) <span class="keyword">break</span>;</span><br><span class="line">        BlockInput(<span class="number">1</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>比如这就是一个 $10$ 秒钟的锁机 ，<code>clock()</code> 函数的单位是 $ms$。</p><p>如果无效试试用管理员身份运行。</p><p><del>小心别多数了个 $0$。</del></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P3833 [SHOI2012]魔法树</title>
      <link href="/2021/07/21/%E9%AD%94%E6%B3%95%E6%A0%91/"/>
      <url>/2021/07/21/%E9%AD%94%E6%B3%95%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="P3833-SHOI2012-魔法树"><a href="#P3833-SHOI2012-魔法树" class="headerlink" title="P3833 [SHOI2012]魔法树"></a><a href="https://www.luogu.com.cn/problem/P3833">P3833 [SHOI2012]魔法树</a></h2><h3 id="放在前面的前面：本文有树剖图解"><a href="#放在前面的前面：本文有树剖图解" class="headerlink" title="放在前面的前面：本文有树剖图解"></a>放在前面的前面：本文有树剖图解</h3><p>放在前面：一道树剖板子题，关于树剖的教程网上数不胜数，我就只 <strong>概述</strong> 一下，就不造轮子了，具体细节请见 <a href="https://oi-wiki.org/graph/hld/">OI WIKI</a>。</p><h2 id="一-过程概述"><a href="#一-过程概述" class="headerlink" title="一. 过程概述"></a>一. 过程概述</h2><h4 id="0-基础：邻接表，线段树。"><a href="#0-基础：邻接表，线段树。" class="headerlink" title="0. 基础：邻接表，线段树。"></a>0. 基础：邻接表，线段树。</h4><h4 id="1-第一次-dfs："><a href="#1-第一次-dfs：" class="headerlink" title="1. 第一次 dfs："></a>1. 第一次 dfs：</h4><p>求出该有根树（如果题目没明确根就任选一个）所有节点的父节点，深度，（以他为根的）子树的大小， 重儿子。</p><h4 id="2-第二次-dfs："><a href="#2-第二次-dfs：" class="headerlink" title="2. 第二次 dfs："></a>2. 第二次 dfs：</h4><p>求出该有根树所有节点的 dfs 序—— $dfs$，每个 dfs 对应的节点编号—— $dfsidx$（$i=dfsidx_{dfs_i}$），所在重链的链顶—— $top$，其子树中节点中 dfs 序最大的一个—— $bottom$。用途：</p><p>$dfs$：若这棵树上本来就有权值需要用它辅助给线段树建树。本题中无用。</p><p>$dfsidx$：用他将线段树上节点的编号转化为线段树上节点的编号。</p><p>$top$：进行树链上操作时需要。（详见我的代码和 <a href="https://oi-wiki.org/graph/hld/">OI WIKI</a>）</p><p>$bottom$：进行子树上操作时需要。（详见我的代码和 <a href="https://oi-wiki.org/graph/hld/">OI WIKI</a>）</p><h4 id="3-权值增减与查询："><a href="#3-权值增减与查询：" class="headerlink" title="3. 权值增减与查询："></a>3. 权值增减与查询：</h4><p>详解见 <a href="https://oi-wiki.org/graph/hld/">OI WIKI</a>，这里只放两张图：</p><p>树和dfs序：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/07/21/%E9%AD%94%E6%B3%95%E6%A0%91/1.png" alt=""></p><p>（madeby：大佬 EternalAlexander 的 <a href="https://www.luogu.com.cn/discuss/show/41151">OI Painter</a>）</p><p>另一张dfs图：</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/07/21/%E9%AD%94%E6%B3%95%E6%A0%91/2.png" alt=""></p><p>有点先序遍历内味了，只不过不是根左右，而是根重轻。<br>由此也可发现：树上一条重链或一棵子树都是线段树上连续的一部分，这正是树剖的核心。</p><h2 id="二-代码"><a href="#二-代码" class="headerlink" title="二. 代码"></a>二. 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = MAXn - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">s</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;s = (s &lt;&lt; <span class="number">1</span>) + (s &lt;&lt; <span class="number">3</span>) + c - <span class="string">&#x27;0&#x27;</span>;&#125;x = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cntnext, head[MAXn + <span class="number">10</span>], nex[MAXm + <span class="number">10</span>], to[MAXm + <span class="number">10</span>];<span class="comment">//////</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> too)</span> </span>&#123;<span class="comment">//</span></span><br><span class="line">    nex[++cntnext] = head[from];<span class="comment">//邻接表 </span></span><br><span class="line">    head[from] = cntnext;<span class="comment">//</span></span><br><span class="line">    to[cntnext] = too;<span class="comment">//////</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span><span class="comment">//////线段树 </span></span><br><span class="line">    LL sum;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">int</span> l;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">int</span> r;<span class="comment">//</span></span><br><span class="line">    LL add;<span class="comment">//</span></span><br><span class="line">&#125;;<span class="comment">//</span></span><br><span class="line">Node stt[MAXn * <span class="number">4</span> + <span class="number">10</span>];<span class="comment">//</span></span><br><span class="line"><span class="keyword">void</span> _BuildUseArray_(<span class="keyword">int</span> nodeid, <span class="keyword">int</span> l, <span class="keyword">int</span> r, LL *array) &#123;<span class="comment">//</span></span><br><span class="line">    stt[nodeid].l = l;<span class="comment">//</span></span><br><span class="line">    stt[nodeid].r = r;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;<span class="comment">//</span></span><br><span class="line">        stt[nodeid].sum = array[l];<span class="comment">//</span></span><br><span class="line">        <span class="keyword">return</span>;<span class="comment">//</span></span><br><span class="line">    &#125;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">    _BuildUseArray_((nodeid &lt;&lt; <span class="number">1</span>), l, mid, array);<span class="comment">//</span></span><br><span class="line">    _BuildUseArray_((nodeid &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, r, array);<span class="comment">//</span></span><br><span class="line">    stt[nodeid].sum = (stt[(nodeid &lt;&lt; <span class="number">1</span>)].sum + stt[(nodeid &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>].sum);</span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line"><span class="keyword">void</span> _Build0_(<span class="keyword">int</span> nodeid, <span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;<span class="comment">//</span></span><br><span class="line">    stt[nodeid].l = l;<span class="comment">//</span></span><br><span class="line">    stt[nodeid].r = r;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">return</span>;<span class="comment">//</span></span><br><span class="line">    &#125;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">    _Build0_((nodeid &lt;&lt; <span class="number">1</span>), l, mid);<span class="comment">//</span></span><br><span class="line">    _Build0_((nodeid &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, r);<span class="comment">//</span></span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line"><span class="keyword">void</span> _Spread_(<span class="keyword">int</span> nodeid) &#123;<span class="comment">//</span></span><br><span class="line">    stt[(nodeid &lt;&lt; <span class="number">1</span>)].sum = ( stt[(nodeid &lt;&lt; <span class="number">1</span>)].sum + ((stt[(nodeid &lt;&lt; <span class="number">1</span>)].r - stt[(nodeid &lt;&lt; <span class="number">1</span>)].l + <span class="number">1</span>) * stt[nodeid].add) );</span><br><span class="line">    stt[(nodeid &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>].sum = ( stt[(nodeid &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>].sum + (stt[nodeid].add * (stt[(nodeid &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>].r - stt[(nodeid &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>].l + <span class="number">1</span>)) );</span><br><span class="line">                                                                <span class="comment">//</span></span><br><span class="line">    stt[(nodeid &lt;&lt; <span class="number">1</span>)].add = (stt[(nodeid &lt;&lt; <span class="number">1</span>)].add + stt[nodeid].add);</span><br><span class="line">    stt[(nodeid &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>].add = (stt[(nodeid &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>].add + stt[nodeid].add);</span><br><span class="line">                                                                <span class="comment">//</span></span><br><span class="line">    stt[nodeid].add = <span class="number">0</span>;<span class="comment">/// </span></span><br><span class="line">&#125;<span class="comment">////////// 线段树 </span></span><br><span class="line"><span class="keyword">void</span> _Add_(<span class="keyword">int</span> nodeid, <span class="keyword">int</span> l, <span class="keyword">int</span> r, LL k) &#123;<span class="comment">///</span></span><br><span class="line">    <span class="keyword">if</span> (stt[nodeid].l &gt;= l &amp;&amp; stt[nodeid].r &lt;= r) &#123;<span class="comment">//</span></span><br><span class="line">        stt[nodeid].add = (stt[nodeid].add + k);<span class="comment">//</span></span><br><span class="line">        stt[nodeid].sum = (stt[nodeid].sum + k * (stt[nodeid].r - stt[nodeid].l + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span>;<span class="comment">//</span></span><br><span class="line">    &#125;<span class="comment">//</span></span><br><span class="line">    _Spread_(nodeid);<span class="comment">//</span></span><br><span class="line">    <span class="keyword">int</span> mid = (stt[nodeid].l + stt[nodeid].r) &gt;&gt; <span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid)   _Add_((nodeid &lt;&lt; <span class="number">1</span>), l, r, k);<span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (mid &lt; r)    _Add_((nodeid &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, r, k);<span class="comment">//</span></span><br><span class="line">    stt[nodeid].sum = (stt[(nodeid &lt;&lt; <span class="number">1</span>)].sum + stt[(nodeid &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>].sum);</span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line">LL _Eva_(<span class="keyword">int</span> nodeid, <span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (stt[nodeid].l &gt;= l &amp;&amp; stt[nodeid].r &lt;= r)<span class="comment">//</span></span><br><span class="line">        <span class="keyword">return</span> stt[nodeid].sum;<span class="comment">//</span></span><br><span class="line">    _Spread_(nodeid);<span class="comment">//</span></span><br><span class="line">    LL val = <span class="number">0</span>;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">int</span> mid = (stt[nodeid].l + stt[nodeid].r) &gt;&gt; <span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid)   val = (val + _Eva_((nodeid &lt;&lt; <span class="number">1</span>), l, r));<span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (mid &lt; r)    val = (val + _Eva_((nodeid &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, r));</span><br><span class="line">    <span class="keyword">return</span> val;<span class="comment">//</span></span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildUseArray</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, LL *array)</span> </span>&#123;<span class="comment">//</span></span><br><span class="line">    _BuildUseArray_(<span class="number">1</span>, l, r, array);<span class="comment">//</span></span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build0</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;<span class="comment">//</span></span><br><span class="line">    <span class="built_in">memset</span>(stt, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(stt));<span class="comment">//</span></span><br><span class="line">    _Build0_(<span class="number">1</span>, l, r);<span class="comment">//</span></span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, LL k)</span> </span>&#123;<span class="comment">//</span></span><br><span class="line">    _Add_(<span class="number">1</span>, l, r, k);<span class="comment">//</span></span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line"><span class="function">LL <span class="title">Eva</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> _Eva_(<span class="number">1</span>, l, r);<span class="comment">//</span></span><br><span class="line">&#125;<span class="comment">//////线段树 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[MAXn + <span class="number">10</span>], dep[MAXn + <span class="number">10</span>], siz[MAXn + <span class="number">10</span>], hson[MAXn + <span class="number">10</span>];<span class="comment">//树剖 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs1</span><span class="params">(<span class="keyword">int</span> nodeid, <span class="keyword">int</span> fat, <span class="keyword">int</span> deep)</span> </span>&#123;<span class="comment">////</span></span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">1</span>;<span class="comment">///</span></span><br><span class="line">    <span class="keyword">int</span> maxsiz = <span class="number">0</span>;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">int</span> maxer = <span class="number">0</span>;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">int</span> eachsiz;<span class="comment">//</span></span><br><span class="line">    fa[nodeid] = fat;<span class="comment">//</span></span><br><span class="line">    dep[nodeid] = deep;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[nodeid]; i; i = nex[i]) &#123;<span class="comment">//</span></span><br><span class="line">        eachsiz = <span class="built_in">Dfs1</span>(to[i], nodeid, deep + <span class="number">1</span>);<span class="comment">//</span></span><br><span class="line">        size += eachsiz;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span> (eachsiz &gt; maxsiz) &#123;<span class="comment">//</span></span><br><span class="line">            maxsiz = eachsiz;<span class="comment">//</span></span><br><span class="line">            maxer = to[i];<span class="comment">//</span></span><br><span class="line">        &#125;<span class="comment">//</span></span><br><span class="line">    &#125;<span class="comment">//</span></span><br><span class="line">    siz[nodeid] = size;<span class="comment">//</span></span><br><span class="line">    hson[nodeid] = maxer;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> size;<span class="comment">//</span></span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line">                                                                <span class="comment">//</span></span><br><span class="line"><span class="keyword">int</span> cntdfs, dfs[MAXn + <span class="number">10</span>], dfsidx[MAXn + <span class="number">10</span>], top[MAXn + <span class="number">10</span>], bottom[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs2</span><span class="params">(<span class="keyword">int</span> nodeid, <span class="keyword">int</span> topp)</span> </span>&#123;<span class="comment">//</span></span><br><span class="line">    dfs[++cntdfs] = nodeid;<span class="comment">//</span></span><br><span class="line">    dfsidx[nodeid] = cntdfs;<span class="comment">//</span></span><br><span class="line">    top[nodeid] = topp;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (hson[nodeid]) &#123;<span class="comment">//</span></span><br><span class="line">        <span class="built_in">Dfs2</span>(hson[nodeid], topp);<span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[nodeid]; i; i = nex[i]) &#123;<span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span> (to[i] != fa[nodeid] &amp;&amp; to[i] != hson[nodeid]) &#123;<span class="comment">//</span></span><br><span class="line">                <span class="built_in">Dfs2</span>(to[i], to[i]);<span class="comment">//</span></span><br><span class="line">            &#125;<span class="comment">//</span></span><br><span class="line">        &#125;<span class="comment">//</span></span><br><span class="line">    &#125;<span class="comment">//</span></span><br><span class="line">    bottom[nodeid] = dfs[cntdfs];<span class="comment">//</span></span><br><span class="line">&#125;<span class="comment">///</span></span><br><span class="line">                                                                <span class="comment">////////// 树剖 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreePathAdd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k)</span> </span>&#123;<span class="comment">///</span></span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y]) &#123;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &gt; dep[top[y]]) &#123;<span class="comment">//</span></span><br><span class="line">            <span class="built_in">swap</span>(x, y);<span class="comment">//</span></span><br><span class="line">        &#125;<span class="comment">//</span></span><br><span class="line">        <span class="built_in">Add</span>(dfsidx[top[y]], dfsidx[y], k);<span class="comment">//</span></span><br><span class="line">        y = fa[top[y]];<span class="comment">//</span></span><br><span class="line">    &#125;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) &#123;<span class="comment">//</span></span><br><span class="line">        <span class="built_in">swap</span>(x, y);<span class="comment">//</span></span><br><span class="line">    &#125;<span class="comment">//</span></span><br><span class="line">    <span class="built_in">Add</span>(dfsidx[x], dfsidx[y], k);<span class="comment">//</span></span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line">                                                                <span class="comment">//</span></span><br><span class="line"><span class="function">LL <span class="title">TreePathEva</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;<span class="comment">//</span></span><br><span class="line">    LL sum = <span class="number">0</span>;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y]) &#123;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &gt; dep[top[y]]) &#123;<span class="comment">//</span></span><br><span class="line">            <span class="built_in">swap</span>(x, y);<span class="comment">//</span></span><br><span class="line">        &#125;<span class="comment">//</span></span><br><span class="line">        sum += <span class="built_in">Eva</span>(dfsidx[top[y]], dfsidx[y]);<span class="comment">//</span></span><br><span class="line">        y = fa[top[y]];<span class="comment">//</span></span><br><span class="line">    &#125;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) &#123;<span class="comment">//</span></span><br><span class="line">        <span class="built_in">swap</span>(x, y);<span class="comment">//</span></span><br><span class="line">    &#125;<span class="comment">//</span></span><br><span class="line">    sum += <span class="built_in">Eva</span>(dfsidx[x], dfsidx[y]);<span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> sum;<span class="comment">//</span></span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line">                                                                <span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SonTreeAdd</span><span class="params">(<span class="keyword">int</span> rootid, <span class="keyword">int</span> k)</span> </span>&#123;<span class="comment">//</span></span><br><span class="line">    <span class="built_in">Add</span>(dfsidx[rootid], dfsidx[bottom[rootid]], k);<span class="comment">//</span></span><br><span class="line">&#125;<span class="comment">//</span></span><br><span class="line">                                                                <span class="comment">//</span></span><br><span class="line"><span class="function">LL <span class="title">SonTreeEva</span><span class="params">(<span class="keyword">int</span> rootid)</span> </span>&#123;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Eva</span>(dfsidx[rootid], dfsidx[bottom[rootid]]);<span class="comment">//</span></span><br><span class="line">&#125;<span class="comment">//////树剖 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">Build0</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, from, to; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(from), <span class="built_in">read</span>(to);</span><br><span class="line">        <span class="built_in">Insert</span>(from + <span class="number">1</span>, to + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs1</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, from, to, val, opt, root; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="built_in">getchar</span>();</span><br><span class="line">        opt = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (opt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">            <span class="built_in">read</span>(from), <span class="built_in">read</span>(to), <span class="built_in">read</span>(val);</span><br><span class="line">            <span class="built_in">TreePathAdd</span>(from + <span class="number">1</span>, to + <span class="number">1</span>, val);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">            <span class="built_in">read</span>(root);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">SonTreeEva</span>(root + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卡时</title>
      <link href="/2021/06/08/%E5%8D%A1%E6%97%B6/"/>
      <url>/2021/06/08/%E5%8D%A1%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<p>众所周知，在各大计算机竞赛的赛场上，总会有那么一样东西令人头疼，令暴力爆零，令搜索欲哭无泪；在各大在线评测系统上，总会有那么三个字母教 $n^2$ 失败，教 $2^n$ 无奈，教 $n!$ 一个点都拿不到。没错，那就是 <strong>T-L-E</strong>。</p><p>今天就来分享分享怎么避免这三个大字的出现。</p><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p><strong>卡时</strong>，顾名思义，就是卡时间，用尽时间限制中的每一微秒，搜索的话就算没搜完，把局部最小值输出至少有可能 A，<del>当然如果你的算法太差也顶多只能把 $TLE$ 变成 $WA$</del></p><p>那么开始吧！</p><h5 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h5><p>直接放代码：（递归同理我就不再放一遍了）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; ; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">500000000</span> &amp;&amp; </span><br><span class="line">            i % <span class="number">1000000</span> == <span class="number">0</span> &amp;&amp; </span><br><span class="line">            <span class="built_in">clock</span>() &gt;= <span class="number">990</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;How many done: %d\n&quot;</span>, i);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Time used: %.6lf\n&quot;</span>, (<span class="keyword">double</span>) <span class="built_in">clock</span>() / CLOCKS_PER_SEC);</span><br><span class="line">            <span class="comment">/*在这里输出“正解”*/</span></span><br><span class="line">            <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*在这里放程序的主体*/</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-讲解"><a href="#2-讲解" class="headerlink" title="2.讲解"></a>2.讲解</h5><ol><li><p><code>#include&lt;cmath&gt;</code></p><p> 头文件记得加上</p></li><li><p><strong><code>&quot;if (i &gt;= 500000000 &amp;&amp; i % 1000000 == 0 &amp;&amp; clock() &gt;= 990)&quot;</code></strong></p><p> <strong>重点！</strong></p><ul><li><p><code>i &gt;= 500000000</code></p><p>​    $500000000$ 是你估计的该循环体能在规定时间能执行的次数，往小估计一点！不然程序来不及判断 <code>clock() &gt;= 990</code> 就超时了。</p></li><li><p><code>i % 1000000 == 0</code></p><p>​    因为 <code>clock</code> 函数的常数很大，尽量少是执行他， 所以加这个来减少 <code>clock()</code> 的执行次数， $1000000$ 这个数别设太大，不然也容易没卡住而超时。</p></li><li><p><code>clock() &gt;= 990</code></p><p>​    整个卡时中最重要的部分，注意两点：<strong>一、</strong><code>990</code> 这个数字取决于操作系统，因为 $Windows$ 的 <code>CLOCKS_PER_SEC</code>  是 $1000$ , $Linux$ 下是 $1000000$ ，也就是 $Window$ 的 <code>clock()</code> 返回值单位为毫秒， $Linux$ 是微秒，也就是说这个卡时程序要是在 $Linux$ 上测 $990$ 应该为 $990000$。<strong>二、</strong>不要太贪了， $1$ 秒的题开个  $980000$ 就行了，可别真开到开 $1000000$。</p></li><li><p>关于三者的顺序</p><p>​    我们知道，几个 <code>&amp;&amp;</code> 或 <code>||</code> 隔开的语句顺序不一样可能会有不同的结果，因为如果计算机通过靠前的语句能判断整个语句的布尔值就不会执行后面的，（如 <code>&amp;&amp;</code> 之间出现 <code>false</code> , <code>||</code> 之间出现 <code>true</code> ），所以，我们应该将耗时少的判定放在前面，耗时 <code>&gt;=</code>  $&lt;$  <code>%</code>  $&lt;$  <code>clock()</code>，所以我们按这个顺序放置。否则，卡时的耗时甚至要比搜索本身耗时高，得不偿失。</p></li></ul></li><li><p><code>exit(EXIT_SUCCESS)</code></p><ul><li>“相当于 <code>return 0</code> ，与 <code>return 0</code> 不同的是，无论他在哪执行（包括除 <code>main</code> 以外的函数），整个程序立即结束。依靠递归的搜索不能用 <code>return 0</code> 来停止，需要用它。</li></ul></li></ol><h5 id="3-结果"><a href="#3-结果" class="headerlink" title="3.结果"></a>3.结果</h5><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/06/08/%E5%8D%A1%E6%97%B6/%E7%BB%93%E6%9E%9C.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运行时间测试</title>
      <link href="/2021/06/08/%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/06/08/%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>有一天，我在网上看到有人说重载 <code>max()</code> 函数是一种有用的卡常技巧，今天就来测一下重载 <code>max()</code> 到底是有用还是帮了倒忙。</p><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><h4 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h4><p>直接放代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL numof = <span class="number">100000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*在这里做初始化和准备工作*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*在这里做初始化和准备工作*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Time to do %lld is &quot;</span>, numof) ;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">clock_t</span> emptystart = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="keyword">for</span> (re LL i = <span class="number">0</span>; i &lt; numof; ++i) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">clock_t</span> emptyend = <span class="built_in">clock</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">clock_t</span> teststart = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="keyword">for</span> (re LL i = <span class="number">0</span>; i &lt; numof; ++i) &#123;</span><br><span class="line">        <span class="comment">/*在这里放测试代码*/</span></span><br><span class="line">        <span class="built_in">max</span>(<span class="number">13</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="comment">//Max(13, 12); </span></span><br><span class="line">        <span class="comment">/*在这里放测试代码*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">clock_t</span> testend = <span class="built_in">clock</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>, (<span class="keyword">double</span>) </span><br><span class="line">                      ((testend - teststart) - (emptyend - emptystart))</span><br><span class="line">                      / CLOCKS_PER_SEC); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-讲解"><a href="#2-讲解" class="headerlink" title="2.讲解"></a>2.讲解</h5><ol><li><p>如果 <code>numof</code> 设得比较大最好加上 <code>emptystart</code> 和 <code>emptyend</code> 来排除循环本身的耗时。</p></li><li><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>, (<span class="keyword">double</span>) </span><br><span class="line">                  ((testend - teststart) - (emptyend - emptystart))</span><br><span class="line">                  / CLOCKS_PER_SEC); </span><br></pre></td></tr></table></figure><p>很简单。</p></li></ol><h5 id="3-结果"><a href="#3-结果" class="headerlink" title="3.结果"></a>3.结果</h5><ol><li>C 自带的 <code>max</code>：</li></ol><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/06/08/%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E6%B5%8B%E8%AF%95/%E7%BB%93%E6%9E%9C-C%E8%87%AA%E5%B8%A6.png" alt=""></p><ol><li>自制的 <code>Max</code>：</li></ol><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/06/08/%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E6%B5%8B%E8%AF%95/%E7%BB%93%E6%9E%9C-%E8%87%AA%E5%88%B6.png" alt=""></p><p>是有优化的，但效果并不明显 . . . </p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01分数规划</title>
      <link href="/1970/01/01/TemLib/01%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92/"/>
      <url>/1970/01/01/TemLib/01%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="P4377-USACO18OPEN-Talent-Show-G"><a href="#P4377-USACO18OPEN-Talent-Show-G" class="headerlink" title="P4377 USACO18OPEN Talent Show G"></a><a href="https://www.luogu.com.cn/problem/P4377">P4377 USACO18OPEN Talent Show G</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">250</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXW = <span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> MAXfrac = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;n, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, W, w[MAXn + <span class="number">10</span>], t[MAXn + <span class="number">10</span>]; <span class="keyword">double</span> v[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">double</span> d[MAXW + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        v[i] = (<span class="keyword">double</span>)t[i] - (<span class="keyword">double</span>)w[i] * x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0xc2</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(d));</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = W; ~j; --j) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = <span class="built_in">min</span>(j + w[i], W);</span><br><span class="line">            d[k] = <span class="built_in">max</span>(d[k], d[j] + v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[W];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, W);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(w[i], t[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> L = <span class="number">0</span>, R = MAXfrac;</span><br><span class="line">    <span class="keyword">while</span> (R - L &gt; EPS) &#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">calc</span>(mid) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            L = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            R = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in"><span class="keyword">int</span></span>(L * <span class="number">1000</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01背包</title>
      <link href="/1970/01/01/TemLib/01%E8%83%8C%E5%8C%85/"/>
      <url>/1970/01/01/TemLib/01%E8%83%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="P1048-NOIP2005-普及组-采药"><a href="#P1048-NOIP2005-普及组-采药" class="headerlink" title="P1048 [NOIP2005 普及组] 采药"></a><a href="https://www.luogu.com.cn/problem/P1048">P1048 [NOIP2005 普及组] 采药</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL MAXn = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">const</span> LL MAXW = <span class="number">10000000</span>;</span><br><span class="line"></span><br><span class="line">LL n, W;</span><br><span class="line">LL d[MAXW + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">register</span> LL <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">max</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    W = <span class="built_in">read</span>();</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    LL w, v;</span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        w = <span class="built_in">read</span>();</span><br><span class="line">        v = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">for</span> (LL i = W; i &gt;= w; i--) &#123;</span><br><span class="line">            d[i] = <span class="built_in">max</span>(d[i], d[i - w] + v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, d[W]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-Sat</title>
      <link href="/1970/01/01/TemLib/2-Sat/"/>
      <url>/1970/01/01/TemLib/2-Sat/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4782">P4782 【模板】2-SAT 问题</a></p><h4 id="1-暴力判断做法"><a href="#1-暴力判断做法" class="headerlink" title="1. 暴力判断做法"></a>1. 暴力判断做法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXnd = MAXn * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXeg = MAXm * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sta[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> head[MAXnd + <span class="number">10</span>], cntnex, nex[MAXeg + <span class="number">10</span>], to[MAXeg + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> top, stk[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">otherside</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur &gt; n) <span class="keyword">return</span> cur - n;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> cur + n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sta[cur] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (sta[cur] == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    sta[cur] = <span class="number">1</span>; sta[<span class="built_in">otherside</span>(cur)] = <span class="number">-1</span>;</span><br><span class="line">    stk[++top] = cur;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Dfs</span>(to[i])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, a, opta, b, optb; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a, opta, b, optb);</span><br><span class="line">        <span class="built_in">Insert</span>(opta ? a : a + n, optb ? b + n : b);</span><br><span class="line">        <span class="built_in">Insert</span>(optb ? b : b + n, opta ? a + n : a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sta[i]) <span class="keyword">continue</span>;</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Dfs</span>(i)) &#123;</span><br><span class="line">            <span class="keyword">while</span> (top) &#123;</span><br><span class="line">                sta[stk[top]] = sta[<span class="built_in">otherside</span>(stk[top])] = <span class="number">0</span>;</span><br><span class="line">                --top;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">Dfs</span>(i + n)) &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;IMPOSSIBLE&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;POSSIBLE&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sta[i + n] == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Tarjan-优化做法"><a href="#2-Tarjan-优化做法" class="headerlink" title="2. Tarjan 优化做法"></a>2. Tarjan 优化做法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXnd = MAXn * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXeg = MAXm * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXnd + <span class="number">10</span>], cntnex, nex[MAXeg + <span class="number">10</span>], to[MAXeg + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> head2[MAXnd + <span class="number">10</span>], cntnex2, nex2[MAXeg + <span class="number">10</span>], to2[MAXeg + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    nex2[++cntnex2] = head2[u];</span><br><span class="line">    head2[u] = cntnex2;</span><br><span class="line">    to2[cntnex2] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cntdfs, dfs[MAXnd + <span class="number">10</span>], low[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> top, stk[MAXnd + <span class="number">10</span>]; <span class="keyword">bool</span> instk[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntscc;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    dfs[cur] = low[cur] = ++cntdfs;</span><br><span class="line">    stk[++top] = cur; instk[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfs[to[i]]) &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(to[i]);</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], low[to[i]]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (instk[to[i]]) &#123;</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], dfs[to[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dfs[cur] == low[cur]) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        ++cntscc;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            x = stk[top--]; instk[x] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">Insert2</span>(cntscc, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (x != cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">smallside</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; n ? x - n : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> chose[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, a, b, opta, optb; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a, opta, b, optb);</span><br><span class="line">        <span class="built_in">Insert</span>(opta ? a + n : a, optb ? b : b + n);</span><br><span class="line">        <span class="built_in">Insert</span>(optb ? b + n : b, opta ? a : a + n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, topi = n * <span class="number">2</span>; i &lt;= topi; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfs[i]) &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntscc; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = head2[i]; j; j = nex2[j]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chose[<span class="built_in">smallside</span>(to2[j])] == i) &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;IMPOSSIBLE&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            chose[<span class="built_in">smallside</span>(to2[j])] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;POSSIBLE&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(chose, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(chose));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntscc; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chose[<span class="built_in">smallside</span>(to2[head2[i]])]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = head2[i]; j; j = nex2[j]) &#123;</span><br><span class="line">            chose[<span class="built_in">smallside</span>(to2[j])] = to2[j] &gt; n ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, chose[i] == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Astar</title>
      <link href="/1970/01/01/TemLib/Astar/"/>
      <url>/1970/01/01/TemLib/Astar/</url>
      
        <content type="html"><![CDATA[<h3 id="A-解八数码"><a href="#A-解八数码" class="headerlink" title="A* 解八数码"></a>A* 解八数码</h3><p><a href="https://www.luogu.com.cn/problem/P1379">Luogu P1379 八数码难题</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, string&gt;, vector&lt;pair&lt;<span class="keyword">int</span>, string&gt;&gt;, greater&lt;pair&lt;<span class="keyword">int</span>, string&gt;&gt;&gt; pq;</span><br><span class="line">unordered_map&lt;string, <span class="keyword">int</span>&gt; d;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Astar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    d[bg] = <span class="number">0</span>;</span><br><span class="line">    pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span> + <span class="built_in">Manh</span>(bg), bg));</span><br><span class="line">    <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        string sta = pq.<span class="built_in">top</span>().second;</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (sta == ed) &#123;</span><br><span class="line">            <span class="keyword">return</span> d[sta];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Trans</span>(sta); <span class="comment">// Trans(string sta)函数将sta可转移到的状态存到deal数组里</span></span><br><span class="line">        <span class="keyword">int</span> D = d[sta] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntdeal; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!d.<span class="built_in">count</span>(deal[i]) || d[deal[i]] &gt; D) &#123;</span><br><span class="line">                d[deal[i]] = D;</span><br><span class="line">                pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(D + <span class="built_in">Manh</span>(deal[i]), deal[i]));</span><br><span class="line">                <span class="comment">// Manh(string sta)函数求sta到end的总曼哈顿长度，即估价函数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A-解k短路"><a href="#A-解k短路" class="headerlink" title="A* 解k短路"></a>A* 解k短路</h3><p><a href="https://www.acwing.com/problem/content/180/">Acwing 178. 第K短路</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Astar</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> kth)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dis[s] == INF) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; pq;</span><br><span class="line">    <span class="keyword">int</span> times = <span class="number">0</span>;</span><br><span class="line">    pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span> + dis[s], s));</span><br><span class="line">    <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = pq.<span class="built_in">top</span>().second, dist = pq.<span class="built_in">top</span>().first - dis[cur]; pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (cur == t) &#123;</span><br><span class="line">            <span class="keyword">if</span> (++times == kth) &#123;</span><br><span class="line">                <span class="keyword">return</span> dist;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">            pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dist + wei[i] + dis[to[i]], to[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">Dijkstra</span>(t); <span class="comment">// 反向边上跑 Dij</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">Astar</span>(s, t, kth)); <span class="comment">// 正向边上跑 A*</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bsgs</title>
      <link href="/1970/01/01/TemLib/Bsgs/"/>
      <url>/1970/01/01/TemLib/Bsgs/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3846">P3846 [TJOI2007] 可爱的质数/【模板】BSGS</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Bsgs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> % p == b % p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="built_in">sqrt</span>(p) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, val = b % p; i &lt; k; ++i, val = val * a % p) &#123;</span><br><span class="line">        mp[val] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, ak = <span class="built_in">power</span>(a, k, p), val = ak; i &lt;= k; ++i, val = val * ak % p) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mp.<span class="built_in">count</span>(val)) <span class="keyword">return</span> k * i - mp[val];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ac自动机</title>
      <link href="/1970/01/01/TemLib/Ac%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
      <url>/1970/01/01/TemLib/Ac%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="P3808-【模板】AC自动机（简单版）"><a href="#P3808-【模板】AC自动机（简单版）" class="headerlink" title="P3808 【模板】AC自动机（简单版）"></a><a href="https://www.luogu.com.cn/problem/P3808">P3808 【模板】AC自动机（简单版）</a></h2><h2 id="P3796-【模板】AC自动机（加强版）"><a href="#P3796-【模板】AC自动机（加强版）" class="headerlink" title="P3796 【模板】AC自动机（加强版）"></a><a href="https://www.luogu.com.cn/problem/P3796">P3796 【模板】AC自动机（加强版）</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXtxtlen = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXwrdlen = <span class="number">70</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXwrdcnt = <span class="number">150</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXnd = <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cntnd, son[MAXnd + <span class="number">10</span>][<span class="number">26</span>], mat[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> txt[MAXtxtlen + <span class="number">10</span>], wrd[MAXwrdcnt + <span class="number">10</span>][MAXwrdlen + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> ltxt, lwrd;</span><br><span class="line"><span class="keyword">int</span> fail[MAXnd + <span class="number">10</span>], ndidx[MAXwrdcnt + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(queue&lt;<span class="keyword">int</span>&gt; &amp;q)</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; empty;</span><br><span class="line">    <span class="built_in">swap</span>(q, empty);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cntnd = ltxt = lwrd = n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(son, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(son));</span><br><span class="line">    <span class="built_in">memset</span>(mat, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(mat));</span><br><span class="line">    <span class="built_in">memset</span>(txt, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(txt));</span><br><span class="line">    <span class="built_in">memset</span>(wrd, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(wrd));</span><br><span class="line">    <span class="built_in">memset</span>(fail, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(fail));</span><br><span class="line">    <span class="built_in">memset</span>(ndidx, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ndidx));</span><br><span class="line">    <span class="built_in">memset</span>(mat, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(mat));</span><br><span class="line">    <span class="built_in">clear</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> *wrd, <span class="keyword">int</span> wrdidx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lwrd; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (son[cur][wrd[i] - <span class="number">97</span>]) &#123;</span><br><span class="line">            cur = son[cur][wrd[i] - <span class="number">97</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = son[cur][wrd[i] - <span class="number">97</span>] = ++cntnd;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ndidx[wrdidx] = cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (son[<span class="number">0</span>][i]) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(son[<span class="number">0</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (son[cur][i]) &#123;</span><br><span class="line">                fail[son[cur][i]] = son[fail[cur]][i];</span><br><span class="line">                q.<span class="built_in">push</span>(son[cur][i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                son[cur][i] = son[fail[cur]][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ltxt; ++i) &#123;</span><br><span class="line">        cur = son[cur][txt[i] - <span class="number">97</span>];</span><br><span class="line">        <span class="keyword">int</span> x = cur;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            ++mat[x];</span><br><span class="line">            x = fail[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">Init</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">if</span> (!n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, wrd[i] + <span class="number">1</span>);</span><br><span class="line">            lwrd = <span class="built_in">strlen</span>(wrd[i] + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">Insert</span>(wrd[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">GetFail</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, txt + <span class="number">1</span>);</span><br><span class="line">        ltxt = <span class="built_in">strlen</span>(txt + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">Work</span>();</span><br><span class="line">        <span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mat[ndidx[i]] &gt; mx) &#123;</span><br><span class="line">                mx = mat[ndidx[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, mx);</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mat[ndidx[i]] == mx) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, wrd[i] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个字符串只算一次的 <code>Work</code> 函数。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ltxt; ++i) &#123;</span><br><span class="line">        j = son[j][txt[i] - <span class="number">97</span>];</span><br><span class="line">        <span class="keyword">int</span> k = j;</span><br><span class="line">        <span class="keyword">while</span> (cnt[k] &amp;&amp; k) &#123;</span><br><span class="line">            ans += cnt[k];</span><br><span class="line">            cnt[k] = <span class="number">0</span>;</span><br><span class="line">            k = fail[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cdq解三维偏序</title>
      <link href="/1970/01/01/TemLib/Cdq%E8%A7%A3%E4%B8%89%E7%BB%B4%E5%81%8F%E5%BA%8F/"/>
      <url>/1970/01/01/TemLib/Cdq%E8%A7%A3%E4%B8%89%E7%BB%B4%E5%81%8F%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="P3810-【模板】三维偏序（陌上花开）"><a href="#P3810-【模板】三维偏序（陌上花开）" class="headerlink" title="P3810 【模板】三维偏序（陌上花开）"></a><a href="https://www.luogu.com.cn/problem/P3810">P3810 【模板】三维偏序（陌上花开）</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXk = <span class="number">2e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> top, t[MAXk + <span class="number">10</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; (-x))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (p &lt;= top) &#123;</span><br><span class="line">        t[p] += v;</span><br><span class="line">        p += <span class="built_in">lowbit</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EvaSum</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        ans += t[p];</span><br><span class="line">        p -= <span class="built_in">lowbit</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ele</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b, c, cnt, ans;</span><br><span class="line">&#125;eletmp[MAXn + <span class="number">10</span>], ele[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpc</span><span class="params">(Ele x, Ele y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.c == y.c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x.b == y.b) &#123;</span><br><span class="line">            <span class="keyword">return</span> x.a &lt; y.a;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> x.b &lt; y.b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x.c &lt; y.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpb</span><span class="params">(Ele x, Ele y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.b == y.b) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.a &lt; y.a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x.b &lt; y.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cdq</span>(l, mid); <span class="built_in">cdq</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> j = l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= r; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= mid &amp;&amp; ele[i].b &gt;= ele[j].b) &#123;</span><br><span class="line">            <span class="built_in">Add</span>(ele[j].a, ele[j].cnt);</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        ele[i].ans += <span class="built_in">EvaSum</span>(ele[i].a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; j; ++i) &#123;</span><br><span class="line">        <span class="built_in">Add</span>(ele[i].a, -ele[i].cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">inplace_merge</span>(ele + l, ele + <span class="number">1</span> + mid, ele + <span class="number">1</span> + r, cmpb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[MAXn + <span class="number">10</span>], m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k);</span><br><span class="line">    top = k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(eletmp[i].a), <span class="built_in">read</span>(eletmp[i].b), <span class="built_in">read</span>(eletmp[i].c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(eletmp + <span class="number">1</span>, eletmp + <span class="number">1</span> + n, cmpc);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        ++j;</span><br><span class="line">        <span class="keyword">if</span> (eletmp[i].a != eletmp[i + <span class="number">1</span>].a || </span><br><span class="line">            eletmp[i].b != eletmp[i + <span class="number">1</span>].b || </span><br><span class="line">            eletmp[i].c != eletmp[i + <span class="number">1</span>].c) &#123;</span><br><span class="line">            ++m;</span><br><span class="line">            ele[m].a = eletmp[i].a;</span><br><span class="line">            ele[m].b = eletmp[i].b;</span><br><span class="line">            ele[m].c = eletmp[i].c;</span><br><span class="line">            ele[m].cnt = j;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cdq</span>(<span class="number">1</span>, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        ans[ele[i].ans + ele[i].cnt - <span class="number">1</span>] += ele[i].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cyaron模板</title>
      <link href="/1970/01/01/TemLib/Cyaron%E6%A8%A1%E6%9D%BF/"/>
      <url>/1970/01/01/TemLib/Cyaron%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>推荐一款不错的数据生成器：CYaRon，一个基于Python的测试数据生成库。能够生成一部分信息竞赛中需要的数据，操作简单，易入门。</p><p><a href="https://github.com/luogu-dev/cyaron">项目地址</a></p><h3 id="部署及基本语法"><a href="#部署及基本语法" class="headerlink" title="部署及基本语法"></a>部署及基本语法</h3><p>详见 <a href="https://github.com/luogu-dev/cyaron/wiki">luogu 官方文档</a>。</p><h3 id="常用模板"><a href="#常用模板" class="headerlink" title="常用模板"></a>常用模板</h3><ol><li><p>数据生成</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cyaron <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">_n = ati([<span class="number">1</span>, <span class="number">7</span>, <span class="number">50</span>, <span class="number">1E4</span>])</span><br><span class="line">_m = ati([<span class="number">1</span>, <span class="number">11</span>, <span class="number">100</span>, <span class="number">1E4</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">    io = IO(file_prefix = <span class="string">&quot;name&quot;</span>, data_id = i)</span><br><span class="line"></span><br><span class="line">    n = _n[i]</span><br><span class="line">    m = _m[i]</span><br><span class="line">    s = randint(<span class="number">1</span>, n)</span><br><span class="line">    t = randint(<span class="number">1</span>, n)</span><br><span class="line">    graph = Graph.graph(n, m, weight_limit = <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    io.input_writeln(n, m, s, t)</span><br><span class="line">    io.input_writeln(graph)</span><br><span class="line">    io.output_gen(<span class="string">&quot;std&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>对拍</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cyaron <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Case:&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">    iostd = IO(<span class="string">&quot;name.in&quot;</span>, <span class="string">&quot;name.stdout&quot;</span>)</span><br><span class="line">    iotest = IO(<span class="string">&quot;name.in&quot;</span>, <span class="string">&quot;name.testout&quot;</span>)</span><br><span class="line"></span><br><span class="line">    n = randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    m = randint(n - <span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">    s = randint(<span class="number">1</span>, n)</span><br><span class="line">    t = randint(<span class="number">1</span>, n)</span><br><span class="line">    graph = Graph.UDAG(n, m, weight_limit = <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    iostd.input_writeln(n, m, s, t)</span><br><span class="line">    iostd.input_writeln(graph.to_str(shuffle = <span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    iostd.output_gen(<span class="string">&quot;./std&quot;</span>)</span><br><span class="line">    iotest.output_gen(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line">    Compare.output(<span class="string">&quot;name.testout&quot;</span>, std = <span class="string">&quot;name.stdout&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exgcd求逆元</title>
      <link href="/1970/01/01/TemLib/Exgcd%E6%B1%82%E9%80%86%E5%85%83/"/>
      <url>/1970/01/01/TemLib/Exgcd%E6%B1%82%E9%80%86%E5%85%83/</url>
      
        <content type="html"><![CDATA[<h2 id="P3811-【模板】乘法逆元"><a href="#P3811-【模板】乘法逆元" class="headerlink" title="P3811 【模板】乘法逆元"></a><a href="https://www.luogu.com.cn/problem/P3811">P3811 【模板】乘法逆元</a></h2><p>此题不是求单个逆元的模板题，但可以用这道模板题检验这种求逆方法的正确性（没有WA）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans, k;</span><br><span class="line">    <span class="built_in">exgcd</span>(n, mod, ans, k);</span><br><span class="line">    <span class="keyword">return</span> (ans % mod + mod) % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Floyd解最小环</title>
      <link href="/1970/01/01/TemLib/Floyd%E8%A7%A3%E6%9C%80%E5%B0%8F%E7%8E%AF/"/>
      <url>/1970/01/01/TemLib/Floyd%E8%A7%A3%E6%9C%80%E5%B0%8F%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="P6175-无向图的最小环问题"><a href="#P6175-无向图的最小环问题" class="headerlink" title="P6175 无向图的最小环问题"></a><a href="https://www.luogu.com.cn/problem/P6175">P6175 无向图的最小环问题</a></h2><pre><code class="lang-cpp">#include&lt;bits/stdc++.h&gt;using namespace std;const int MAXn = 1e2;const int INF = 0x20202020;template &lt;typename T&gt; inline void read(T &amp;a) &#123;    register char c;while (c = getchar(), c &lt; &#39;0&#39; || c &gt; &#39;9&#39;);register T x(c - &#39;0&#39;);while (c = getchar(), c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;) &#123;x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + (c ^ 48);&#125;a = x;  &#125;template &lt;typename T, typename ...Argv&gt;inline void read(T &amp;n, Argv &amp;...argv) &#123;    read(n), read(argv...);&#125;int n, m, ans = INF;int wei[MAXn + 10][MAXn + 10], dis[MAXn + 10][MAXn + 10];signed main() &#123;    read(n, m);    memset(wei, 0x20, sizeof(wei));    memset(dis, 0x20, sizeof(dis));    for (int i = 1; i &lt;= n; ++i) &#123;        wei[i][i] = dis[i][i] = 0;    &#125;    for (int i = 1, u, v, w; i &lt;= m; ++i) &#123;        read(u, v, w);        wei[u][v] = wei[v][u] = dis[u][v] = dis[v][u] = min(dis[u][v], w);    &#125;    for (int k = 1; k &lt;= n; ++k) &#123;        for (int i = 1; i &lt;= n; ++i) &#123;            for (int j = 1; j &lt;= n; ++j) &#123;                if (i == j || j == k || k == i) continue;                ans = min(ans, wei[i][k] + wei[k][j] + dis[j][i]);            &#125;        &#125;        for (int i = 1; i &lt;= n; ++i) &#123;            for (int j = 1; j &lt;= n; ++j) &#123;                dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);            &#125;        &#125;    &#125;    if (ans == INF) &#123;        printf(&quot;No solution.\n&quot;);    &#125; else &#123;        printf(&quot;%d\n&quot;, ans);    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gcd Lcm</title>
      <link href="/1970/01/01/TemLib/Gcd%20Lcm/"/>
      <url>/1970/01/01/TemLib/Gcd%20Lcm/</url>
      
        <content type="html"><![CDATA[<h2 id="P1029-NOIP2001-普及组-最大公约数和最小公倍数问题"><a href="#P1029-NOIP2001-普及组-最大公约数和最小公倍数问题" class="headerlink" title="P1029 [NOIP2001 普及组] 最大公约数和最小公倍数问题"></a><a href="https://www.luogu.com.cn/problem/P1029">P1029 [NOIP2001 普及组] 最大公约数和最小公倍数问题</a></h2><h4 id="1-最大公约数-gcd"><a href="#1-最大公约数-gcd" class="headerlink" title="1. 最大公约数(gcd)"></a>1. 最大公约数(gcd)</h4><ol><li>辗转相除法</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">return</span> b ? <span class="title">gcd</span><span class="params">(b, a % b)</span> : a;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>更相减损术</li></ol><ul><li>带取模的</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> twice = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; b % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        a /= <span class="number">2</span>, b /= <span class="number">2</span>;</span><br><span class="line">        twice *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(a != b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">            a -= b;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            b -= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> twice * a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不带取模的</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(a != b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">            a -= b;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            b -= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-最小公倍数"><a href="#2-最小公倍数" class="headerlink" title="2. 最小公倍数"></a>2. 最小公倍数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a / <span class="built_in">gcd</span>(a, b) * b;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Johnson全源最短路</title>
      <link href="/1970/01/01/TemLib/Johnson%E5%85%A8%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
      <url>/1970/01/01/TemLib/Johnson%E5%85%A8%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P5905">P5905 【模板】Johnson 全源最短路</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">3e3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">6e3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; &amp;pq)</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; pqempty;</span><br><span class="line">    pq = pqempty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXn + <span class="number">10</span>], cntnex, nex[MAXm + MAXn + <span class="number">10</span>], from[MAXm + MAXn + <span class="number">10</span>], to[MAXm + MAXn + <span class="number">10</span>], wei[MAXm + MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    from[cntnex] = u;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">    wei[cntnex] = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> h[MAXn + <span class="number">10</span>], cntinque[MAXn + <span class="number">10</span>]; <span class="keyword">bool</span> inque[MAXn + <span class="number">10</span>]; queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Spfa</span><span class="params">(<span class="keyword">int</span> sour)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fill</span>(<span class="built_in">begin</span>(h), <span class="built_in">end</span>(h), INF);</span><br><span class="line">    h[sour] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(sour); inque[sour] = <span class="number">1</span>; ++cntinque[sour];</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>(); inque[cur] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (h[to[i]] &gt; h[cur] + wei[i]) &#123;</span><br><span class="line">                h[to[i]] = h[cur] + wei[i];</span><br><span class="line">                <span class="keyword">if</span> (!inque[to[i]]) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(to[i]); inque[to[i]] = <span class="number">1</span>; ++cntinque[to[i]];</span><br><span class="line">                    <span class="keyword">if</span> (cntinque[to[i]] &gt; n + <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dis[MAXn + <span class="number">10</span>]; <span class="keyword">bool</span> vis[MAXn + <span class="number">10</span>]; priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; pq;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> sour)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    <span class="built_in">fill</span>(<span class="built_in">begin</span>(dis), <span class="built_in">end</span>(dis), INF);</span><br><span class="line">    dis[sour] = <span class="number">0</span>;</span><br><span class="line">    pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, sour));</span><br><span class="line">    <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = pq.<span class="built_in">top</span>().second; pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[cur]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[cur] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (dis[to[i]] &gt; dis[cur] + wei[i]) &#123;</span><br><span class="line">                dis[to[i]] = dis[cur] + wei[i];</span><br><span class="line">                pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dis[to[i]], to[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(u, v, w);</span><br><span class="line">        <span class="built_in">Insert</span>(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">Insert</span>(n + <span class="number">1</span>, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Spfa</span>(n + <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntnex; ++i) &#123;</span><br><span class="line">        wei[i] = wei[i] + h[from[i]] - h[to[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">Dijkstra</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[j] == INF) &#123;</span><br><span class="line">                ans += j * INF;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += j * (dis[j] - h[i] + h[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kmp</title>
      <link href="/1970/01/01/TemLib/Kmp/"/>
      <url>/1970/01/01/TemLib/Kmp/</url>
      
        <content type="html"><![CDATA[<h2 id="P3375-【模板】KMP字符串匹配"><a href="#P3375-【模板】KMP字符串匹配" class="headerlink" title="P3375 【模板】KMP字符串匹配"></a><a href="https://www.luogu.com.cn/problem/P3375">P3375 【模板】KMP字符串匹配</a></h2><p><script type="math/tex">wrd</script>：<script type="math/tex">txt</script>：从 <script type="math/tex">1</script> 开始。</p><p><script type="math/tex">lwrd</script>：<script type="math/tex">ltxt</script>：闭区间，<script type="math/tex">[1, l]</script>。</p><p><script type="math/tex">sec_i</script>：以 <script type="math/tex">i</script> 为左端点的子串是单词串。</p><p><script type="math/tex">fail_j = k</script>：<br>文本串 <script type="math/tex">[1, k]</script> 的的后缀和整个文本串前缀最长公共部分的长度。<br>如果单词串上遍历到 <script type="math/tex">j + 1</script> 时（还未确定单词串位置 <script type="math/tex">j + 1</script> 是否能匹配成功），<script type="math/tex">fail_j = k</script> 代表保证单词串 <script type="math/tex">[1, k]</script>。<br>一定是已匹配成功的。<br>也就是说应该判断 <script type="math/tex">word_{j + 1}</script> 与 <script type="math/tex">txt_i</script> 是否相等，而非 <script type="math/tex">word_j</script>，因为<script type="math/tex">word_j</script> 之前已经匹配成功了。</p><p><img src="Kmp.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::ios;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXlwrd = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXltxt = <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> txt[MAXltxt + <span class="number">10</span>], wrd[MAXlwrd + <span class="number">10</span>]; <span class="keyword">int</span> ltxt, lwrd;</span><br><span class="line"><span class="keyword">int</span> fail[MAXlwrd + <span class="number">10</span>]; <span class="keyword">bool</span> isbegin[MAXltxt + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fail[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= lwrd; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; (wrd[j + <span class="number">1</span>] != wrd[i] || j == lwrd)) j = fail[j];</span><br><span class="line">        <span class="keyword">if</span> (wrd[j + <span class="number">1</span>] == wrd[i]) ++j;</span><br><span class="line">        fail[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ltxt; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; (wrd[j + <span class="number">1</span>] != txt[i] || j == lwrd)) j = fail[j];</span><br><span class="line">        <span class="keyword">if</span> (wrd[j + <span class="number">1</span>] == txt[i]) ++j;</span><br><span class="line">        <span class="keyword">if</span> (j == lwrd) isbegin[i - lwrd + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cin &gt;&gt; (txt + <span class="number">1</span>) &gt;&gt; (wrd + <span class="number">1</span>);</span><br><span class="line">    ltxt = <span class="built_in">strlen</span>(txt + <span class="number">1</span>); lwrd = <span class="built_in">strlen</span>(wrd + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">EvaFail</span>();</span><br><span class="line">    <span class="built_in">Solve</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ltxt; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isbegin[i]) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lwrd; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; fail[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kruskal重构树</title>
      <link href="/1970/01/01/TemLib/Kruskal%E9%87%8D%E6%9E%84%E6%A0%91/"/>
      <url>/1970/01/01/TemLib/Kruskal%E9%87%8D%E6%9E%84%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4768">Luogu P4768 [NOI2018] 归程</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExKruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">InitAdjList</span>();</span><br><span class="line">    <span class="built_in">InitDisSet</span>();</span><br><span class="line">    N = n;</span><br><span class="line">    <span class="built_in">sort</span>(eg + <span class="number">1</span>, eg + <span class="number">1</span> + m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, ancu, ancv; i &lt;= m; ++i) &#123;</span><br><span class="line">        ancu = <span class="built_in">anc</span>(eg[i].u); ancv = <span class="built_in">anc</span>(eg[i].v);</span><br><span class="line">        <span class="keyword">if</span> (ancu == ancv) <span class="keyword">continue</span>;</span><br><span class="line">        father[ancu] = father[ancv] = ++N;</span><br><span class="line">        <span class="built_in">Insert</span>(N, ancu, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">Insert</span>(N, ancv, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manacher</title>
      <link href="/1970/01/01/TemLib/Manacher/"/>
      <url>/1970/01/01/TemLib/Manacher/</url>
      
        <content type="html"><![CDATA[<h2 id="P3805-【模板】manacher-算法"><a href="#P3805-【模板】manacher-算法" class="headerlink" title="P3805 【模板】manacher 算法"></a><a href="https://www.luogu.com.cn/problem/P3805">P3805 【模板】manacher 算法</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e7</span> + <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[MAXn * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> rad[MAXn * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaRad</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="number">1</span>, r = <span class="number">0</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; r) rad[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> rad[i] = <span class="built_in">min</span>(r - i, rad[r + l - i]);</span><br><span class="line">        <span class="keyword">while</span> (i + rad[i] &lt; len &amp;&amp; i - rad[i] &gt; <span class="number">1</span> &amp;&amp; str[i + rad[i] + <span class="number">1</span>] == str[i - rad[i] - <span class="number">1</span>]) ++rad[i];</span><br><span class="line">        <span class="keyword">if</span> (i + rad[i] &gt; r) &#123;</span><br><span class="line">            r = i + rad[i];</span><br><span class="line">            l = i - rad[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> strfirst[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> len1, len2, ans;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, (strfirst + <span class="number">1</span>));</span><br><span class="line">    len1 = <span class="built_in">strlen</span>(strfirst + <span class="number">1</span>);</span><br><span class="line">    str[++len2] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len1; ++i) &#123;</span><br><span class="line">        str[++len2] = strfirst[i];</span><br><span class="line">        str[++len2] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">EvaRad</span>(len2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len2; ++i) &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, i &amp; <span class="number">1</span> ? (rad[i] &amp; (~<span class="number">1</span>)) : (rad[i] &amp; (~<span class="number">1</span>)) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Splay</title>
      <link href="/1970/01/01/TemLib/Splay/"/>
      <url>/1970/01/01/TemLib/Splay/</url>
      
        <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><ol><li><p>维护递增的中序遍历</p><p> <a href="https://www.luogu.com.cn/problem/P3369">P3369 【模板】普通平衡树</a></p></li><li><p>按题目要求维护的中序遍历（中序遍历维护序列）</p><p> <a href="https://www.luogu.com.cn/problem/P3391">P3391 【模板】文艺平衡树</a></p><p> 操作合集+Splay建树：<a href="https://www.luogu.com.cn/problem/P2042">P2042 [NOI2005] 维护数列</a></p></li><li><p>Splay 合并</p><p> <a href="https://www.luogu.com.cn/problem/P3224">P3224 [HNOI2012]永无乡</a></p></li></ol><h4 id="函数汇总"><a href="#函数汇总" class="headerlink" title="函数汇总"></a>函数汇总</h4><ol><li><p>辅助操作</p><ul><li><p>$pushup(id)$ </p></li><li><p>$pushdown(id)$</p></li><li><p>$side(id)$ </p></li><li><p>$rotate(id)$ </p></li><li><p>$splay(id, goal)$ </p></li><li><p><del>find</del>（该操作在新版本 Splay 中已被移除）</p></li></ul></li><li><p>主操作</p><ul><li><p>$EvaPre(v)$ </p></li><li><p>$EvaNex(v)$ </p></li><li><p>$Insert(v)$ </p></li><li><p>$Delete(v)$ </p></li><li><p>$ValtoRank(v)$ </p></li><li><p>$RanktoVal(rank)$ </p></li><li><p>$pushdown(id)$ </p></li><li><p>$Reverser(rank, rank)$ </p></li><li><p>$Add(rank, cnt, a_1 a_2 \cdots) Del(rank, cnt) \cdots$</p></li><li><p>$Build(cnt, a_1, a_2 \cdots)$</p></li></ul></li></ol><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> root, idxinf, idxninf;</span><br><span class="line"><span class="keyword">int</span> cntnd, son[MAXn + <span class="number">10</span>][<span class="number">2</span>], fa[MAXn + <span class="number">10</span>], siz[MAXn + <span class="number">10</span>], cnt[MAXn + <span class="number">10</span>], val[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    siz[id] = cnt[id] + siz[son[id][<span class="number">0</span>]] + siz[son[id][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">side</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> son[fa[id]][<span class="number">1</span>] == id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = fa[id], z = fa[y], sideid = <span class="built_in">side</span>(id), s = son[id][sideid ^ <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (z) &#123;son[z][<span class="built_in">side</span>(y)] = id;&#125; fa[id] = z;</span><br><span class="line">    son[y][sideid] = s; <span class="keyword">if</span> (s) &#123;fa[s] = y;&#125;</span><br><span class="line">    son[id][sideid ^ <span class="number">1</span>] = y; fa[y] = id;</span><br><span class="line">    <span class="built_in">pushup</span>(y); <span class="built_in">pushup</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> goal = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y, z;</span><br><span class="line">    <span class="keyword">while</span> (fa[id] != goal) &#123;</span><br><span class="line">        y = fa[id], z = fa[y];</span><br><span class="line">        <span class="keyword">if</span> (z != goal) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">side</span>(id) == <span class="built_in">side</span>(y)) <span class="built_in">rotate</span>(y);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!goal) root = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ValtoRank</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = root, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; val[id]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (son[id][<span class="number">0</span>]) id = son[id][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v == val[id]) &#123;</span><br><span class="line">            ans += siz[son[id][<span class="number">0</span>]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans += siz[son[id][<span class="number">0</span>]] + cnt[id];</span><br><span class="line">            <span class="keyword">if</span> (son[id][<span class="number">1</span>]) id = son[id][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(id);</span><br><span class="line">    <span class="keyword">return</span> ans + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">RanktoId</span><span class="params">(<span class="keyword">int</span> rk)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = root;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rk &lt;= siz[son[id][<span class="number">0</span>]]) &#123;</span><br><span class="line">            id = son[id][<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rk &lt;= siz[son[id][<span class="number">0</span>]] + cnt[id]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rk -= siz[son[id][<span class="number">0</span>]] + cnt[id];</span><br><span class="line">            id = son[id][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(id);</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">PreId</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = root, ans = idxninf;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val[id] &lt; v) &#123;</span><br><span class="line">            ans = val[id] &gt; val[ans] ? id : ans;</span><br><span class="line">            <span class="keyword">if</span> (son[id][<span class="number">1</span>]) id = son[id][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (son[id][<span class="number">0</span>]) id = son[id][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(id);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">NexId</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = root, ans = idxinf;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val[id] &gt; v) &#123;</span><br><span class="line">            ans = val[id] &lt; val[ans] ? id : ans;</span><br><span class="line">            <span class="keyword">if</span> (son[id][<span class="number">0</span>]) id = son[id][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (son[id][<span class="number">1</span>]) id = son[id][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(id);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = root, f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (id &amp;&amp; v != val[id]) &#123;</span><br><span class="line">        f = id;</span><br><span class="line">        id = son[id][v &gt; val[id]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">        id = ++cntnd;</span><br><span class="line">        cnt[id] = <span class="number">1</span>;</span><br><span class="line">        val[id] = v;</span><br><span class="line">        fa[id] = f;</span><br><span class="line">        <span class="keyword">if</span> (f) son[f][v &gt; val[f]] = id;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ++cnt[id];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre = <span class="built_in">PreId</span>(v), nex = <span class="built_in">NexId</span>(v);</span><br><span class="line">    <span class="built_in">splay</span>(pre), <span class="built_in">splay</span>(nex, pre);</span><br><span class="line">    <span class="keyword">int</span> tar = son[nex][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (tar) &#123;</span><br><span class="line">        --cnt[tar];</span><br><span class="line">        <span class="keyword">if</span> (cnt[tar]) &#123;</span><br><span class="line">            <span class="built_in">splay</span>(tar);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            son[nex][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Insert</span>(INF); idxinf = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Insert</span>(-INF); idxninf = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, opt, x; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt, x);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) <span class="built_in">Insert</span>(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>) <span class="built_in">Delete</span>(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">ValtoRank</span>(x) - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, val[<span class="built_in">RanktoId</span>(x + <span class="number">1</span>)]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, val[<span class="built_in">PreId</span>(x)]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">6</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, val[<span class="built_in">NexId</span>(x)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>St表</title>
      <link href="/1970/01/01/TemLib/St%E8%A1%A8/"/>
      <url>/1970/01/01/TemLib/St%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="P3865-【模板】ST-表"><a href="#P3865-【模板】ST-表" class="headerlink" title="P3865 【模板】ST 表"></a><a href="https://www.luogu.com.cn/problem/P3865">P3865 【模板】ST 表</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXlog2n = <span class="number">17</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[MAXn + <span class="number">10</span>], power[MAXlog2n + <span class="number">10</span>], st[MAXn + <span class="number">10</span>][MAXlog2n + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">double</span> ln2;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildSt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        st[i][<span class="number">0</span>] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxidx = <span class="built_in">log</span>(n) / ln2;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> idx = <span class="number">1</span>; idx &lt;= maxidx; ++idx) &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> l = n - power[idx] + <span class="number">1</span>; l; --l) &#123;</span><br><span class="line">            st[l][idx] = <span class="built_in">max</span>(st[l][idx - <span class="number">1</span>], st[l + power[idx - <span class="number">1</span>]][idx - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EvaMax</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="built_in">log</span>(r - l + <span class="number">1</span>) / ln2;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(st[l][idx], st[r - power[idx] + <span class="number">1</span>][idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ln2 = <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">    power[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MAXlog2n; ++i) &#123;</span><br><span class="line">        power[i] = power[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BuildSt</span>();</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, l, r; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(l), <span class="built_in">read</span>(r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">EvaMax</span>(l, r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Treap</title>
      <link href="/1970/01/01/TemLib/Treap/"/>
      <url>/1970/01/01/TemLib/Treap/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3369">P3369 【模板】普通平衡树</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cntnd, son[MAXn + <span class="number">10</span>][<span class="number">2</span>], siz[MAXn + <span class="number">10</span>], num[MAXn + <span class="number">10</span>], val[MAXn + <span class="number">10</span>], rd[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    siz[cur] = siz[son[cur][<span class="number">0</span>]] + siz[son[cur][<span class="number">1</span>]] + num[cur];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> &amp;cur, <span class="keyword">int</span> side)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = son[cur][side ^ <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> z = son[y][side];</span><br><span class="line">    son[cur][side ^ <span class="number">1</span>] = z;</span><br><span class="line">    son[y][side] = cur;</span><br><span class="line">    <span class="built_in">pushup</span>(cur);</span><br><span class="line">    <span class="built_in">pushup</span>(y);</span><br><span class="line">    cur = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> &amp;cur, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cur) &#123;</span><br><span class="line">        cur = ++cntnd;</span><br><span class="line">        siz[cur] = num[cur] = <span class="number">1</span>;</span><br><span class="line">        val[cur] = v;</span><br><span class="line">        rd[cur] = <span class="built_in">rand</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v == val[cur]) &#123;</span><br><span class="line">        ++siz[cur]; ++num[cur];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> side = (v &gt; val[cur]);</span><br><span class="line">        <span class="built_in">Insert</span>(son[cur][side], v);</span><br><span class="line">        <span class="keyword">if</span> (rd[son[cur][side]] &gt; rd[cur]) &#123;</span><br><span class="line">            <span class="built_in">rotate</span>(cur, side ^ <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ++siz[cur];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> &amp;cur, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cur) &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v == val[cur]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num[cur] &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            --num[cur];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!son[cur][<span class="number">0</span>] &amp;&amp; !son[cur][<span class="number">1</span>]) &#123;</span><br><span class="line">            --num[cur]; --siz[cur];</span><br><span class="line">            <span class="keyword">if</span> (!siz[cur]) cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (son[cur][<span class="number">0</span>] &amp;&amp; !son[cur][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="built_in">rotate</span>(cur, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">Delete</span>(son[cur][<span class="number">1</span>], v);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!son[cur][<span class="number">0</span>] &amp;&amp; son[cur][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="built_in">rotate</span>(cur, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">Delete</span>(son[cur][<span class="number">0</span>], v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> side = (rd[son[cur][<span class="number">0</span>]] &lt; rd[son[cur][<span class="number">1</span>]]);</span><br><span class="line">            <span class="built_in">rotate</span>(cur, side ^ <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">Delete</span>(son[cur][side ^ <span class="number">1</span>], v);</span><br><span class="line">        &#125;</span><br><span class="line">        --siz[cur];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> side = (v &gt; val[cur]);</span><br><span class="line">        <span class="built_in">Delete</span>(son[cur][side], v);</span><br><span class="line">        <span class="built_in">pushup</span>(cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">valtorank</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cur) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (v &lt; val[cur]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">valtorank</span>(son[cur][<span class="number">0</span>], v);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v &gt; val[cur]) &#123;</span><br><span class="line">        <span class="keyword">return</span> siz[son[cur][<span class="number">0</span>]] + num[cur] + <span class="built_in">valtorank</span>(son[cur][<span class="number">1</span>], v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> siz[son[cur][<span class="number">0</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ValtoRank</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">valtorank</span>(cur, v) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">RanktoVal</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> rank)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cur) <span class="keyword">return</span> -INF;</span><br><span class="line">    <span class="keyword">if</span> (rank &gt;= siz[son[cur][<span class="number">0</span>]] + <span class="number">1</span> &amp;&amp; rank &lt;= siz[son[cur][<span class="number">0</span>]] + num[cur]) &#123;</span><br><span class="line">        <span class="keyword">return</span> val[cur];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank &lt;= siz[son[cur][<span class="number">0</span>]]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">RanktoVal</span>(son[cur][<span class="number">0</span>], rank);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">RanktoVal</span>(son[cur][<span class="number">1</span>], rank - (siz[son[cur][<span class="number">0</span>]] + num[cur]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cur) <span class="keyword">return</span> -INF;</span><br><span class="line">    <span class="keyword">if</span> (val[cur] &gt;= v) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Pre</span>(son[cur][<span class="number">0</span>], v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(val[cur], <span class="built_in">Pre</span>(son[cur][<span class="number">1</span>], v));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Nex</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cur) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">if</span> (val[cur] &lt;= v) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Nex</span>(son[cur][<span class="number">1</span>], v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(val[cur], <span class="built_in">Nex</span>(son[cur][<span class="number">0</span>], v));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, root;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, opt, x; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt, x);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) <span class="built_in">Insert</span>(root, x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>) <span class="built_in">Delete</span>(root, x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">ValtoRank</span>(root, x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">RanktoVal</span>(root, x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">Pre</span>(root, x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">6</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">Nex</span>(root, x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wqs二分</title>
      <link href="/1970/01/01/TemLib/Wqs%E4%BA%8C%E5%88%86/"/>
      <url>/1970/01/01/TemLib/Wqs%E4%BA%8C%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2619">Luogu P2619 [国家集训队]Tree I</a></p><p><a href="https://www.luogu.com.cn/problem/P5633">Luogu P5633 最小度限制生成树</a></p><p><a href="https://www.luogu.com.cn/problem/CF802O">CF802O April Fools’ Problem (hard)</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">WqsDic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L = -MAXw, R = MAXw, M;</span><br><span class="line">    <span class="keyword">int</span> ans, chosea;</span><br><span class="line">    <span class="keyword">while</span> (L &lt; R) &#123;</span><br><span class="line">        M = (L + R + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Check</span>(M, ans, chosea);</span><br><span class="line">        <span class="keyword">if</span> (chosea &gt; need) &#123;</span><br><span class="line">            L = M;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chosea &lt; need) &#123;</span><br><span class="line">            R = M - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Check</span>(L, ans, chosea);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Z函数</title>
      <link href="/1970/01/01/TemLib/Z%E5%87%BD%E6%95%B0/"/>
      <url>/1970/01/01/TemLib/Z%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><del>话说这玩意和 Kmp 有啥关系要把它称为扩展 Kmp。</del></p><p><a href="https://www.luogu.com.cn/problem/P5410">P5410 【模板】Z函数</a></p><ol><li><p>一个串的 Z 函数</p><p> 因为代码中 <code>i != 1</code>，所以可以省去边界判断。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> z[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaZ</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    z[<span class="number">1</span>] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, l = <span class="number">0</span>, r = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= r) z[i] = <span class="built_in">min</span>(r - i + <span class="number">1</span>, z[i - l + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">while</span> (str[i + z[i]] == str[<span class="number">1</span> + z[i]]) ++z[i];</span><br><span class="line">        <span class="keyword">if</span> (i + z[i] - <span class="number">1</span> &gt; r) l = i, r = i + z[i] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>两个串的 Z 函数</p><p> 设文本串为 $t$，模式串为 $p$。相当于让 $s=p+\diamond+t$，求 $s$ 的 Z 函数。代码中定义了一个 Y 函数，省去了拼接操作，实际上做法是相同的，就是先求一下模式串的 Z 函数，再用一个 Y Box优化，文本串的 Y Box 和模式串的·前缀相同。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> y[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaY</span><span class="params">(<span class="keyword">char</span> *txt, <span class="keyword">char</span> *wrd, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">EvaZ</span>(wrd, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="number">0</span>, r = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= r) y[i] = <span class="built_in">min</span>(r - i + <span class="number">1</span>, z[i - l + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">while</span> (i + y[i] &lt;= n &amp;&amp; <span class="number">1</span> + y[i] &lt;= m &amp;&amp; txt[i + y[i]] == wrd[<span class="number">1</span> + y[i]]) ++y[i];</span><br><span class="line">        <span class="keyword">if</span> (i + y[i] - <span class="number">1</span> &gt; r) l = i, r = i + y[i] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自己糊的奇葩做法</p><p> 既然可以先求模式串的 Z 函数，再用 Box 优化，为什么不能先求文本串的 Z 函数，再用 Box 优化呢？于是我糊了这个奇葩做法，Luogu 是可以过的，当然最劣复杂度……我没有算，应该是非线性的，所以考试时当然不要用。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> y[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaY</span><span class="params">(<span class="keyword">char</span> *txt, <span class="keyword">char</span> *wrd, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    z[<span class="number">1</span>] = n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span> + y[<span class="number">1</span>] &lt;= n &amp;&amp; <span class="number">1</span> + y[<span class="number">1</span>] &lt;= m &amp;&amp; txt[<span class="number">1</span> + y[<span class="number">1</span>]] == wrd[<span class="number">1</span> + y[<span class="number">1</span>]]) ++y[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, l = <span class="number">0</span>, r = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= r) z[i] = <span class="built_in">min</span>(r - i + <span class="number">1</span>, z[i - l + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        y[i] = <span class="built_in">min</span>(z[i], y[i - l + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">while</span> (i + y[i] &lt;= n &amp;&amp; <span class="number">1</span> + y[i] &lt;= m &amp;&amp; txt[i + y[i]] == wrd[<span class="number">1</span> + y[i]]) ++y[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (txt[i + z[i]] == txt[<span class="number">1</span> + z[i]]) ++z[i];</span><br><span class="line">        <span class="keyword">if</span> (i + z[i] - <span class="number">1</span> &gt; r) l = i, r = i + z[i] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三分</title>
      <link href="/1970/01/01/TemLib/%E4%B8%89%E5%88%86/"/>
      <url>/1970/01/01/TemLib/%E4%B8%89%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="P3382-【模板】三分法"><a href="#P3382-【模板】三分法" class="headerlink" title="P3382 【模板】三分法"></a><a href="https://www.luogu.com.cn/problem/P3382">P3382 【模板】三分法</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">13</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> l, r, a[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = n; ~i; --i) &#123;</span><br><span class="line">        ans = ans * x + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ThreeDiv</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r - l &lt; EPS) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">f</span>(mid - EPS) &gt; <span class="built_in">f</span>(mid + EPS)) &#123;</span><br><span class="line">        r = mid;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ThreeDiv</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lf%lf&quot;</span>, &amp;n, &amp;l, &amp;r);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = n; ~i; --i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ThreeDiv</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.5lf\n&quot;</span>, l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分</title>
      <link href="/1970/01/01/TemLib/%E4%BA%8C%E5%88%86/"/>
      <url>/1970/01/01/TemLib/%E4%BA%8C%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h4 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h4><ol><li><p>$mid$ 取 $l+r$ 还是 $l+r+1$。</p></li><li><p>“ $=$ “ 的话应该算那种情况。</p></li></ol><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>);<span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;<span class="keyword">register</span> T x = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, x, arr[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">()</span> </span>&#123;<span class="comment">//大于等于中最小的(lower_bound)</span></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt;= x) &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">b</span><span class="params">()</span> </span>&#123;<span class="comment">//大于中最小的(upper_bound)</span></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; x) &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">()</span> </span>&#123;<span class="comment">//小于中最大的</span></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt;= x) &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">d</span><span class="params">()</span> </span>&#123;<span class="comment">//小于等于中最大的</span></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; x) &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>, <span class="built_in">a</span>(), <span class="built_in">b</span>(), <span class="built_in">c</span>(), <span class="built_in">d</span>());</span><br><span class="line">    <span class="comment">// printf(&quot;%d %d\n&quot;, int(lower_bound(arr + 1, arr + 1 + n, x) - arr), int(upper_bound(arr + 1, arr + 1 + n, x) - arr));</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/08/10/%E4%BA%8C%E5%88%86/%E4%BA%8C%E5%88%86.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主席树</title>
      <link href="/1970/01/01/TemLib/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
      <url>/1970/01/01/TemLib/%E4%B8%BB%E5%B8%AD%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3834">Luogu P3834【模板】可持久化线段树 2（主席树）</a></p><h4 id="1-普通主席树"><a href="#1-普通主席树" class="headerlink" title="1. 普通主席树"></a>1. 普通主席树</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::map;</span><br><span class="line"><span class="keyword">using</span> std::sort;</span><br><span class="line"><span class="keyword">using</span> std::unique;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">2e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXlogn = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">2e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXnd = MAXn * <span class="number">4</span> + MAXm * MAXlogn;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXroot = MAXm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>);<span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;<span class="keyword">register</span> T x = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;n, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cntnd, ls[MAXnd + <span class="number">10</span>], rs[MAXnd + <span class="number">10</span>], sum[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntroot, root[MAXroot + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> end[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    sum[id] = sum[ls[id]] + sum[rs[id]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Build0</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = ++cntnd;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        end[id] = l;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        ls[id] = <span class="built_in">Build0</span>(l, mid);</span><br><span class="line">        rs[id] = <span class="built_in">Build0</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BuildUseArr</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = ++cntnd;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        end[id] = l;</span><br><span class="line">        sum[id] = a[l];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        ls[id] = <span class="built_in">BuildUseArr</span>(l, mid, a);</span><br><span class="line">        rs[id] = <span class="built_in">BuildUseArr</span>(mid + <span class="number">1</span>, r, a);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> verid, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = ++cntnd;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        end[id] = l;</span><br><span class="line">        sum[id] = sum[verid] + k;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= mid) &#123;</span><br><span class="line">            ls[id] = <span class="built_in">Insert</span>(ls[verid], l, mid, p, k);</span><br><span class="line">            rs[id] = rs[verid];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ls[id] = ls[verid];</span><br><span class="line">            rs[id] = <span class="built_in">Insert</span>(rs[verid], mid + <span class="number">1</span>, r, p, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mapdown; <span class="keyword">int</span> cntmap, mapup[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> n1, n2, m, a[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> lid, <span class="keyword">int</span> rid, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (end[lid]) &#123;</span><br><span class="line">        <span class="keyword">return</span> mapup[end[lid]];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= sum[ls[rid]] - sum[ls[lid]]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Query</span>(ls[lid], ls[rid], k);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Query</span>(rs[lid], rs[rid], k - (sum[ls[rid]] - sum[ls[lid]]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n1, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n1; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">        mapup[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(mapup + <span class="number">1</span>, mapup + <span class="number">1</span> + n1);</span><br><span class="line">    n2 = <span class="built_in">unique</span>(mapup + <span class="number">1</span>, mapup + <span class="number">1</span> + n1) - mapup - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n2; ++i) &#123;</span><br><span class="line">        mapdown[mapup[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    cntroot = <span class="number">-1</span>;</span><br><span class="line">    root[++cntroot] = <span class="built_in">Build0</span>(<span class="number">1</span>, n2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n1; ++i) &#123;</span><br><span class="line">        ++cntroot;</span><br><span class="line">        root[cntroot] = <span class="built_in">Insert</span>(root[cntroot - <span class="number">1</span>], <span class="number">1</span>, n2, mapdown[a[i]], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l, r, k; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(l, r, k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">Query</span>(root[l - <span class="number">1</span>], root[r], k));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-动态开点主席树"><a href="#2-动态开点主席树" class="headerlink" title="2. 动态开点主席树"></a>2. 动态开点主席树</h4><p>注释部分是二分答案的 $O(nlog^2n)$ 查询做法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cntroot, root[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntnd, rs[MAXnd + <span class="number">10</span>], ls[MAXnd + <span class="number">10</span>], le[MAXnd + <span class="number">10</span>], ri[MAXnd + <span class="number">10</span>], sum[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    sum[id] = sum[ls[id]] + sum[rs[id]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NewAdd</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    le[id] = l, ri[id] = r;</span><br><span class="line">    sum[id] = v;</span><br><span class="line">    <span class="keyword">if</span> (le[id] == ri[id]) &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= mid) <span class="built_in">NewAdd</span>(ls[id] = ++cntnd, le[id], mid, p, v);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">NewAdd</span>(rs[id] = ++cntnd, mid + <span class="number">1</span>, ri[id], p, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">VerAdd</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> verid, <span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    le[id] = le[verid], ri[id] = ri[verid];</span><br><span class="line">    sum[id] = sum[verid] + v;</span><br><span class="line">    <span class="keyword">if</span> (le[id] == ri[id]) &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= mid) &#123;</span><br><span class="line">            rs[id] = rs[verid];</span><br><span class="line">            <span class="keyword">if</span> (ls[verid]) <span class="built_in">VerAdd</span>(ls[id] = ++cntnd, ls[verid], p, v);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">NewAdd</span>(ls[id] = ++cntnd, le[id], mid, p, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ls[id] = ls[verid];</span><br><span class="line">            <span class="keyword">if</span> (rs[verid]) <span class="built_in">VerAdd</span>(rs[id] = ++cntnd, rs[verid], p, v);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">NewAdd</span>(rs[id] = ++cntnd, mid + <span class="number">1</span>, ri[id], p, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SumSec</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!id) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) ans += <span class="built_in">SumSec</span>(ls[id], l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) ans += <span class="built_in">SumSec</span>(rs[id], l, r);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// int Query(int L, int R, int rk) &#123;</span></span><br><span class="line"><span class="comment">// int l = -MAXa, r = MAXa, mid;</span></span><br><span class="line"><span class="comment">// while (l &lt; r) &#123;</span></span><br><span class="line"><span class="comment">// mid = (l + r) &gt;&gt; 1;</span></span><br><span class="line"><span class="comment">// if (SumSec(root[R], -MAXa, mid) - SumSec(root[L - 1], -MAXa, mid) &gt;= rk) &#123;</span></span><br><span class="line"><span class="comment">// r = mid;</span></span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">// l = mid + 1;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// return l;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> lid, <span class="keyword">int</span> rid, <span class="keyword">int</span> rk)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[rid] == ri[rid]) &#123;</span><br><span class="line">        <span class="keyword">return</span> le[rid];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rk &lt;= sum[ls[rid]] - sum[ls[lid]]) <span class="keyword">return</span> <span class="built_in">Query</span>(ls[lid], ls[rid], rk);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Query</span>(rs[lid], rs[rid], rk - (sum[ls[rid]] - sum[ls[lid]]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, a; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a);</span><br><span class="line">        ++cntroot;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) <span class="built_in">NewAdd</span>(root[cntroot] = ++cntnd, -MAXa, MAXa, a, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">VerAdd</span>(root[cntroot] = ++cntnd, root[cntroot - <span class="number">1</span>], a, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, L, R, rk; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(L, R, rk);</span><br><span class="line">        <span class="comment">// printf(&quot;%d\n&quot;, Query(L, R, rk));</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">Query</span>(root[L - <span class="number">1</span>], root[R], rk));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>严格次小生成树</title>
      <link href="/1970/01/01/TemLib/%E4%B8%A5%E6%A0%BC%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/1970/01/01/TemLib/%E4%B8%A5%E6%A0%BC%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="P4180-BJWC2010-严格次小生成树"><a href="#P4180-BJWC2010-严格次小生成树" class="headerlink" title="P4180 [BJWC2010]严格次小生成树"></a><a href="https://www.luogu.com.cn/problem/P4180">P4180 [BJWC2010]严格次小生成树</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">3e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>);<span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;<span class="keyword">register</span> T x = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, root = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> head[MAXn + <span class="number">10</span>], cntnex, nex[MAXm * <span class="number">2</span> + <span class="number">10</span>], to[MAXm * <span class="number">2</span> + <span class="number">10</span>], wei[MAXm * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">    wei[cntnex] = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fat[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">anc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fat[x] = fat[x] == x ? x : <span class="built_in">anc</span>(fat[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">anc</span>(x) != <span class="built_in">anc</span>(y)) &#123;</span><br><span class="line">        fat[<span class="built_in">anc</span>(x)] = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SameAnc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">anc</span>(x) == <span class="built_in">anc</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        fat[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="built_in">Edge</span>():<span class="built_in">u</span>(<span class="number">0</span>), <span class="built_in">v</span>(<span class="number">0</span>), <span class="built_in">w</span>(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="keyword">int</span> u_, <span class="keyword">int</span> v_, <span class="keyword">int</span> w_):<span class="built_in">u</span>(u_), <span class="built_in">v</span>(v_), <span class="built_in">w</span>(w_)&#123;&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Edge x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;w &lt; x.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edge[MAXm + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> intree[MAXm + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(edge + <span class="number">1</span>, edge + <span class="number">1</span> + m);</span><br><span class="line">    <span class="built_in">Init</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">SameAnc</span>(edge[i].u, edge[i].v)) &#123;</span><br><span class="line">            ans += edge[i].w;</span><br><span class="line">            <span class="built_in">Merge</span>(edge[i].u, edge[i].v);</span><br><span class="line">            intree[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergemax</span><span class="params">(<span class="keyword">int</span> &amp;ansmax, <span class="keyword">int</span> &amp;anscmx, <span class="keyword">int</span> max1, <span class="keyword">int</span> cmx1, <span class="keyword">int</span> max2, <span class="keyword">int</span> cmx2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (max1 &gt; max2) &#123;</span><br><span class="line">        ansmax = max1;</span><br><span class="line">        anscmx = <span class="built_in">max</span>(max2, cmx1);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (max1 &lt; max2) &#123;</span><br><span class="line">        ansmax = max2;</span><br><span class="line">        anscmx = <span class="built_in">max</span>(max1, cmx2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ansmax = max1;</span><br><span class="line">        anscmx = <span class="built_in">max</span>(cmx1, cmx2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> le[MAXn * <span class="number">4</span> + <span class="number">10</span>], ri[MAXn * <span class="number">4</span> + <span class="number">10</span>], maxx[MAXn * <span class="number">4</span> + <span class="number">10</span>], cmax[MAXn * <span class="number">4</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">mergemax</span>(maxx[id], cmax[id], maxx[id &lt;&lt; <span class="number">1</span>], cmax[id &lt;&lt; <span class="number">1</span>], maxx[(id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>], cmax[(id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildUseArr</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">    le[id] = l;</span><br><span class="line">    ri[id] = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        maxx[id] = a[l];</span><br><span class="line">        cmax[id] = -INF;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">BuildUseArr</span>(id &lt;&lt; <span class="number">1</span>, l, mid, a);</span><br><span class="line">        <span class="built_in">BuildUseArr</span>((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, r, a);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="title">Eva</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(maxx[id], cmax[id]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid &amp;&amp; r &gt; mid) &#123;</span><br><span class="line">            <span class="keyword">int</span> ansmax, anscmx;</span><br><span class="line">            pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; left, right;</span><br><span class="line">            left = <span class="built_in">Eva</span>(id &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">            right = <span class="built_in">Eva</span>((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, r);</span><br><span class="line">            <span class="built_in">mergemax</span>(ansmax, anscmx, left.first, left.second, right.first, right.second);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">make_pair</span>(ansmax, anscmx);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l &lt;= mid) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Eva</span>(id &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Eva</span>((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ndwei[MAXn + <span class="number">10</span>], idxwei[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> fa[MAXn + <span class="number">10</span>], dep[MAXn + <span class="number">10</span>], siz[MAXn + <span class="number">10</span>], hson[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs1</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    dep[cur] = dep[fa[cur]] + <span class="number">1</span>;</span><br><span class="line">    siz[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mx = -INF;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!intree[i &gt;&gt; <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (to[i] == fa[cur]) <span class="keyword">continue</span>;</span><br><span class="line">        fa[to[i]] = cur;</span><br><span class="line">        ndwei[to[i]] = wei[i];</span><br><span class="line">        <span class="built_in">Dfs1</span>(to[i]);</span><br><span class="line">        siz[cur] += siz[to[i]];</span><br><span class="line">        <span class="keyword">if</span> (siz[to[i]] &gt; mx) &#123;</span><br><span class="line">            mx = siz[to[i]];</span><br><span class="line">            hson[cur] = to[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cntdfs, nddfs[MAXn + <span class="number">10</span>], idxdfs[MAXn + <span class="number">10</span>], top[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs2</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    nddfs[cur] = ++cntdfs;</span><br><span class="line">    idxdfs[cntdfs] = cur;</span><br><span class="line">    <span class="keyword">if</span> (hson[cur]) &#123;</span><br><span class="line">        top[hson[cur]] = top[cur];</span><br><span class="line">        <span class="built_in">Dfs2</span>(hson[cur]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!intree[i &gt;&gt; <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (to[i] == hson[cur] || to[i] == fa[cur]) <span class="keyword">continue</span>;</span><br><span class="line">        top[to[i]] = to[i];</span><br><span class="line">        <span class="built_in">Dfs2</span>(to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="title">TreePathEva</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ansmax = -INF, anscmx = -INF;</span><br><span class="line">    <span class="keyword">int</span> tmpansmax, tmpanscmx;</span><br><span class="line">    pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmp;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &gt; dep[top[y]]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = <span class="built_in">Eva</span>(<span class="number">1</span>, nddfs[top[y]], nddfs[y]);</span><br><span class="line">        <span class="built_in">mergemax</span>(tmpansmax, tmpanscmx, ansmax, anscmx, tmp.first, tmp.second);</span><br><span class="line">        ansmax = tmpansmax;</span><br><span class="line">        anscmx = tmpanscmx;</span><br><span class="line">        y = fa[top[y]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(ansmax, anscmx);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tmp = <span class="built_in">Eva</span>(<span class="number">1</span>, nddfs[x] + <span class="number">1</span>, nddfs[y]);</span><br><span class="line">        <span class="built_in">mergemax</span>(tmpansmax, tmpanscmx, ansmax, anscmx, tmp.first, tmp.second);</span><br><span class="line">        ansmax = tmpansmax;</span><br><span class="line">        anscmx = tmpanscmx;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(ansmax, anscmx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans, diff = INF;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cntnex = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v), <span class="built_in">read</span>(w);</span><br><span class="line">        <span class="keyword">if</span> (u == v) &#123;</span><br><span class="line">            ++tmp;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        edge[i - tmp] = <span class="built_in">Edge</span>(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    m -= tmp;</span><br><span class="line">    ans = <span class="built_in">Kruskal</span>();</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">Insert</span>(edge[i].u, edge[i].v, edge[i].w);</span><br><span class="line">        <span class="built_in">Insert</span>(edge[i].v, edge[i].u, edge[i].w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs1</span>(root);</span><br><span class="line">    <span class="built_in">Dfs2</span>(root);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        idxwei[i] = ndwei[idxdfs[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BuildUseArr</span>(<span class="number">1</span>, <span class="number">1</span>, n, idxwei);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!intree[i]) &#123;</span><br><span class="line">            pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmp = <span class="built_in">TreePathEva</span>(edge[i].u, edge[i].v);</span><br><span class="line">            <span class="keyword">if</span> (tmp.first == edge[i].w) &#123;</span><br><span class="line">                diff = <span class="built_in">min</span>(diff, edge[i].w - tmp.second);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                diff = <span class="built_in">min</span>(diff, edge[i].w - tmp.first);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans + diff);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国剩余定理(crt)</title>
      <link href="/1970/01/01/TemLib/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86(crt)/"/>
      <url>/1970/01/01/TemLib/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86(crt)/</url>
      
        <content type="html"><![CDATA[<h2 id="P1495-【模板】中国剩余定理-CRT-曹冲养猪"><a href="#P1495-【模板】中国剩余定理-CRT-曹冲养猪" class="headerlink" title="P1495 【模板】中国剩余定理(CRT)/曹冲养猪"></a><a href="https://www.luogu.com.cn/problem/P1495">P1495 【模板】中国剩余定理(CRT)/曹冲养猪</a></h2><p>$x=\sum\limits_{i=1}^{n}a_i\times M_i\times M^{-1}_i(\operatorname{mod}~m_i)~\operatorname{mod}m$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans, k;</span><br><span class="line">    <span class="built_in">exgcd</span>(n, mod, ans, k);</span><br><span class="line">    <span class="keyword">return</span> (ans % mod + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[MAXn + <span class="number">10</span>], m[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Crt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, mulm = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        mulm = mulm * m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> M = mulm / m[i];</span><br><span class="line">        ans = (ans + ((a[i] * M) % mulm * <span class="built_in">inv</span>(M, m[i])) % mulm) % mulm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(m[i]), <span class="built_in">read</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">Crt</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分图</title>
      <link href="/1970/01/01/TemLib/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
      <url>/1970/01/01/TemLib/%E4%BA%8C%E5%88%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3386">Luogu P3386 【模板】二分图最大匹配</a></p><p><a href="https://www.luogu.com.cn/problem/P1350">Luogu P1350 车的放置</a></p><p><a href="https://www.luogu.com.cn/problem/P6062">Luogu P6062 USACO05JAN Muddy Fields G</a></p><p><a href="https://www.luogu.com.cn/problem/P3355">Luogu P3355 骑士共存问题</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> match[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[cur]) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//</span></span><br><span class="line">    vis[cur] = <span class="number">1</span>;<span class="comment">// 如果只是求最大匹配，不求最小点覆盖和最大独立集可以不用给左部点打标记，可以不加这两行。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[to[i]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!match[to[i]] || <span class="built_in">Dfs</span>(match[to[i]])) &#123;</span><br><span class="line">            match[to[i]] = cur;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans1, ans2, mincover[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntleft; ++i) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Dfs</span>(i)) ++ans1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = cntleft + <span class="number">1</span>, top = cntleft + cntright; i &lt;= top; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (match[i]) match[match[i]] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntleft; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!match[i]) <span class="built_in">Dfs</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntleft; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) mincover[++ans2] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = cntleft + <span class="number">1</span>, top = cntleft + cntright; i &lt;= top; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[i]) mincover[++ans2] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ans1 == ans2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉堆</title>
      <link href="/1970/01/01/TemLib/%E4%BA%8C%E5%8F%89%E5%A0%86/"/>
      <url>/1970/01/01/TemLib/%E4%BA%8C%E5%8F%89%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<h2 id="P3378-【模板】堆"><a href="#P3378-【模板】堆" class="headerlink" title="P3378 【模板】堆"></a><a href="https://www.luogu.com.cn/problem/P3378">P3378 【模板】堆</a></h2><h4 id="大根堆"><a href="#大根堆" class="headerlink" title="大根堆"></a>大根堆</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c&gt;<span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> s = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;</span><br><span class="line">        s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> heap[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> heapn;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Up</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f = p / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (heap[p] &lt; heap[f]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(heap[p], heap[f]);</span><br><span class="line">            p = f;</span><br><span class="line">            f /= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Down</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = p * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (s &lt;= heapn) &#123;</span><br><span class="line">        <span class="keyword">if</span> (heap[s] &gt; heap[s + <span class="number">1</span>] &amp;&amp; s &lt; heapn) &#123;</span><br><span class="line">            s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (heap[s] &lt; heap[p]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(heap[s], heap[p]);</span><br><span class="line">            p = s;</span><br><span class="line">            s *= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    heap[++heapn] = x;</span><br><span class="line">    <span class="built_in">Up</span>(heapn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    heap[p] = heap[heapn--];</span><br><span class="line">    <span class="built_in">Up</span>(p);</span><br><span class="line">    <span class="built_in">Down</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PopRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    heap[<span class="number">1</span>] = heap[heapn--];</span><br><span class="line">    <span class="built_in">Down</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> heap[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opt;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        opt = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (opt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">Insert</span>(<span class="built_in">read</span>());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">GetRoot</span>());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">PopRoot</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小根堆"><a href="#小根堆" class="headerlink" title="小根堆"></a>小根堆</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c&gt;<span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> s = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;</span><br><span class="line">        s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> heap[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> heapn;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Up</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f = p / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (heap[p] &gt; heap[f]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(heap[p], heap[f]);</span><br><span class="line">            p = f;</span><br><span class="line">            f /= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Down</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = p * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (s &lt;= heapn) &#123;</span><br><span class="line">        <span class="keyword">if</span> (heap[s] &lt; heap[s + <span class="number">1</span>] &amp;&amp; s &lt; heapn) &#123;</span><br><span class="line">            s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (heap[s] &gt; heap[p]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(heap[s], heap[p]);</span><br><span class="line">            p = s;</span><br><span class="line">            s *= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    heap[++heapn] = x;</span><br><span class="line">    <span class="built_in">Up</span>(heapn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    heap[p] = heap[heapn--];</span><br><span class="line">    <span class="built_in">Up</span>(p);</span><br><span class="line">    <span class="built_in">Down</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PopRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    heap[<span class="number">1</span>] = heap[heapn--];</span><br><span class="line">    <span class="built_in">Down</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> heap[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Insert</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Insert</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">Insert</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Insert</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">Insert</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="built_in">Insert</span>(<span class="number">25</span>);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">GetRoot</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">PopRoot</span>();</span><br><span class="line">    cout &lt;&lt; <span class="built_in">GetRoot</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树</title>
      <link href="/1970/01/01/TemLib/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>/1970/01/01/TemLib/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="P5076-【深基16-例7】普通二叉树（简化版）"><a href="#P5076-【深基16-例7】普通二叉树（简化版）" class="headerlink" title="P5076 【深基16.例7】普通二叉树（简化版）"></a><a href="https://www.luogu.com.cn/problem/P5076">P5076 【深基16.例7】普通二叉树（简化版）</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483647</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;<span class="keyword">register</span> T s = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;&#125;a = f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, siz, cnt, val;</span><br><span class="line">&#125;;</span><br><span class="line">Node nd[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    ++nd[id].siz;</span><br><span class="line">    <span class="keyword">if</span> (nd[id].val == val) &#123;</span><br><span class="line">        ++nd[id].cnt;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nd[id].val &lt; val) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!nd[id].r) &#123;</span><br><span class="line">            nd[++cnt].val = val;</span><br><span class="line">            nd[id].r = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Insert</span>(nd[id].r, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!nd[id].l) &#123;</span><br><span class="line">            nd[++cnt].val = val;</span><br><span class="line">            nd[id].l = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Insert</span>(nd[id].l, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ValtoRank</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nd[id].val == val) &#123;</span><br><span class="line">        <span class="keyword">return</span> nd[nd[id].l].siz + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nd[id].val &lt; val) &#123;</span><br><span class="line">        <span class="keyword">return</span> nd[nd[id].l].siz + nd[id].cnt + <span class="built_in">ValtoRank</span>(nd[id].r, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ValtoRank</span>(nd[id].l, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RanktoVal</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> rank)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-123456789</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rank &lt;= nd[nd[id].l].siz) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">RanktoVal</span>(nd[id].l, rank);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank &gt; nd[nd[id].l].siz + nd[id].cnt) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">RanktoVal</span>(nd[id].r, rank - nd[nd[id].l].siz - nd[id].cnt);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nd[id].val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EvaPreVal</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">        <span class="keyword">return</span> -INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nd[id].val &gt;= val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">EvaPreVal</span>(nd[id].l, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(nd[id].val, <span class="built_in">EvaPreVal</span>(nd[id].r, val));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EvaNexVal</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">        <span class="keyword">return</span> INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nd[id].val &lt;= val) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">EvaNexVal</span>(nd[id].r, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(nd[id].val, <span class="built_in">EvaNexVal</span>(nd[id].l, val));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> root = <span class="number">1</span>, n, opt, x;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    nd[<span class="number">1</span>].cnt = <span class="number">1</span>; nd[<span class="number">1</span>].l = <span class="number">2</span>; nd[<span class="number">1</span>].siz = <span class="number">2</span>; nd[<span class="number">1</span>].val = INF;</span><br><span class="line">    nd[<span class="number">2</span>].cnt = <span class="number">1</span>; nd[<span class="number">2</span>].siz = <span class="number">1</span>; nd[<span class="number">2</span>].val = -INF;</span><br><span class="line">    cnt += <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt), <span class="built_in">read</span>(x);</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (opt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">ValtoRank</span>(root, x) - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">RanktoVal</span>(root, x + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">EvaPreVal</span>(root, x));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">EvaNexVal</span>(root, x));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">Insert</span>(root, x);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维凸包</title>
      <link href="/1970/01/01/TemLib/%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/"/>
      <url>/1970/01/01/TemLib/%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2742">P2742 USACO5.1 圈奶牛Fencing the Cows /【模板】二维凸包</a></p><p>省略号部分见 <a href="https://rsdbkhusky.github.io/1970/01/01/TemLib/%E4%BA%8C%E7%BB%B4%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/">二维计算几何模板</a>。</p><h3 id="x-y-排序法"><a href="#x-y-排序法" class="headerlink" title="x-y 排序法"></a>x-y 排序法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point sec) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cmp</span>(x, sec.x)) &#123;</span><br><span class="line">            <span class="keyword">return</span> x &lt; sec.x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> y &lt; sec.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> top, bottom, stk[MAXn * <span class="number">2</span> + <span class="number">10</span>]; <span class="keyword">bool</span> instk[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaConv</span><span class="params">(Point p[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(p + <span class="number">1</span>, p + <span class="number">1</span> + n);</span><br><span class="line">    bottom = <span class="number">1</span>; top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (top &gt; bottom &amp;&amp; (p[stk[top]] - p[stk[top - <span class="number">1</span>]]) % (p[i] - p[stk[top]]) &lt;= <span class="number">0</span>) instk[stk[top--]] = <span class="number">0</span>;</span><br><span class="line">        stk[++top] = i;</span><br><span class="line">        instk[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bottom = top;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (instk[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (top &gt; bottom &amp;&amp; (p[stk[top]] - p[stk[top - <span class="number">1</span>]]) % (p[i] - p[stk[top]]) &lt;= <span class="number">0</span>) instk[stk[top--]] = <span class="number">0</span>;</span><br><span class="line">        stk[++top] = i;</span><br><span class="line">        instk[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (top &gt; bottom &amp;&amp; (p[stk[top]] - p[stk[top - <span class="number">1</span>]]) % (p[<span class="number">1</span>] - p[stk[top]]) &lt;= <span class="number">0</span>) instk[stk[top--]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维树状数组</title>
      <link href="/1970/01/01/TemLib/%E4%BA%8C%E7%BB%B4%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
      <url>/1970/01/01/TemLib/%E4%BA%8C%E7%BB%B4%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> t[MAXn + <span class="number">10</span>][MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k, <span class="keyword">int</span> topx, <span class="keyword">int</span> topy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= topx; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt;= topy; j += <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">            t[i][j] += k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = y; j; j -= <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">            ans += t[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Sec</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Sum</span>(x2, y2) - <span class="built_in">Sum</span>(x1 - <span class="number">1</span>, y2) - <span class="built_in">Sum</span>(x2, y1 - <span class="number">1</span>) + <span class="built_in">Sum</span>(x1 - <span class="number">1</span>, y1 - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维计算几何</title>
      <link href="/1970/01/01/TemLib/%E4%BA%8C%E7%BB%B4%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
      <url>/1970/01/01/TemLib/%E4%BA%8C%E7%BB%B4%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF = <span class="number">1e15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> SQRT2 = <span class="built_in">sqrt</span>(<span class="number">2</span>);</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sig</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; EPS) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; -EPS) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a - b &gt; EPS) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a - b &lt; -EPS) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">Point</span><span class="params">()</span>: x(<span class="number">0.0</span>), y(<span class="number">0.0</span>)&#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">Point</span><span class="params">(<span class="keyword">double</span> _x, <span class="keyword">double</span> _y)</span>: x(_x), y(_y)&#123;</span>&#125;</span><br><span class="line">    <span class="keyword">inline</span> Point <span class="keyword">operator</span>+(Point sec) &#123;<span class="keyword">return</span> Point&#123;x: x + sec.x, y: y + sec.y&#125;;&#125;</span><br><span class="line">    <span class="keyword">inline</span> Point <span class="keyword">operator</span>-(Point sec) &#123;<span class="keyword">return</span> Point&#123;x: x - sec.x, y: y - sec.y&#125;;&#125;</span><br><span class="line">    <span class="keyword">inline</span> Point <span class="keyword">operator</span>&gt;&gt;(Point sec) &#123;<span class="keyword">return</span> Point&#123;x: sec.x - x, y: sec.y - y&#125;;&#125;</span><br><span class="line">    <span class="keyword">inline</span> Point <span class="keyword">operator</span>*(<span class="keyword">double</span> a) &#123;<span class="keyword">return</span> Point&#123;x: x * a, y: y * a&#125;;&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">double</span> <span class="keyword">operator</span>*(Point sec) &#123;<span class="keyword">return</span> x * sec.x + y * sec.y;&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">double</span> <span class="keyword">operator</span>%(Point sec) &#123;<span class="keyword">return</span> x * sec.y - sec.x * y;&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(Point sec) &#123;<span class="keyword">return</span> x == sec.x &amp;&amp; y == sec.y;&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point sec) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cmp</span>(x, sec.x) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> y &lt; sec.y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x &lt; sec.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">length</span><span class="params">(Point a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(a * a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">(Point a, Point b, Point c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt;&gt; b) % (a &gt;&gt; c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">proj</span><span class="params">(Point a, Point b, Point c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((a &gt;&gt; b) * (a &gt;&gt; c)) / <span class="built_in">length</span>(a &gt;&gt; b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">angle</span><span class="params">(Point a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">atan2</span>(a.y, a.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">angle</span><span class="params">(Point a, Point b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>((a * b) / <span class="built_in">length</span>(a) / <span class="built_in">length</span>(b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Point <span class="title">rotate</span><span class="params">(Point a, <span class="keyword">double</span> angle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> cs = <span class="built_in">cos</span>(angle), sn = <span class="built_in">sin</span>(angle);</span><br><span class="line">    <span class="keyword">return</span> Point&#123;x: cs * a.x - sn * a.y, y: sn * a.x + cs * a.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">poi_on_str</span><span class="params">(Point a, Point b, Point c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sig</span>((a &gt;&gt; c) % (b &gt;&gt; c)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">poi_dist_str</span><span class="params">(Point a, Point b, Point c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>((a &gt;&gt; b) % (a &gt;&gt; c)) / <span class="built_in">length</span>(a &gt;&gt; b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">poi_dist_seg</span><span class="params">(Point a, Point b, Point c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == b) <span class="keyword">return</span> <span class="built_in">length</span>(a &gt;&gt; c);</span><br><span class="line">    <span class="keyword">if</span> ((a &gt;&gt; b) * (a &gt;&gt; c) &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">length</span>(a &gt;&gt; c);</span><br><span class="line">    <span class="keyword">if</span> ((b &gt;&gt; a) * (b &gt;&gt; c) &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">length</span>(b &gt;&gt; c);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">poi_dist_str</span>(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">poi_on_seg</span><span class="params">(Point a, Point b, Point c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sig</span>(<span class="built_in">poi_dist_seg</span>(a, b, c)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Point <span class="title">poi_proj_str</span><span class="params">(Point a, Point b, Point c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + (a &gt;&gt; b) * (((a &gt;&gt; b) * (a &gt;&gt; c)) / ((a &gt;&gt; b) * (a &gt;&gt; b)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">seg_on_seg</span><span class="params">(Point a, Point b, Point c, Point d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">poi_on_seg</span>(c, d, a) || <span class="built_in">poi_on_seg</span>(c, d, b) || <span class="built_in">poi_on_seg</span>(a, b, c) || <span class="built_in">poi_on_seg</span>(a, b, d)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sig</span>((a &gt;&gt; b) % (a &gt;&gt; c)) * <span class="built_in">sig</span>((a &gt;&gt; b) % (a &gt;&gt; d)) &lt; <span class="number">0</span> &amp;&amp; <span class="built_in">sig</span>((c &gt;&gt; d) % (c &gt;&gt; a)) * <span class="built_in">sig</span>((c &gt;&gt; d) % (c &gt;&gt; b)) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Point <span class="title">str_int_str</span><span class="params">(Point a, Point b, Point c, Point d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + ((a &gt;&gt; b) * (((c &gt;&gt; d) % (c &gt;&gt; a)) / ((a &gt;&gt; b) % (c &gt;&gt; d))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">pol_area</span><span class="params">(Point point[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="function">Point <span class="title">zero</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        ans += (zero &gt;&gt; point[i]) % (zero &gt;&gt; point[i + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans += (zero &gt;&gt; point[n]) % (zero &gt;&gt; point[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> ans / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">poi_on_pol</span><span class="params">(Point a, Point b[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="function">Point <span class="title">far</span><span class="params">(PI * <span class="number">1e6</span>, SQRT2 * <span class="number">1e6</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">poi_on_seg</span>(b[i], b[i + <span class="number">1</span>], a)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">seg_on_seg</span>(b[i], b[i + <span class="number">1</span>], a, far)) ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">poi_on_seg</span>(b[n], b[<span class="number">1</span>], a)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">seg_on_seg</span>(b[n], b[<span class="number">1</span>], a, far)) ++cnt;</span><br><span class="line">    <span class="keyword">if</span> (cnt &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维费用背包</title>
      <link href="/1970/01/01/TemLib/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85/"/>
      <url>/1970/01/01/TemLib/%E4%BA%8C%E7%BB%B4%E8%B4%B9%E7%94%A8%E8%83%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="P1855-榨取kkksc03"><a href="#P1855-榨取kkksc03" class="headerlink" title="P1855 榨取kkksc03"></a><a href="https://www.luogu.com.cn/problem/P1855">P1855 榨取kkksc03</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXW1 = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXW2 = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, W1, W2;</span><br><span class="line"><span class="keyword">int</span> d[MAXW1 + <span class="number">10</span>][MAXW2 + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c&gt;<span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> s = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>())s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">eva_maxV</span><span class="params">(<span class="keyword">int</span> W1, <span class="keyword">int</span> W2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = -INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= W1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= W2; j++)  ans = <span class="built_in">max</span>(ans, d[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    W1 = <span class="built_in">read</span>();</span><br><span class="line">    W2 = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> v, w1, w2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v = <span class="number">1</span>;</span><br><span class="line">        w1 = <span class="built_in">read</span>();</span><br><span class="line">        w2 = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = W1; j &gt;= w1; j--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = W2; k &gt;= w2; k--) d[j][k] = <span class="built_in">max</span>(d[j][k], d[j - w1][k - w2] + v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">eva_maxV</span>(W1, W2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分块</title>
      <link href="/1970/01/01/TemLib/%E5%88%86%E5%9D%97/"/>
      <url>/1970/01/01/TemLib/%E5%88%86%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="P2357-守墓人"><a href="#P2357-守墓人" class="headerlink" title="P2357 守墓人"></a><a href="https://www.luogu.com.cn/problem/P2357">P2357 守墓人</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">2e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXsqrtn = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>);<span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;<span class="keyword">register</span> T x = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[MAXn + <span class="number">10</span>], inpart[MAXn + <span class="number">10</span>], length;</span><br><span class="line"><span class="keyword">int</span> cntpart, sum[MAXsqrtn + <span class="number">10</span>], add[MAXsqrtn + <span class="number">10</span>], le[MAXsqrtn + <span class="number">10</span>], ri[MAXsqrtn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildUseArray</span><span class="params">(<span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">    length = cntpart = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="number">1</span>, r = cntpart; i &lt;= cntpart; ++i) &#123;</span><br><span class="line">        le[i] = l;</span><br><span class="line">        ri[i] = r;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> j = l; j &lt;= r; ++j) &#123;</span><br><span class="line">            sum[i] += a[j];</span><br><span class="line">            inpart[j] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        l = r + <span class="number">1</span>;</span><br><span class="line">        r += length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ri[cntpart] &lt; n) &#123;</span><br><span class="line">        ++cntpart;</span><br><span class="line">        le[cntpart] = ri[cntpart - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        ri[cntpart] = n;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = le[cntpart]; i &lt;= ri[cntpart]; ++i) &#123;</span><br><span class="line">            sum[cntpart] += a[i];</span><br><span class="line">            inpart[i] = cntpart;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (inpart[l] == inpart[r]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">            a[i] += k;</span><br><span class="line">        &#125;</span><br><span class="line">        sum[inpart[l]] += k * (r - l + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = l; i &lt;= ri[inpart[l]]; ++i) &#123;</span><br><span class="line">            a[i] += k;</span><br><span class="line">        &#125;</span><br><span class="line">        sum[inpart[l]] += k * (ri[inpart[l]] - l + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = le[inpart[r]]; i &lt;= r; ++i) &#123;</span><br><span class="line">            a[i] += k;</span><br><span class="line">        &#125;</span><br><span class="line">        sum[inpart[r]] += k * (r - le[inpart[r]] + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = inpart[l] + <span class="number">1</span>; i &lt; inpart[r]; ++i) &#123;</span><br><span class="line">            add[i] += k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EvaSum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (inpart[l] == inpart[r]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">            ans += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ans += add[inpart[l]] * (r - l + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = l; i &lt;= ri[inpart[l]]; ++i) &#123;</span><br><span class="line">            ans += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ans += add[inpart[l]] * (ri[inpart[l]] - l + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = le[inpart[r]]; i &lt;= r; ++i) &#123;</span><br><span class="line">            ans += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ans += add[inpart[r]] * (r - le[inpart[r]] + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = inpart[l] + <span class="number">1</span>; i &lt; inpart[r]; ++i) &#123;</span><br><span class="line">            ans += sum[i] + add[i] * length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BuildUseArray</span>(a);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, opt, x, y, z; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt);</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (opt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">read</span>(x), <span class="built_in">read</span>(y), <span class="built_in">read</span>(z);</span><br><span class="line">            <span class="built_in">Add</span>(x, y, z);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            a[<span class="number">1</span>] += x;</span><br><span class="line">            sum[<span class="number">1</span>] += x;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            a[<span class="number">1</span>] -= x;</span><br><span class="line">            sum[<span class="number">1</span>] -= x;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="built_in">read</span>(x), <span class="built_in">read</span>(y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">EvaSum</span>(x, y));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, a[<span class="number">1</span>] + add[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本来我是用线段树的板题来测我的分块的，但是后来又用这道题测了一下，发现始终过不了，调了很久才发现 “<code>EvaSum</code> -&gt; <code>if (inpart[l] == inpart[r])</code> -&gt; <code>ans += add[inpart[l]] * (r - l + 1);</code>” 这句没有写。但是线段树的板题竟然过了，就离谱，这就是我不推荐用线段树板题测分块的原因。<del>（不是为了水题）</del>。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分组背包</title>
      <link href="/1970/01/01/TemLib/%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/"/>
      <url>/1970/01/01/TemLib/%E5%88%86%E7%BB%84%E8%83%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="P1757-通天之分组背包"><a href="#P1757-通天之分组背包" class="headerlink" title="P1757 通天之分组背包"></a><a href="https://www.luogu.com.cn/problem/P1757">P1757 通天之分组背包</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXW = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, W;</span><br><span class="line"><span class="keyword">int</span> v[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> w[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> team[MAXn + <span class="number">10</span>][MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> d[MAXW + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> s = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;</span><br><span class="line">        s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put_in</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    W = <span class="built_in">read</span>();</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> teamid;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        w[i] = <span class="built_in">read</span>();</span><br><span class="line">        v[i] = <span class="built_in">read</span>();</span><br><span class="line">        teamid = <span class="built_in">read</span>();</span><br><span class="line">        team[teamid][++team[teamid][<span class="number">0</span>]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> v[], <span class="keyword">int</span> w[], <span class="keyword">int</span> W)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MAXn; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (team[i][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = W; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= team[i][<span class="number">0</span>]; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j &gt;= w[team[i][k]])    d[j] = <span class="built_in">max</span>(d[j], d[j - w[team[i][k]]] + v[team[i][k]]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">eva_maxV</span><span class="params">(<span class="keyword">int</span> d[], <span class="keyword">int</span> W)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = -INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= W; i++)   ans = <span class="built_in">max</span>(ans, d[i]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">put_in</span>();</span><br><span class="line">    <span class="built_in">rec</span>(v, w, W);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">eva_maxV</span>(d, W);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀积法求逆元</title>
      <link href="/1970/01/01/TemLib/%E5%89%8D%E7%BC%80%E7%A7%AF%E6%B3%95%E6%B1%82%E9%80%86%E5%85%83/"/>
      <url>/1970/01/01/TemLib/%E5%89%8D%E7%BC%80%E7%A7%AF%E6%B3%95%E6%B1%82%E9%80%86%E5%85%83/</url>
      
        <content type="html"><![CDATA[<h2 id="P5431-【模板】乘法逆元-2"><a href="#P5431-【模板】乘法逆元-2" class="headerlink" title="P5431 【模板】乘法逆元 2"></a><a href="https://www.luogu.com.cn/problem/P5431">P5431 【模板】乘法逆元 2</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">5e6</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">&#x27;0&#x27;</span>;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = ans * x % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        x = x * x % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> inv = <span class="built_in">power</span>(n, mod - <span class="number">2</span>, mod);</span><br><span class="line">    <span class="keyword">return</span> (inv % mod + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, p, k, a[MAXn + <span class="number">10</span>], pi[MAXn + <span class="number">10</span>], mi[MAXn + <span class="number">10</span>], invv, ans;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(p), <span class="built_in">read</span>(k);</span><br><span class="line">    pi[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">        pi[i] = (pi[i - <span class="number">1</span>] * a[i]) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    mi[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        mi[i] = (mi[i - <span class="number">1</span>] * k) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    invv = <span class="built_in">inv</span>(pi[n], p);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">        ans = (ans + mi[i] * (invv * pi[i - <span class="number">1</span>] % p)) % p;</span><br><span class="line">        invv = (invv * a[i]) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>割点 &amp; 点双连通分量</title>
      <link href="/1970/01/01/TemLib/%E5%89%B2%E7%82%B9%20&amp;%20%E7%82%B9%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
      <url>/1970/01/01/TemLib/%E5%89%B2%E7%82%B9%20&amp;%20%E7%82%B9%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="P3388-【模板】割点（割顶）"><a href="#P3388-【模板】割点（割顶）" class="headerlink" title="P3388 【模板】割点（割顶）"></a><a href="https://www.luogu.com.cn/problem/P3388">P3388 【模板】割点（割顶）</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cntdfs, dfs[MAXnd + <span class="number">10</span>], low[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntcut; bitset&lt;MAXnd + 10&gt; iscut;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    dfs[cur] = low[cur] = ++cntdfs;</span><br><span class="line">    <span class="keyword">int</span> times = <span class="number">0</span>; <span class="keyword">bool</span> havcnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dfs[to[i]]) &#123;</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], dfs[to[i]]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(to[i], root);</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], low[to[i]]);</span><br><span class="line">            <span class="keyword">if</span> (!havcnt) &#123;</span><br><span class="line">                <span class="keyword">if</span> (low[to[i]] &gt;= dfs[cur]) &#123;</span><br><span class="line">                    ++times;</span><br><span class="line">                    <span class="keyword">if</span> (cur != root || times &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                        havcnt = <span class="number">1</span>;</span><br><span class="line">                        ++cntcut;</span><br><span class="line">                        iscut[cur] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfs[i]) &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(i, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T103492-【模板】点双连通分量"><a href="#T103492-【模板】点双连通分量" class="headerlink" title="T103492 【模板】点双连通分量"></a><a href="https://www.luogu.com.cn/problem/T103492">T103492 【模板】点双连通分量</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cntdfs, dfs[MAXnd + <span class="number">10</span>], low[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntdcc; vector&lt;<span class="keyword">int</span>&gt; dcc[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> top, stk[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    dfs[cur] = low[cur] = ++cntdfs;</span><br><span class="line">    <span class="keyword">if</span> (!head[cur]) &#123;</span><br><span class="line">        dcc[++cntdcc].<span class="built_in">push_back</span>(cur);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    stk[++top] = cur;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dfs[to[i]]) &#123;</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], dfs[to[i]]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(to[i]);</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], low[to[i]]);</span><br><span class="line">            <span class="keyword">if</span> (low[to[i]] &gt;= dfs[cur]) &#123;</span><br><span class="line">                ++cntdcc;</span><br><span class="line">                <span class="keyword">int</span> x;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    x = stk[top--];</span><br><span class="line">                    dcc[cntdcc].<span class="built_in">push_back</span>(x);</span><br><span class="line">                &#125; <span class="keyword">while</span> (x != to[i]);</span><br><span class="line">                dcc[cntdcc].<span class="built_in">push_back</span>(cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfs[i]) &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>割边 &amp; 边双连通分量</title>
      <link href="/1970/01/01/TemLib/%E5%89%B2%E8%BE%B9%20&amp;%20%E8%BE%B9%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
      <url>/1970/01/01/TemLib/%E5%89%B2%E8%BE%B9%20&amp;%20%E8%BE%B9%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="T103481-【模板】割边"><a href="#T103481-【模板】割边" class="headerlink" title="T103481 【模板】割边"></a><a href="https://www.luogu.com.cn/problem/T103481">T103481 【模板】割边</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cntdfs, dfs[MAXnd + <span class="number">10</span>], low[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntcut; bitset&lt;MAXeg * 2 + 10&gt; iscut;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fromedge)</span> </span>&#123;</span><br><span class="line">    dfs[cur] = low[cur] = ++cntdfs;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == (fromedge ^ <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (dfs[to[i]]) &#123;</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], dfs[to[i]]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(to[i], i);</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], low[to[i]]);</span><br><span class="line">            <span class="keyword">if</span> (low[to[i]] &gt; dfs[cur]) &#123;</span><br><span class="line">                ++cntcut;</span><br><span class="line">                iscut[i] = iscut[i ^ <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfs[i]) &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T103489-【模板】边双连通分量"><a href="#T103489-【模板】边双连通分量" class="headerlink" title="T103489 【模板】边双连通分量"></a><a href="https://www.luogu.com.cn/problem/T103489">T103489 【模板】边双连通分量</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cntdfs, dfs[MAXnd + <span class="number">10</span>], low[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntcut; bitset&lt;MAXeg * 2 + 10&gt; iscut;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fromedge)</span> </span>&#123;</span><br><span class="line">    dfs[cur] = low[cur] = ++cntdfs;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == (fromedge ^ <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (dfs[to[i]]) &#123;</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], dfs[to[i]]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(to[i], i);</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], low[to[i]]);</span><br><span class="line">            <span class="keyword">if</span> (low[to[i]] &gt; dfs[cur]) &#123;</span><br><span class="line">                ++cntcut;</span><br><span class="line">                iscut[i] = iscut[i ^ <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cntdcc, indcc[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaDcc</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    indcc[cur] = cntdcc;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (indcc[to[i]] || iscut[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">EvaDcc</span>(to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfs[i]) &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!indcc[i]) &#123;</span><br><span class="line">            ++cntdcc;</span><br><span class="line">            <span class="built_in">EvaDcc</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只让输出边双的个数，<strong>桥数+不连通的图数</strong>也是正确答案。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态dp</title>
      <link href="/1970/01/01/TemLib/%E5%8A%A8%E6%80%81dp/"/>
      <url>/1970/01/01/TemLib/%E5%8A%A8%E6%80%81dp/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4719">Luogu P4719 【模板】”动态 DP”&amp;动态树分治</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Mat g[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    g[x].a[<span class="number">1</span>][<span class="number">0</span>] -= val[x];</span><br><span class="line">    g[x].a[<span class="number">1</span>][<span class="number">0</span>] += v;</span><br><span class="line">    <span class="keyword">while</span> (fa[top[x]]) &#123;</span><br><span class="line">        Mat last = <span class="built_in">query</span>(<span class="number">1</span>, nddfs[top[x]], ed[x]);</span><br><span class="line">        <span class="built_in">modifyRepPoint</span>(<span class="number">1</span>, nddfs[x], g[x]);</span><br><span class="line">        Mat now = <span class="built_in">query</span>(<span class="number">1</span>, nddfs[top[x]], ed[x]);</span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">        g[x].a[<span class="number">0</span>][<span class="number">0</span>] -= <span class="built_in">max</span>(last.a[<span class="number">0</span>][<span class="number">0</span>], last.a[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        g[x].a[<span class="number">0</span>][<span class="number">0</span>] += <span class="built_in">max</span>(now.a[<span class="number">0</span>][<span class="number">0</span>], now.a[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        g[x].a[<span class="number">0</span>][<span class="number">1</span>] = g[x].a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        g[x].a[<span class="number">1</span>][<span class="number">0</span>] -= last.a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        g[x].a[<span class="number">1</span>][<span class="number">0</span>] += now.a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">modifyRepPoint</span>(<span class="number">1</span>, nddfs[x], g[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态二维凸包</title>
      <link href="/1970/01/01/TemLib/%E5%8A%A8%E6%80%81%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/"/>
      <url>/1970/01/01/TemLib/%E5%8A%A8%E6%80%81%E4%BA%8C%E7%BB%B4%E5%87%B8%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF70D">CF70D Professor’s task</a></p><p>省略号部分见 <a href="https://rsdbkhusky.github.io/1970/01/01/TemLib/%E4%BA%8C%E7%BB%B4%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/">二维计算几何模板</a>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y, ang;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point sec) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ang &lt; sec.ang;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> set&lt;Point&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">set&lt;Point&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> it <span class="title">Prec</span><span class="params">(it x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == <span class="built_in">begin</span>(s) ? --<span class="built_in">end</span>(s) : --x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> it <span class="title">Nex</span><span class="params">(it x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (++x) == <span class="built_in">end</span>(s) ? <span class="built_in">begin</span>(s) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">    pair&lt;it, <span class="keyword">bool</span>&gt; pr = s.<span class="built_in">insert</span>(p);</span><br><span class="line">    <span class="keyword">if</span> (pr.second == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">size</span>() &lt;= <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line">    it cur = pr.first;</span><br><span class="line">    it prec = <span class="built_in">Prec</span>(cur), nex = <span class="built_in">Nex</span>(cur);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sig</span>((*cur - *prec) % (*nex - *cur)) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        s.<span class="built_in">erase</span>(cur);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    it i = <span class="built_in">Prec</span>(cur), j = <span class="built_in">Prec</span>(i);</span><br><span class="line">    <span class="keyword">while</span> (s.<span class="built_in">size</span>() &gt; <span class="number">3</span> &amp;&amp; <span class="built_in">sig</span>((*i - *j) % (*cur - *i)) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        s.<span class="built_in">erase</span>(i);</span><br><span class="line">        i = j; j = <span class="built_in">Prec</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">    i = <span class="built_in">Nex</span>(cur), j = <span class="built_in">Nex</span>(i);</span><br><span class="line">    <span class="keyword">while</span> (s.<span class="built_in">size</span>() &gt; <span class="number">3</span> &amp;&amp; <span class="built_in">sig</span>((*i - *cur) % (*j - *i)) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        s.<span class="built_in">erase</span>(i);</span><br><span class="line">        i = j; j = <span class="built_in">Nex</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Query</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">    it nex = s.<span class="built_in">lower_bound</span>(p);</span><br><span class="line">    <span class="keyword">if</span> (nex == <span class="built_in">end</span>(s)) nex = <span class="built_in">begin</span>(s);</span><br><span class="line">    it prec = <span class="built_in">Prec</span>(nex);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sig</span>((p - *prec) % (*nex - p)) &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    Point o&#123;x: PI / <span class="number">100.0</span>, y: SQRT2 / <span class="number">100.0</span>, ang: <span class="number">0.0</span>&#125;, ori[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, opt, x, y; i &lt;= <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt, x, y);</span><br><span class="line">        o.x += x; o.y += y;</span><br><span class="line">        ori[i].x = x * <span class="number">3</span>; ori[i].y = y * <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        ori[i].ang = <span class="built_in">angle</span>(o, ori[i]);</span><br><span class="line">        <span class="built_in">Solve</span>(ori[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Point p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>, opt, x, y; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt, x, y);</span><br><span class="line">        p.x = x * <span class="number">3</span>; p.y = y * <span class="number">3</span>;</span><br><span class="line">        p.ang = <span class="built_in">angle</span>(o, p);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">Solve</span>(p);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="built_in">Query</span>(p) ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Point o&#123;x: PI / 100.0, y: SQRT2 / 100.0, ang: 0.0&#125;</code> 这里使用了<strong>原点偏移法</strong>，给了原点一个无理数增量，这是为了避免极角相等的点的情况，如果不加这句可能会 ${\color{red}\mathrm{W!A}}$，还有一种<strong>不建议使用</strong>的避免 ${\color{red}\mathrm{W!A}}$ 的方法是<strong>增加排序关键字法</strong>，将代码第四行的函数改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point sec) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">cmp</span>(ang, sec.ang)) &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; sec.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ang &lt; sec.ang;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态开点线段树</title>
      <link href="/1970/01/01/TemLib/%E5%8A%A8%E6%80%81%E5%BC%80%E7%82%B9%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/1970/01/01/TemLib/%E5%8A%A8%E6%80%81%E5%BC%80%E7%82%B9%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="P5459-BJOI2016-回转寿司"><a href="#P5459-BJOI2016-回转寿司" class="headerlink" title="P5459 [BJOI2016]回转寿司"></a><a href="https://www.luogu.com.cn/problem/P5459">P5459 [BJOI2016]回转寿司</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> std::map;</span><br><span class="line"><span class="keyword">using</span> std::sort;</span><br><span class="line"><span class="keyword">using</span> std::unique;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXa = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXsuma = MAXn * MAXa;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXlogsuma = <span class="number">34</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXnd = MAXn * MAXlogsuma * <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>);<span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;<span class="keyword">register</span> T x = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;n, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cntnd, ls[MAXnd + <span class="number">10</span>], rs[MAXnd + <span class="number">10</span>], le[MAXnd + <span class="number">10</span>], ri[MAXnd + <span class="number">10</span>], sum[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    sum[id] = sum[ls[id]] + sum[rs[id]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">AddNew</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = ++cntnd;</span><br><span class="line">    le[id] = l;</span><br><span class="line">    ri[id] = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        sum[id] = k;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= mid) &#123;</span><br><span class="line">            ls[id] = <span class="built_in">AddNew</span>(l, mid, p, k);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rs[id] = <span class="built_in">AddNew</span>(mid + <span class="number">1</span>, r, p, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddOld</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] == ri[id]) &#123;</span><br><span class="line">        sum[id] += k;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= mid) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ls[id]) &#123;</span><br><span class="line">                <span class="built_in">AddOld</span>(ls[id], p, k);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ls[id] = <span class="built_in">AddNew</span>(le[id], mid, p, k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs[id]) &#123;</span><br><span class="line">                <span class="built_in">AddOld</span>(rs[id], p, k);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rs[id] = <span class="built_in">AddNew</span>(mid + <span class="number">1</span>, ri[id], p, k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sec</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!id) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) ans += <span class="built_in">Sec</span>(ls[id], l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) ans += <span class="built_in">Sec</span>(rs[id], l, r);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n1, n2, L, R, a[MAXn + <span class="number">10</span>], suma[MAXn + <span class="number">10</span>], ans;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n1, L, R);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n1; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">        suma[i] = suma[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    ++cntnd;</span><br><span class="line">    le[cntnd] = -MAXsuma; ri[cntnd] = MAXsuma; sum[cntnd] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">AddOld</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n1; ++i) &#123;</span><br><span class="line">        ans += <span class="built_in">Sec</span>(<span class="number">1</span>, suma[i] - R, suma[i] - L);</span><br><span class="line">        <span class="built_in">AddOld</span>(<span class="number">1</span>, suma[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态树(lct)</title>
      <link href="/1970/01/01/TemLib/%E5%8A%A8%E6%80%81%E6%A0%91(lct)/"/>
      <url>/1970/01/01/TemLib/%E5%8A%A8%E6%80%81%E6%A0%91(lct)/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[MAXn + <span class="number">10</span>], son[MAXn + <span class="number">10</span>][<span class="number">2</span>], val[MAXn + <span class="number">10</span>], xsum[MAXn + <span class="number">10</span>], rev[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">side</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id == son[fa[id]][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> son[fa[id]][<span class="number">0</span>] != id &amp;&amp; son[fa[id]][<span class="number">1</span>] != id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    xsum[id] = xsum[son[id][<span class="number">0</span>]] ^ val[id] ^ xsum[son[id][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putrev</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(son[id][<span class="number">0</span>], son[id][<span class="number">1</span>]);</span><br><span class="line">    rev[id] ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rev[id]) &#123;</span><br><span class="line">        <span class="built_in">putrev</span>(son[id][<span class="number">0</span>]), <span class="built_in">putrev</span>(son[id][<span class="number">1</span>]);</span><br><span class="line">        rev[id] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = fa[id], z = fa[y], sideid = <span class="built_in">side</span>(id), s = son[id][sideid ^ <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isroot</span>(y)) &#123;son[z][<span class="built_in">side</span>(y)] = id;&#125; fa[id] = z;</span><br><span class="line">    son[y][sideid] = s; <span class="keyword">if</span> (s) &#123;fa[s] = y;&#125;</span><br><span class="line">    son[id][sideid ^ <span class="number">1</span>] = y; fa[y] = id;</span><br><span class="line">    <span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> top, stk[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> anc = id;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        stk[++top] = anc;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isroot</span>(anc)) anc = fa[anc];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (top) <span class="built_in">pushdown</span>(stk[top--]);</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isroot</span>(id)) &#123;</span><br><span class="line">        y = fa[id];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isroot</span>(y)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">side</span>(id) == <span class="built_in">side</span>(y)) <span class="built_in">rotate</span>(y);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> backupx = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> sn = <span class="number">0</span>; x; sn = x, x = fa[x]) &#123;</span><br><span class="line">        <span class="built_in">splay</span>(x);</span><br><span class="line">        son[x][<span class="number">1</span>] = sn;</span><br><span class="line">        <span class="built_in">pushup</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(backupx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">access</span>(x);</span><br><span class="line">    <span class="built_in">putrev</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">access</span>(x);</span><br><span class="line">    <span class="keyword">int</span> rt = x;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(rt);</span><br><span class="line">        <span class="keyword">if</span> (son[rt][<span class="number">0</span>]) rt = son[rt][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(rt);</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">makeroot</span>(x);</span><br><span class="line">    <span class="built_in">access</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">makeroot</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">findroot</span>(y) != x) fa[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">makeroot</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">findroot</span>(y) == x &amp;&amp; fa[y] == x &amp;&amp; !son[y][<span class="number">0</span>]) &#123;</span><br><span class="line">        son[x][<span class="number">1</span>] = fa[y] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">pushup</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(val[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, opt, x, y; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt, x, y);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">Split</span>(x, y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, xsum[y]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">Link</span>(x, y);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">Cut</span>(x, y);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">splay</span>(x);</span><br><span class="line">            val[x] = y;</span><br><span class="line">            <span class="built_in">pushup</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>putrev</code> 和 <code>pushdown</code> 这两个函数有两个版本，先 <code>swap</code> 版（就是上面代码用的的版本）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putrev</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(son[id][<span class="number">0</span>], son[id][<span class="number">1</span>]);</span><br><span class="line">    rev[id] ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rev[id]) &#123;</span><br><span class="line">        <span class="built_in">putrev</span>(son[id][<span class="number">0</span>]), <span class="built_in">putrev</span>(son[id][<span class="number">1</span>]);</span><br><span class="line">        rev[id] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后 <code>swap</code> 版：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putrev</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    rev[id] ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rev[id]) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(son[id][<span class="number">0</span>], son[id][<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">putrev</span>(son[id][<span class="number">0</span>]), <span class="built_in">putrev</span>(son[id][<span class="number">1</span>]);</span><br><span class="line">        rev[id] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用第二个版本，那么需要保证在 splay 中从上往下操作时所有对儿子节点的操作和询问都应该在 <code>pushdown</code> 之后进行。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卢卡斯定理</title>
      <link href="/1970/01/01/TemLib/%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86/"/>
      <url>/1970/01/01/TemLib/%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="P3807-【模板】卢卡斯定理-Lucas-定理"><a href="#P3807-【模板】卢卡斯定理-Lucas-定理" class="headerlink" title="P3807 【模板】卢卡斯定理/Lucas 定理"></a><a href="https://www.luogu.com.cn/problem/P3807">P3807 【模板】卢卡斯定理/Lucas 定理</a></h2><p>$\operatorname{C}^m<em>n\operatorname{mod}p=\operatorname{C}^{m/p}</em>{n/p}\times \operatorname{C}^{m\operatorname{mod}p}_{n \operatorname{mod}p}\operatorname{mod}p$ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXC = <span class="number">1e5</span> + <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">        y -= a / b * x;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans, k;</span><br><span class="line">    <span class="built_in">exgcd</span>(x, p, ans, k);</span><br><span class="line">    <span class="keyword">return</span> (ans % p + p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fac[MAXC + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaFac</span><span class="params">(<span class="keyword">int</span> top, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        fac[i] = ((ll)fac[i - <span class="number">1</span>] * i) % p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (ll)fac[n] * <span class="built_in">inv</span>(fac[m], p) % p * <span class="built_in">inv</span>(fac[n - m], p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lucas</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (ll)<span class="built_in">Lucas</span>(n / p, m / p, p) * <span class="built_in">C</span>(n % p, m % p, p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m, p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(p);</span><br><span class="line">        <span class="built_in">EvaFac</span>(MAXC, p);</span><br><span class="line">        n += m;</span><br><span class="line">        m = n - m;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">Lucas</span>(n, m, p));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可重集全排列</title>
      <link href="/1970/01/01/TemLib/%E5%8F%AF%E9%87%8D%E9%9B%86%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>/1970/01/01/TemLib/%E5%8F%AF%E9%87%8D%E9%9B%86%E5%85%A8%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="P2518-HAOI2010-计数"><a href="#P2518-HAOI2010-计数" class="headerlink" title="P2518 [HAOI2010]计数"></a><a href="https://www.luogu.com.cn/problem/P2518">P2518 [HAOI2010]计数</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> C[MAXn + <span class="number">10</span>][MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaC</span><span class="params">(<span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>] = C[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">            C[i][j] = C[i - <span class="number">1</span>][j - <span class="number">1</span>] + C[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pmult</span><span class="params">(<span class="keyword">int</span> top, <span class="keyword">int</span> *cnt, <span class="keyword">int</span> sum = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (sum == <span class="number">-1</span>) &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">            sum += cnt[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt[i]) &#123;</span><br><span class="line">            ans *= C[sum][cnt[i]];</span><br><span class="line">            sum -= cnt[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[MAXn + <span class="number">10</span>]; <span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">int</span> sumcnt, cnt[<span class="number">11</span>], ans;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">EvaC</span>(MAXn);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str + <span class="number">1</span>);</span><br><span class="line">    len = <span class="built_in">strlen</span>(str + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(str + <span class="number">1</span>, str + <span class="number">1</span> + len);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] - <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            ++cnt[str[i] - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">            ++sumcnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = len; i; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] - <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            cnt[<span class="number">10</span>] = i - <span class="number">1</span> - sumcnt;</span><br><span class="line">            ans += <span class="built_in">Pmult</span>(<span class="number">10</span>, cnt, i - <span class="number">1</span>);</span><br><span class="line">            cnt[<span class="number">10</span>] = i - <span class="number">1</span> - (sumcnt - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt; str[i] - <span class="string">&#x27;0&#x27;</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt[j]) &#123;</span><br><span class="line">                    --cnt[j];</span><br><span class="line">                    ans += <span class="built_in">Pmult</span>(<span class="number">10</span>, cnt, i - <span class="number">1</span>);</span><br><span class="line">                    ++cnt[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            --cnt[str[i] - <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line">            --sumcnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同余最短路</title>
      <link href="/1970/01/01/TemLib/%E5%90%8C%E4%BD%99%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
      <url>/1970/01/01/TemLib/%E5%90%8C%E4%BD%99%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="P3403-跳楼机"><a href="#P3403-跳楼机" class="headerlink" title="P3403 跳楼机"></a><a href="https://www.luogu.com.cn/problem/P3403">P3403 跳楼机</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXnd = <span class="number">5e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXeg = MAXnd * MAXn;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;n, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXnd + <span class="number">10</span>], cntnex, nex[MAXeg + <span class="number">10</span>], to[MAXeg + <span class="number">10</span>], wei[MAXeg + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">    wei[cntnex] = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[MAXnd + <span class="number">10</span>]; <span class="keyword">int</span> dis[MAXnd + <span class="number">10</span>];</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> rootdis)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    dis[root] = rootdis;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, root));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.<span class="built_in">top</span>().second; q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[cur]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[cur] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[to[i]] &gt; dis[cur] + wei[i]) &#123;</span><br><span class="line">                dis[to[i]] = dis[cur] + wei[i];</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-dis[to[i]], to[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, l, r, a[MAXn + <span class="number">10</span>], ans;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, l, r);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a[<span class="number">1</span>]; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="built_in">Insert</span>(i, (i + a[j]) % a[<span class="number">1</span>], a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dijkstra</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a[<span class="number">1</span>]; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dis[i] &gt; r) <span class="keyword">continue</span>;</span><br><span class="line">        ans += (r - dis[i]) / a[<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (dis[i] &gt; l - <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        ans -= (l - <span class="number">1</span> - dis[i]) / a[<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后缀数组 &amp; Height数组</title>
      <link href="/1970/01/01/TemLib/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%20&amp;%20Height%E6%95%B0%E7%BB%84/"/>
      <url>/1970/01/01/TemLib/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%20&amp;%20Height%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/2717/">Acwing 2715. 后缀数组</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sa[MAXn + <span class="number">10</span>], rk[MAXn + <span class="number">10</span>], x[MAXn * <span class="number">2</span> + <span class="number">10</span>], y[MAXn * <span class="number">2</span> + <span class="number">10</span>], buc[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaSaRk</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ++buc[x[i] = str[i] - <span class="string">&#x27;0&#x27;</span> + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; ++i) buc[i] += buc[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) sa[buc[x[i]]--] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> half = <span class="number">1</span>; ; half &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnty = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - half + <span class="number">1</span>; i &lt;= n; ++i) y[++cnty] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) </span><br><span class="line">            <span class="keyword">if</span> (sa[i] &gt; half) y[++cnty] = sa[i] - half;</span><br><span class="line">        <span class="built_in">memset</span>(buc, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(buc));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ++buc[x[i]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; ++i) buc[i] += buc[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) sa[buc[x[y[i]]]--] = y[i];</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">        m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            x[sa[i]] = (y[sa[i]] == y[sa[i - <span class="number">1</span>]] &amp;&amp; y[sa[i] + half] == y[sa[i - <span class="number">1</span>] + half]) ? m : ++m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m == n) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        rk[sa[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ht[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaHt</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>, j; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rk[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (k) --k;</span><br><span class="line">        j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (str[i + k] == str[j + k]) ++k;</span><br><span class="line">        ht[rk[i]] = k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">EvaSaRk</span>(n, <span class="string">&#x27;z&#x27;</span> - <span class="string">&#x27;0&#x27;</span> + <span class="number">1</span>, str);</span><br><span class="line"><span class="built_in">EvaHt</span>(n, str);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后缀自动机(SAM)</title>
      <link href="/1970/01/01/TemLib/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA(SAM)/"/>
      <url>/1970/01/01/TemLib/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA(SAM)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3804">Luogu P3804 【模板】后缀自动机 (SAM)</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cntnd, last, link[MAXnd + <span class="number">10</span>], son[MAXnd + <span class="number">10</span>][<span class="number">26</span>], cntep[MAXnd + <span class="number">10</span>], mxlen[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cntnd = last = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Extend</span><span class="params">(<span class="keyword">int</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    a = c = last, b = last = ++cntnd;</span><br><span class="line">    cntep[b] = <span class="number">1</span>;</span><br><span class="line">    mxlen[b] = mxlen[a] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; c &amp;&amp; !son[c][ch]; c = link[c]) son[c][ch] = b;</span><br><span class="line">    <span class="keyword">if</span> (!c) &#123;</span><br><span class="line">        link[b] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> d = son[c][ch];</span><br><span class="line">        <span class="keyword">if</span> (mxlen[d] == mxlen[c] + <span class="number">1</span>) &#123;</span><br><span class="line">            link[b] = d;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> e = ++cntnd;</span><br><span class="line">            link[e] = link[d];</span><br><span class="line">            <span class="built_in">memcpy</span>(son[e], son[d], <span class="built_in"><span class="keyword">sizeof</span></span>(son[e]));</span><br><span class="line">            mxlen[e] = mxlen[c] + <span class="number">1</span>;</span><br><span class="line">            link[d] = link[b] = e;</span><br><span class="line">            <span class="keyword">for</span> (; c &amp;&amp; son[c][ch] == d; c = link[c]) son[c][ch] = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希</title>
      <link href="/1970/01/01/TemLib/%E5%93%88%E5%B8%8C/"/>
      <url>/1970/01/01/TemLib/%E5%93%88%E5%B8%8C/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">2333</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, num, mo;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; hash[MOD + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    mo = a % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hash[mo].<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="keyword">if</span> (hash[mo][i] == a)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    ans++;</span><br><span class="line">    hash[mo].<span class="built_in">push_back</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a), <span class="built_in">insert</span>(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文自动机(PAM)</title>
      <link href="/1970/01/01/TemLib/%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA(PAM)/"/>
      <url>/1970/01/01/TemLib/%E5%9B%9E%E6%96%87%E8%87%AA%E5%8A%A8%E6%9C%BA(PAM)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3649">Luogu P3649 [APIO2014]回文串</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cntnd, rootodd, rooteve;</span><br><span class="line"><span class="keyword">int</span> fail[MAXn + <span class="number">10</span>], son[MAXn + <span class="number">10</span>][<span class="number">26</span>], len[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    cntnd = <span class="number">2</span>; rootodd = <span class="number">1</span>; rooteve = <span class="number">2</span>;</span><br><span class="line">    len[rootodd] = <span class="number">-1</span>; len[rooteve] = <span class="number">0</span>;</span><br><span class="line">    fail[rooteve] = rootodd;</span><br><span class="line">    <span class="keyword">int</span> cur = rootodd;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i - len[cur] - <span class="number">1</span> &lt; <span class="number">1</span> || str[i - len[cur] - <span class="number">1</span>] != str[i]) cur = fail[cur];</span><br><span class="line">        <span class="keyword">if</span> (son[cur][(<span class="keyword">int</span>)str[i]] == <span class="number">0</span>) &#123;</span><br><span class="line">            son[cur][(<span class="keyword">int</span>)str[i]] = ++cntnd;</span><br><span class="line">            len[cntnd] = len[cur] + <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="keyword">if</span> (cur == rootodd) &#123;</span><br><span class="line">                x = rooteve;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                x = fail[cur];</span><br><span class="line">                <span class="keyword">while</span> (i - len[x] - <span class="number">1</span> &lt; <span class="number">1</span> || str[i - len[x] - <span class="number">1</span>] != str[i]) x = fail[x];</span><br><span class="line">                x = son[x][(<span class="keyword">int</span>)str[i]];</span><br><span class="line">            &#125;</span><br><span class="line">            cur = son[cur][(<span class="keyword">int</span>)str[i]];</span><br><span class="line">            fail[cur] = x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = son[cur][(<span class="keyword">int</span>)str[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        ++cnt[cur];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的直径 &amp; 图的绝对中心 &amp; 最小直径生成树</title>
      <link href="/1970/01/01/TemLib/%E5%9B%BE%E7%9A%84%E7%9B%B4%E5%BE%84%20&amp;%20%E5%9B%BE%E7%9A%84%E7%BB%9D%E5%AF%B9%E4%B8%AD%E5%BF%83%20&amp;%20%E6%9C%80%E5%B0%8F%E7%9B%B4%E5%BE%84%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/1970/01/01/TemLib/%E5%9B%BE%E7%9A%84%E7%9B%B4%E5%BE%84%20&amp;%20%E5%9B%BE%E7%9A%84%E7%BB%9D%E5%AF%B9%E4%B8%AD%E5%BF%83%20&amp;%20%E6%9C%80%E5%B0%8F%E7%9B%B4%E5%BE%84%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF266D">CF266D BerDonalds</a></p><p><a href="https://www.luogu.com.cn/problem/SP1479">SP1479 PT07C - The GbAaY Kingdom</a></p><p><a href="https://www.luogu.com.cn/problem/SP735">SP735 MDST - Minimum Diameter Spanning Tree</a></p><p>需要注意的是，<code>EvaDiaCen</code> 函数中有整形除以二的操作，所以需要保证初始时所有边权为二的倍数，需要在读入时将边权乘二，输出时除回去就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">&#125; eg[MAXm + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[MAXn + <span class="number">10</span>][MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                dis[i][j] = <span class="built_in">min</span>(dis[i][j], dis[i][k] + dis[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tmp[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> rk[MAXn + <span class="number">10</span>][MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaRk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            tmp[j] = <span class="built_in">make_pair</span>(dis[i][j], j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(tmp + <span class="number">1</span>, tmp + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            rk[i][j] = tmp[j].second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dia;</span><br><span class="line"><span class="keyword">int</span> cenu, cenv, cendisu, cendisv;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaDiaCen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dia = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = eg[i].u, v = eg[i].v, w = eg[i].w;</span><br><span class="line">        <span class="keyword">int</span> mxdisv = dis[v][rk[u][n]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; j; --j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mxdisv &lt;= dis[v][rk[u][j]]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dia &gt; dis[u][rk[u][j]] + mxdisv + w) &#123;</span><br><span class="line">                    dia = dis[u][rk[u][j]] + mxdisv + w;</span><br><span class="line">                    cenu = u;</span><br><span class="line">                    cenv = v;</span><br><span class="line">                    cendisu = dia / <span class="number">2</span> - dis[u][rk[u][j]];</span><br><span class="line">                    cendisv = dia / <span class="number">2</span> - mxdisv;</span><br><span class="line">                &#125;</span><br><span class="line">                mxdisv = dis[v][rk[u][j]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> dist[MAXn + <span class="number">10</span>], from[MAXn + <span class="number">10</span>];</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; pq;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dist));</span><br><span class="line">    dist[s] = <span class="number">0</span>;</span><br><span class="line">    pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, s));</span><br><span class="line">    <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = pq.<span class="built_in">top</span>().second; pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[cur]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[cur] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (dist[to[i]] &gt; dist[cur] + wei[i]) &#123;</span><br><span class="line">                dist[to[i]] = dist[cur] + wei[i];</span><br><span class="line">                from[to[i]] = cur;</span><br><span class="line">                pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dist[to[i]], to[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cntmdst; pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mdst[MAXm + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaMdst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (eg[i].u == cenu &amp;&amp; eg[i].v == cenv) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Insert</span>(eg[i].u, eg[i].v, eg[i].w);</span><br><span class="line">        <span class="built_in">Insert</span>(eg[i].v, eg[i].u, eg[i].w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Insert</span>(n + <span class="number">1</span>, cenu, cendisu);</span><br><span class="line">    <span class="built_in">Insert</span>(cenu, n + <span class="number">1</span>, cendisu);</span><br><span class="line">    <span class="built_in">Insert</span>(n + <span class="number">1</span>, cenv, cendisv);</span><br><span class="line">    <span class="built_in">Insert</span>(cenv, n + <span class="number">1</span>, cendisv);</span><br><span class="line">    <span class="built_in">Dijkstra</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == cenu || i == cenv) <span class="keyword">continue</span>;</span><br><span class="line">        mdst[++cntmdst] = <span class="built_in">make_pair</span>(i, from[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    mdst[++cntmdst] = <span class="built_in">make_pair</span>(cenu, cenv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">Floyd</span>();</span><br><span class="line">    <span class="built_in">EvaRk</span>();</span><br><span class="line">    <span class="built_in">EvaDiaCen</span>(); <span class="comment">// 求直径以及绝对中心</span></span><br><span class="line">    <span class="built_in">EvaMdst</span>();   <span class="comment">// 求最小直径生成树</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圆方树解仙人掌</title>
      <link href="/1970/01/01/TemLib/%E5%9C%86%E6%96%B9%E6%A0%91%E8%A7%A3%E4%BB%99%E4%BA%BA%E6%8E%8C/"/>
      <url>/1970/01/01/TemLib/%E5%9C%86%E6%96%B9%E6%A0%91%E8%A7%A3%E4%BB%99%E4%BA%BA%E6%8E%8C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P5236">Luogu P5236 【模板】静态仙人掌</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cntdfs1, dfs[MAXnd + <span class="number">10</span>], low[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> back[MAXnd + <span class="number">10</span>], throwback[MAXnd + <span class="number">10</span>], bottom[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntdcc; vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; dcc[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> topstk, stk[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    dfs[cur] = low[cur] = ++cntdfs1;</span><br><span class="line">    <span class="keyword">if</span> (!head1[cur]) &#123;</span><br><span class="line">        dcc[++cntdcc].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(cur, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    stk[++topstk] = cur;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head1[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dfs[to[i]]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (low[cur] &gt; dfs[to[i]]) &#123;</span><br><span class="line">                low[cur] = dfs[to[i]];</span><br><span class="line">                throwback[cur] = wei[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            back[to[i]] = wei[i];</span><br><span class="line">            <span class="built_in">Tarjan</span>(to[i]);</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], low[to[i]]);</span><br><span class="line">            <span class="keyword">if</span> (low[to[i]] &gt;= dfs[cur]) &#123;</span><br><span class="line">                ++cntdcc;</span><br><span class="line">                <span class="keyword">int</span> x;</span><br><span class="line">                x = stk[topstk--];</span><br><span class="line">                dcc[cntdcc].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(cur, throwback[x]));</span><br><span class="line">                dcc[cntdcc].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(x, back[x]));</span><br><span class="line">                <span class="keyword">while</span> (x != to[i]) &#123;</span><br><span class="line">                    x = stk[topstk--];</span><br><span class="line">                    dcc[cntdcc].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(x, back[x]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bottom[cur] = cntdfs1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tresum[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> fa[MAXnd + <span class="number">10</span>], dep[MAXnd + <span class="number">10</span>], siz[MAXnd + <span class="number">10</span>], hson[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs1</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> f, <span class="keyword">int</span> tsum)</span> </span>&#123;</span><br><span class="line">    fa[cur] = f;</span><br><span class="line">    tresum[cur] = tsum;</span><br><span class="line">    dep[cur] = dep[fa[cur]] + <span class="number">1</span>;</span><br><span class="line">    siz[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mxsonsiz = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head2[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to[i] == fa[cur]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Dfs1</span>(to[i], cur, tresum[cur] + wei[i]);</span><br><span class="line">        siz[cur] += siz[to[i]];</span><br><span class="line">        <span class="keyword">if</span> (mxsonsiz &lt; siz[to[i]]) &#123;</span><br><span class="line">            mxsonsiz = siz[to[i]];</span><br><span class="line">            hson[cur] = to[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cntdfs2, nddfs[MAXnd + <span class="number">10</span>], idxdfs[MAXnd + <span class="number">10</span>], top[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs2</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> tp)</span> </span>&#123;</span><br><span class="line">    nddfs[cur] = ++cntdfs2;</span><br><span class="line">    idxdfs[cntdfs2] = cur;</span><br><span class="line">    top[cur] = tp;</span><br><span class="line">    <span class="keyword">if</span> (hson[cur]) &#123;</span><br><span class="line">        <span class="built_in">Dfs2</span>(hson[cur], tp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head2[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to[i] == fa[cur] || to[i] == hson[cur]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Dfs2</span>(to[i], to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> &amp;lca, <span class="keyword">int</span> &amp;xnear, <span class="keyword">int</span> &amp;ynear)</span> </span>&#123;</span><br><span class="line">    lca = xnear = ynear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &gt; dep[top[y]]) &#123;</span><br><span class="line">            xnear = top[x];</span><br><span class="line">            x = fa[top[x]];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ynear = top[y];</span><br><span class="line">            y = fa[top[y]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) &#123;</span><br><span class="line">        lca = y;</span><br><span class="line">        xnear = idxdfs[nddfs[lca] + <span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dep[x] &lt; dep[y]) &#123;</span><br><span class="line">        lca = x;</span><br><span class="line">        ynear = idxdfs[nddfs[lca] + <span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        lca = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cirsum[MAXnd + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m, q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(u, v, w);</span><br><span class="line">        <span class="built_in">Insert</span>(head1, u, v, w); <span class="built_in">Insert</span>(head1, v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfs[i]) &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    N = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, dccsiz; i &lt;= cntdcc; ++i) &#123;</span><br><span class="line">        dccsiz = dcc[i].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (dccsiz == <span class="number">1</span>) &#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dccsiz == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">Insert</span>(head2, dcc[i][<span class="number">0</span>].first, dcc[i][<span class="number">1</span>].first, dcc[i][<span class="number">0</span>].second);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ++N;</span><br><span class="line">            cirsum[dcc[i][dccsiz - <span class="number">1</span>].first] = dcc[i][dccsiz - <span class="number">1</span>].second;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = dccsiz - <span class="number">2</span>; j; --j) &#123;</span><br><span class="line">                cirsum[dcc[i][j].first] = cirsum[dcc[i][j + <span class="number">1</span>].first] + dcc[i][j].second;</span><br><span class="line">            &#125;</span><br><span class="line">            cirsum[N] = cirsum[dcc[i][<span class="number">1</span>].first] + dcc[i][<span class="number">0</span>].second;</span><br><span class="line">            <span class="built_in">Insert</span>(head2, dcc[i][<span class="number">0</span>].first, N, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; dccsiz; ++j) &#123;</span><br><span class="line">                <span class="built_in">Insert</span>(head2, N, dcc[i][j].first, <span class="built_in">min</span>(cirsum[dcc[i][j].first], cirsum[N] - cirsum[dcc[i][j].first]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs1</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y, lca, xnear, ynear; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(x, y);</span><br><span class="line">        <span class="built_in">Lca</span>(x, y, lca, xnear, ynear);</span><br><span class="line">        <span class="keyword">if</span> (lca &lt;= n) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tresum[x] + tresum[y] - <span class="number">2</span> * tresum[lca]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="built_in">abs</span>(cirsum[xnear] - cirsum[ynear]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tresum[x] - tresum[xnear] + tresum[y] - tresum[ynear] + <span class="built_in">min</span>(tmp, cirsum[lca] - tmp));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>块状链表</title>
      <link href="/1970/01/01/TemLib/%E5%9D%97%E7%8A%B6%E9%93%BE%E8%A1%A8/"/>
      <url>/1970/01/01/TemLib/%E5%9D%97%E7%8A%B6%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=2887">Poj 2887 BigString</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXtxtlen = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXsqrttxtlen = <span class="number">1e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, sqrtn;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    Node *pre, *nex;</span><br><span class="line">    <span class="keyword">char</span> txt[MAXsqrttxtlen * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line">    <span class="built_in">Node</span>() &#123;len = <span class="number">0</span>, pre = <span class="literal">nullptr</span>, nex = <span class="literal">nullptr</span>, <span class="built_in">memset</span>(txt, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(txt));&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        Node *nw = <span class="keyword">new</span> Node;</span><br><span class="line">        nw-&gt;nex = nex;</span><br><span class="line">        nex = nw;</span><br><span class="line">        nw-&gt;pre = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (nw-&gt;nex != <span class="literal">nullptr</span>) nw-&gt;nex-&gt;pre = nw;</span><br><span class="line">        <span class="built_in">copy</span>(txt + p + <span class="number">1</span>, txt + len + <span class="number">1</span>, nw-&gt;txt + <span class="number">1</span>);</span><br><span class="line">        nw-&gt;len = len - p;</span><br><span class="line">        len = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt; p; --i) &#123;</span><br><span class="line">            txt[i + <span class="number">1</span>] = txt[i];</span><br><span class="line">        &#125;</span><br><span class="line">        txt[p + <span class="number">1</span>] = ch;</span><br><span class="line">        ++len;</span><br><span class="line">        <span class="keyword">if</span> (len &gt; sqrtn) &#123;</span><br><span class="line">            <span class="built_in">split</span>(len &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Node *head;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    Node *last = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r = sqrtn; ; l += sqrtn, r += sqrtn) &#123;</span><br><span class="line">        Node *nw = <span class="keyword">new</span> Node;</span><br><span class="line">        <span class="keyword">if</span> (last != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            nw-&gt;pre = last;</span><br><span class="line">            last-&gt;nex = nw;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head = nw;</span><br><span class="line">        &#125;</span><br><span class="line">        nw-&gt;len = <span class="built_in">min</span>(r, n) - l + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">copy</span>(str + l, str + l + nw-&gt;len, nw-&gt;txt + <span class="number">1</span>);</span><br><span class="line">        last = nw;</span><br><span class="line">        <span class="keyword">if</span> (r &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    --p;</span><br><span class="line">    Node *cur = head;</span><br><span class="line">    <span class="keyword">while</span> (p &gt;= cur-&gt;len) &#123;</span><br><span class="line">        p -= cur-&gt;len;</span><br><span class="line">        cur = cur-&gt;nex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur-&gt;txt[<span class="number">1</span> + p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">    --p;</span><br><span class="line">    Node *cur = head;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="number">-1</span>) &#123;</span><br><span class="line">        cur-&gt;<span class="built_in">insert</span>(<span class="number">0</span>, ch);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p &gt;= cur-&gt;len) &#123;</span><br><span class="line">        p -= cur-&gt;len;</span><br><span class="line">        cur = cur-&gt;nex;</span><br><span class="line">    &#125;</span><br><span class="line">    cur-&gt;<span class="built_in">insert</span>(<span class="number">1</span> + p, ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">char</span> str[MAXtxtlen + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(str + <span class="number">1</span>);</span><br><span class="line">    sqrtn = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="built_in">Init</span>(str);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">char</span> opt, ch;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, p; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;opt);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">read</span>(p);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="built_in">Query</span>(p));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="string">&#x27;I&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;ch);</span><br><span class="line">            <span class="built_in">read</span>(p);</span><br><span class="line">            <span class="built_in">Insert</span>(p - <span class="number">1</span>, ch);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>埃氏筛</title>
      <link href="/1970/01/01/TemLib/%E5%9F%83%E6%B0%8F%E7%AD%9B/"/>
      <url>/1970/01/01/TemLib/%E5%9F%83%E6%B0%8F%E7%AD%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="P3383-【模板】线性筛素数"><a href="#P3383-【模板】线性筛素数" class="headerlink" title="P3383 【模板】线性筛素数"></a><a href="https://www.luogu.com.cn/problem/P3383">P3383 【模板】线性筛素数</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">&#x27;0&#x27;</span>;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, cntp, p[MAXn / <span class="number">10</span> + <span class="number">100</span>];</span><br><span class="line"><span class="keyword">bool</span> notp[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ES</span><span class="params">(<span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    notp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= up; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!notp[i]) &#123;</span><br><span class="line">            p[++cntp] = i;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">long</span> <span class="keyword">long</span>)i * i &lt;= up)</span><br><span class="line">                <span class="keyword">for</span> (re <span class="keyword">int</span> j = i * i; j &lt;= up; j += i) </span><br><span class="line">                    notp[j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="built_in">ES</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, q; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(q);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p[q]);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基环树</title>
      <link href="/1970/01/01/TemLib/%E5%9F%BA%E7%8E%AF%E6%A0%91/"/>
      <url>/1970/01/01/TemLib/%E5%9F%BA%E7%8E%AF%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="P1453-城市环路"><a href="#P1453-城市环路" class="headerlink" title="P1453 城市环路"></a><a href="https://www.luogu.com.cn/problem/P1453">P1453 城市环路</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = MAXn;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXn + <span class="number">10</span>], cntnex, nex[MAXm * <span class="number">2</span> + <span class="number">10</span>], to[MAXm * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> k;</span><br><span class="line"><span class="keyword">int</span> n, a[MAXn + <span class="number">10</span>], deg[MAXn + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntring, ring[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaRing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deg[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cur;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cur = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        vis[cur] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[to[i]]) &#123;</span><br><span class="line">                --deg[to[i]];</span><br><span class="line">                <span class="keyword">if</span> (deg[to[i]] == <span class="number">1</span>) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(to[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deg[i] == <span class="number">2</span>) &#123;</span><br><span class="line">            vis[i] = <span class="number">1</span>;</span><br><span class="line">            ring[++cntring] = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> ok = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ok) &#123;</span><br><span class="line">        ok = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[ring[cntring]]; i; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[to[i]] || deg[to[i]] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            vis[to[i]] = <span class="number">1</span>;</span><br><span class="line">            ring[++cntring] = to[i];</span><br><span class="line">            ok = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[MAXn + <span class="number">10</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    vis[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[to[i]] || deg[to[i]] == <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dp</span>(to[i]);</span><br><span class="line">        d[cur][<span class="number">0</span>] += <span class="built_in">max</span>(d[to[i]][<span class="number">1</span>], d[to[i]][<span class="number">0</span>]);</span><br><span class="line">        d[cur][<span class="number">1</span>] += d[to[i]][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    d[cur][<span class="number">1</span>] += a[cur];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntring; ++i) &#123;</span><br><span class="line">        <span class="built_in">dp</span>(ring[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[MAXn + <span class="number">10</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dp2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = d[ring[<span class="number">1</span>]][<span class="number">0</span>];</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] = d[ring[<span class="number">1</span>]][<span class="number">1</span>];</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] = f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = -INF;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= cntring; ++i) &#123;</span><br><span class="line">        f[i][<span class="number">0</span>][<span class="number">0</span>] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>], f[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>]) + d[ring[i]][<span class="number">0</span>];</span><br><span class="line">        f[i][<span class="number">0</span>][<span class="number">1</span>] = f[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] + d[ring[i]][<span class="number">1</span>];</span><br><span class="line">        f[i][<span class="number">1</span>][<span class="number">0</span>] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>], f[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]) + d[ring[i]][<span class="number">0</span>];</span><br><span class="line">        f[i][<span class="number">1</span>][<span class="number">1</span>] = f[i - <span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] + d[ring[i]][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">max</span>(f[cntring][<span class="number">0</span>][<span class="number">0</span>], f[cntring][<span class="number">0</span>][<span class="number">1</span>]), f[cntring][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        ++u; ++v;</span><br><span class="line">        ++deg[u]; ++deg[v];</span><br><span class="line">        <span class="built_in">Insert</span>(u, v); <span class="built_in">Insert</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;k);</span><br><span class="line">    <span class="built_in">EvaRing</span>();</span><br><span class="line">    <span class="built_in">Dp</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.1lf\n&quot;</span>, (<span class="keyword">double</span>)<span class="built_in">Dp2</span>() * k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基环树求环长度和环上每个节点前的边的长度："><a href="#基环树求环长度和环上每个节点前的边的长度：" class="headerlink" title="基环树求环长度和环上每个节点前的边的长度："></a>基环树求环长度和环上每个节点前的边的长度：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cntinring, ring[MAXnd + <span class="number">10</span>], ringdis;</span><br><span class="line"><span class="keyword">int</span> ndwei[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaRing</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fromedge, <span class="keyword">int</span> begin)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (iscut[i] || i == (fromedge ^ <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">        ring[++cntinring] = to[i];</span><br><span class="line">        ringdis += wei[i];</span><br><span class="line">        ndwei[to[i]] = wei[i];</span><br><span class="line">        <span class="keyword">if</span> (to[i] != begin) <span class="built_in">EvaRing</span>(to[i], i, begin);</span><br><span class="line">        <span class="keyword">if</span> (cur == begin) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/1970/01/01/TemLib/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>/1970/01/01/TemLib/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="P1177-【模板】快速排序"><a href="#P1177-【模板】快速排序" class="headerlink" title="P1177 【模板】快速排序"></a><a href="https://www.luogu.com.cn/problem/P1177">P1177 【模板】快速排序</a></h2><h4 id="可以用快排的板测"><a href="#可以用快排的板测" class="headerlink" title="可以用快排的板测"></a>可以用快排的板测</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c&gt;<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">register</span> <span class="keyword">int</span> <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> heap[MAXn+<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> heapn;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f = p / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (heap[p] &lt; heap[f]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(heap[p], heap[f]);</span><br><span class="line">            p = f;</span><br><span class="line">            f /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = p * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (s &lt;= heapn) &#123;</span><br><span class="line">        <span class="keyword">if</span> (heap[s] &gt; heap[s + <span class="number">1</span>] &amp;&amp; s &lt; heapn) &#123;</span><br><span class="line">            s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (heap[s] &lt; heap[p]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(heap[s], heap[p]);</span><br><span class="line">            p = s;</span><br><span class="line">            s *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    heap[++heapn] = x;</span><br><span class="line">    <span class="built_in">up</span>(heapn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    heap[p] = heap[heapn--];</span><br><span class="line">    <span class="built_in">up</span>(p);</span><br><span class="line">    <span class="built_in">down</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    heap[<span class="number">1</span>] = heap[heapn--];</span><br><span class="line">    <span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> heap[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">insert</span>(<span class="built_in">read</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">get_root</span>());</span><br><span class="line">        <span class="built_in">pop_root</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多重背包</title>
      <link href="/1970/01/01/TemLib/%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/"/>
      <url>/1970/01/01/TemLib/%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="P1776-宝物筛选"><a href="#P1776-宝物筛选" class="headerlink" title="P1776 宝物筛选"></a><a href="https://www.luogu.com.cn/problem/P1776">P1776 宝物筛选</a></h2><h4 id="1-单调队列优化版"><a href="#1-单调队列优化版" class="headerlink" title="1. 单调队列优化版"></a>1. 单调队列优化版</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXW = <span class="number">4e4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;n, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> le, ri; pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; q[MAXW + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    le = <span class="number">1</span>;</span><br><span class="line">    ri = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Push_back</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (le &lt;= ri &amp;&amp; q[ri].first &lt;= x) &#123;</span><br><span class="line">        --ri;</span><br><span class="line">    &#125;</span><br><span class="line">    q[++ri] = <span class="built_in">make_pair</span>(x, idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Front</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (le &lt;= ri &amp;&amp; q[le].second &lt; idx) &#123;</span><br><span class="line">        ++le;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> q[le].first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, W, d[MAXW + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, W);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, v, w, m; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(v, w, m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; w; ++j) &#123;</span><br><span class="line">            <span class="built_in">Init</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>, l = j; l &lt;= W; ++k, l += w) &#123;</span><br><span class="line">                <span class="built_in">Push_back</span>(d[l] - k * v, k);</span><br><span class="line">                d[l] = <span class="built_in">Front</span>(k - m) + k * v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d[W]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-二进制拆分版"><a href="#2-二进制拆分版" class="headerlink" title="2. 二进制拆分版"></a>2. 二进制拆分版</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXW = <span class="number">40000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, W;</span><br><span class="line"><span class="keyword">int</span> v_new[MAXn * <span class="number">10</span> + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> w_new[MAXn * <span class="number">10</span> + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> num_new;</span><br><span class="line"><span class="keyword">int</span> d[MAXW + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c&gt;<span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> s = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>())s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bin_divide</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> num, <span class="keyword">int</span> v_new[], <span class="keyword">int</span> w_new[], <span class="keyword">int</span>&amp; num_new)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; num &gt;= i; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        v_new[++num_new] = v * i;</span><br><span class="line">        w_new[num_new] = w * i;</span><br><span class="line">        num -= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        v_new[++num_new] = v * num;</span><br><span class="line">        w_new[num_new] = w * num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> v[], <span class="keyword">int</span> w[], <span class="keyword">int</span> W, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = W; j &gt;= w[i]; j--)    d[j] = <span class="built_in">max</span>(d[j], d[j - w[i]] + v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">eva_maxV</span><span class="params">(<span class="keyword">int</span> d[], <span class="keyword">int</span> W)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = -INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= W; i++)   ans = <span class="built_in">max</span>(ans, d[i]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    W = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> v, w, num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v = <span class="built_in">read</span>();</span><br><span class="line">        w = <span class="built_in">read</span>();</span><br><span class="line">        num = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">bin_divide</span>(v, w, num, v_new, w_new, num_new);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rec</span>(v_new, w_new, W, num_new);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">eva_maxV</span>(d, W);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串dp</title>
      <link href="/1970/01/01/TemLib/%E5%AD%97%E7%AC%A6%E4%B8%B2dp/"/>
      <url>/1970/01/01/TemLib/%E5%AD%97%E7%AC%A6%E4%B8%B2dp/</url>
      
        <content type="html"><![CDATA[<h2 id="P3082-USACO13MAR-Necklace-G"><a href="#P3082-USACO13MAR-Necklace-G" class="headerlink" title="P3082 [USACO13MAR]Necklace G"></a><a href="https://www.luogu.com.cn/problem/P3082">P3082 [USACO13MAR]Necklace G</a></h2><h4 id="1-Kmp上Dp（会T）"><a href="#1-Kmp上Dp（会T）" class="headerlink" title="1. Kmp上Dp（会T）"></a>1. Kmp上Dp（会T）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::ios;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::min;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXlwrd = <span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXltxt = <span class="number">1e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> txt[MAXltxt + <span class="number">10</span>], wrd[MAXlwrd + <span class="number">10</span>]; <span class="keyword">int</span> ltxt, lwrd;</span><br><span class="line"><span class="keyword">int</span> fail[MAXlwrd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> d[MAXltxt + <span class="number">10</span>][MAXlwrd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fail[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= lwrd; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; (wrd[j + <span class="number">1</span>] != wrd[i] || j == lwrd)) j = fail[j];</span><br><span class="line">        <span class="keyword">if</span> (wrd[j + <span class="number">1</span>] == wrd[i]) ++j;</span><br><span class="line">        fail[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>); cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cin &gt;&gt; (txt + <span class="number">1</span>) &gt;&gt; (wrd + <span class="number">1</span>);</span><br><span class="line">    ltxt = <span class="built_in">strlen</span>(txt + <span class="number">1</span>); lwrd = <span class="built_in">strlen</span>(wrd + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">EvaFail</span>();</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(d));</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ltxt; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lwrd; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = j;</span><br><span class="line">            <span class="keyword">while</span> (k &amp;&amp; (wrd[k + <span class="number">1</span>] != txt[i + <span class="number">1</span>] || k == lwrd)) k = fail[k];</span><br><span class="line">            <span class="keyword">if</span> (wrd[k + <span class="number">1</span>] == txt[i + <span class="number">1</span>]) ++k;</span><br><span class="line">            d[i + <span class="number">1</span>][k] = <span class="built_in">min</span>(d[i + <span class="number">1</span>][k], d[i][j]);</span><br><span class="line">            d[i + <span class="number">1</span>][j] = <span class="built_in">min</span>(d[i + <span class="number">1</span>][j], d[i][j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lwrd; ++i) &#123;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, d[ltxt][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-Ac自动机上Dp"><a href="#2-Ac自动机上Dp" class="headerlink" title="2. Ac自动机上Dp"></a>2. Ac自动机上Dp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::ios;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::queue;</span><br><span class="line"><span class="keyword">using</span> std::min;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXlwrd = <span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXltxt = <span class="number">1e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXnd = <span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cntnd, son[MAXnd + <span class="number">10</span>][<span class="number">26</span>], fail[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Insert</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!son[cur][str[i] - <span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">            son[cur][str[i] - <span class="string">&#x27;a&#x27;</span>] = ++cntnd;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = son[cur][str[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (son[<span class="number">0</span>][i]) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(son[<span class="number">0</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (son[j][i]) &#123;</span><br><span class="line">                fail[son[j][i]] = son[fail[j]][i];</span><br><span class="line">                q.<span class="built_in">push</span>(son[j][i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                son[j][i] = son[fail[j]][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> wrd[MAXlwrd + <span class="number">10</span>], txt[MAXltxt + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> n, lwrd, ltxt, d[MAXltxt + <span class="number">10</span>][MAXlwrd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>); cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cin &gt;&gt; (txt + <span class="number">1</span>) &gt;&gt; (wrd + <span class="number">1</span>);</span><br><span class="line">    ltxt = <span class="built_in">strlen</span>(txt + <span class="number">1</span>); lwrd = <span class="built_in">strlen</span>(wrd + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Insert</span>(wrd);</span><br><span class="line">    <span class="built_in">EvaFail</span>();</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(d));</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ltxt; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lwrd; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = j;</span><br><span class="line">            k = son[k][txt[i + <span class="number">1</span>] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            d[i + <span class="number">1</span>][k] = <span class="built_in">min</span>(d[i + <span class="number">1</span>][k], d[i][j]);</span><br><span class="line">            d[i + <span class="number">1</span>][j] = <span class="built_in">min</span>(d[i + <span class="number">1</span>][j], d[i][j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lwrd; ++i) &#123;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, d[ltxt][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 模板 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串哈希</title>
      <link href="/1970/01/01/TemLib/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/"/>
      <url>/1970/01/01/TemLib/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="P3370-【模板】字符串哈希"><a href="#P3370-【模板】字符串哈希" class="headerlink" title="P3370 【模板】字符串哈希"></a><a href="https://www.luogu.com.cn/problem/P3370">P3370 【模板】字符串哈希</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> base = <span class="number">261</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">23333</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> s[MAXn];</span><br><span class="line">vector&lt;string&gt; hash[MOD + <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mo = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line">        mo = (mo * <span class="number">1ll</span> * base + s[i]) % MOD;</span><br><span class="line">    string s2 = s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hash[mo].<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="keyword">if</span> (hash[mo][i] == s2)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    hash[mo].<span class="built_in">push_back</span>(s2);</span><br><span class="line">    ans++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;s), <span class="built_in">insert</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串哈希解最小循环节</title>
      <link href="/1970/01/01/TemLib/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C%E8%A7%A3%E6%9C%80%E5%B0%8F%E5%BE%AA%E7%8E%AF%E8%8A%82/"/>
      <url>/1970/01/01/TemLib/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C%E8%A7%A3%E6%9C%80%E5%B0%8F%E5%BE%AA%E7%8E%AF%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h2 id="P3538-POI2012-OKR-A-Horrible-Poem"><a href="#P3538-POI2012-OKR-A-Horrible-Poem" class="headerlink" title="P3538 POI2012\OKR-A Horrible Poem"></a><a href="https://www.luogu.com.cn/problem/P3538">P3538 POI2012\OKR-A Horrible Poem</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">5e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BASE = <span class="number">107</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, cntp, p[MAXn + <span class="number">10</span>], minpf[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> notp[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LS</span><span class="params">(<span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    notp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= up; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!notp[i]) &#123;</span><br><span class="line">            p[++cntp] = i;</span><br><span class="line">            minpf[i] = i;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">int</span> up2 = up / i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cntp &amp;&amp; p[j] &lt;= up2; ++j) &#123;</span><br><span class="line">            notp[i * p[j]] = <span class="number">1</span>;</span><br><span class="line">            minpf[i * p[j]] = p[j];</span><br><span class="line">            <span class="keyword">if</span> (!(i % p[j])) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> hashpre[MAXn + <span class="number">10</span>], poww[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((hashpre[r] - hashpre[l - <span class="number">1</span>] * poww[r - l + <span class="number">1</span>]) % MOD + MOD) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">LS</span>(n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        hashpre[i] = (hashpre[i - <span class="number">1</span>] * BASE + str[i] - <span class="string">&#x27;a&#x27;</span>) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    poww[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        poww[i] = (poww[i - <span class="number">1</span>] * BASE) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r, len, ans;</span><br><span class="line">        <span class="built_in">read</span>(l), <span class="built_in">read</span>(r);</span><br><span class="line">        ans = len = r - l + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">hash</span>(l + <span class="number">1</span>, r) == <span class="built_in">hash</span>(l, r - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">hash</span>(l + ans / minpf[len], r) == <span class="built_in">hash</span>(l, r - ans / minpf[len])) &#123;</span><br><span class="line">                    ans /= minpf[len];<span class="comment">//ans: 循环节长度</span></span><br><span class="line">                &#125;<span class="comment">//minpf: 最小质因数，循环次数</span></span><br><span class="line">                len /= minpf[len];<span class="comment">//len: 无实际意义，用于提取所有质因数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串最小表示法</title>
      <link href="/1970/01/01/TemLib/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/"/>
      <url>/1970/01/01/TemLib/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="P1368-【模板】最小表示法"><a href="#P1368-【模板】最小表示法" class="headerlink" title="P1368 【模板】最小表示法"></a><a href="https://www.luogu.com.cn/problem/P1368">P1368 【模板】最小表示法</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::min;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">3e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;n, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[MAXn * <span class="number">2</span> + <span class="number">10</span>], begin;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]); a[i + n] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">2</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; n || j &gt; n) &#123;</span><br><span class="line">            begin = <span class="built_in">min</span>(i, j);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (a[i + k] == a[j + k] &amp;&amp; k &lt; n) ++k;</span><br><span class="line">        <span class="keyword">if</span> (k == n) &#123;</span><br><span class="line">            begin = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[i + k] &gt; a[j + k]) &#123;</span><br><span class="line">            i = i + k + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == j) ++i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = j + k + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == j) ++j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[begin + i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>完全背包</title>
      <link href="/1970/01/01/TemLib/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/"/>
      <url>/1970/01/01/TemLib/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="P1616-疯狂的采药"><a href="#P1616-疯狂的采药" class="headerlink" title="P1616 疯狂的采药"></a><a href="https://www.luogu.com.cn/problem/P1616">P1616 疯狂的采药</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL MAXn = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">const</span> LL MAXW = <span class="number">10000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">register</span> LL <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">max</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LL n, W;</span><br><span class="line">LL d[MAXW + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    W = <span class="built_in">read</span>();</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    LL w, v;</span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        w = <span class="built_in">read</span>();</span><br><span class="line">        v = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">for</span> (LL i = w; i &lt;= W; i++) &#123;</span><br><span class="line">            d[i] = <span class="built_in">max</span>(d[i], d[i - w] + v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, d[W]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用小高精</title>
      <link href="/1970/01/01/TemLib/%E5%AE%9E%E7%94%A8%E5%B0%8F%E9%AB%98%E7%B2%BE/"/>
      <url>/1970/01/01/TemLib/%E5%AE%9E%E7%94%A8%E5%B0%8F%E9%AB%98%E7%B2%BE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://rsdbkhusky.github.io/1970/01/01/TemLib/%E9%AB%98%E7%B2%BE%E8%BF%90%E7%AE%97/">不实用的高精</a></p><p>推荐一个实用小高精：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BigInt</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> base = <span class="number">1e13</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span> + (BigInt a, <span class="keyword">const</span> BigInt b) &#123;</span><br><span class="line">        a.s[<span class="number">0</span>] += b.s[<span class="number">0</span>];</span><br><span class="line">        a.s[<span class="number">1</span>] += b.s[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (a.s[<span class="number">0</span>] &gt;= base) ++a.s[<span class="number">1</span>], a.s[<span class="number">0</span>] -= base;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">int</span> <span class="keyword">operator</span> % (BigInt a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((a.s[<span class="number">1</span>] % b) * base + a.s[<span class="number">0</span>]) % b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span> / (BigInt a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        BigInt c;</span><br><span class="line">        c.s[<span class="number">1</span>] = a.s[<span class="number">1</span>] / b;</span><br><span class="line">        c.s[<span class="number">0</span>] = ((a.s[<span class="number">1</span>] % b) * base + a.s[<span class="number">0</span>]) / b;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">1</span>]) <span class="built_in">printf</span>(<span class="string">&quot;%lld%13lld&quot;</span>, s[<span class="number">1</span>], s[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, s[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>乘法不用考虑，用 <code>s[1] * s[1]</code> 就炸了。减法还要考虑负数（如果需要的话）。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容斥原理</title>
      <link href="/1970/01/01/TemLib/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
      <url>/1970/01/01/TemLib/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="P1450-HAOI2008-硬币购物"><a href="#P1450-HAOI2008-硬币购物" class="headerlink" title="P1450 HAOI2008 硬币购物"></a><a href="https://www.luogu.com.cn/problem/P1450">P1450 HAOI2008 硬币购物</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn2 = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXW = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n = <span class="number">4</span>, W, w[MAXn + <span class="number">10</span>], cnt[MAXn + <span class="number">10</span>], d[MAXW + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(w[<span class="number">1</span>]), <span class="built_in">read</span>(w[<span class="number">2</span>]), <span class="built_in">read</span>(w[<span class="number">3</span>]), <span class="built_in">read</span>(w[<span class="number">4</span>]), <span class="built_in">read</span>(T);</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> j = w[i]; j &lt;= MAXW; ++j) &#123;</span><br><span class="line">            d[j] += d[j - w[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(cnt[<span class="number">1</span>]), <span class="built_in">read</span>(cnt[<span class="number">2</span>]), <span class="built_in">read</span>(cnt[<span class="number">3</span>]), <span class="built_in">read</span>(cnt[<span class="number">4</span>]), <span class="built_in">read</span>(W);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXn2; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = W;</span><br><span class="line">            <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((i &gt;&gt; (j - <span class="number">1</span>)) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    p -= w[j] * (cnt[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += __builtin_popcount(i) &amp; <span class="number">1</span> ? -d[p] : d[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对顶栈</title>
      <link href="/1970/01/01/TemLib/%E5%AF%B9%E9%A1%B6%E6%A0%88/"/>
      <url>/1970/01/01/TemLib/%E5%AF%B9%E9%A1%B6%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="P2201-数列编辑器"><a href="#P2201-数列编辑器" class="headerlink" title="P2201 数列编辑器"></a><a href="https://www.luogu.com.cn/problem/P2201">P2201 数列编辑器</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>);<span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;<span class="keyword">register</span> T x = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ele</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, sum, maxsum;</span><br><span class="line">    <span class="built_in">Ele</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Ele</span>(<span class="keyword">int</span> val_):<span class="built_in">val</span>(val_)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">    Ele stk[MAXn + <span class="number">10</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        stk[++top] = <span class="built_in">Ele</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stk[top--].val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;fro, beh;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">char</span> opt;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; opt;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (opt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            fro.<span class="built_in">Push</span>(x);</span><br><span class="line">            fro.stk[fro.top].sum = fro.stk[fro.top - <span class="number">1</span>].sum + fro.stk[fro.top].val;</span><br><span class="line">            fro.stk[fro.top].maxsum = (fro.top == <span class="number">1</span>) ? fro.stk[fro.top].sum :</span><br><span class="line">                                                <span class="built_in">max</span>(fro.stk[fro.top - <span class="number">1</span>].maxsum, fro.stk[fro.top].sum);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">            fro.<span class="built_in">Pop</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">            beh.<span class="built_in">Push</span>(fro.<span class="built_in">Pop</span>());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">            fro.<span class="built_in">Push</span>(beh.<span class="built_in">Pop</span>());</span><br><span class="line">            fro.stk[fro.top].sum = fro.stk[fro.top - <span class="number">1</span>].sum + fro.stk[fro.top].val;</span><br><span class="line">            fro.stk[fro.top].maxsum = (fro.top == <span class="number">1</span>) ? fro.stk[fro.top].sum :</span><br><span class="line">                                                <span class="built_in">max</span>(fro.stk[fro.top - <span class="number">1</span>].maxsum, fro.stk[fro.top].sum);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            cout &lt;&lt; fro.stk[x].maxsum &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左偏堆</title>
      <link href="/1970/01/01/TemLib/%E5%B7%A6%E5%81%8F%E5%A0%86/"/>
      <url>/1970/01/01/TemLib/%E5%B7%A6%E5%81%8F%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3377">Luogu P3377 【模板】左偏树（可并堆）</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ls[MAXn + <span class="number">10</span>], rs[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> val[MAXn + <span class="number">10</span>], hig[MAXn + <span class="number">10</span>]; <span class="keyword">bool</span> isdel[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    val[<span class="number">0</span>] = INF;</span><br><span class="line">    hig[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line">    <span class="keyword">if</span> (val[x] &gt; val[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    rs[x] = <span class="built_in">Merge</span>(rs[x], y);</span><br><span class="line">    <span class="keyword">if</span> (hig[ls[x]] &lt; hig[rs[x]]) <span class="built_in">swap</span>(ls[x], rs[x]);</span><br><span class="line">    hig[x] = hig[rs[x]] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    isdel[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Merge</span>(ls[x], rs[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main</code> 函数里的函数调用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Init</span>();</span><br><span class="line">u.<span class="built_in">Init</span>(n);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">read</span>(opt);</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">read</span>(x, y);</span><br><span class="line">    <span class="keyword">if</span> (isdel[x] || isdel[y]) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">int</span> ancx = u.<span class="built_in">anc</span>(x), ancy = u.<span class="built_in">anc</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (ancx == ancy) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">int</span> nwroot = <span class="built_in">Merge</span>(ancx, ancy);</span><br><span class="line">    nwroot == ancx ? u.<span class="built_in">Merge</span>(ancy, ancx) : u.<span class="built_in">Merge</span>(ancx, ancy);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="keyword">if</span> (isdel[x]) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ancx = u.<span class="built_in">anc</span>(x);</span><br><span class="line">    <span class="keyword">int</span> nwroot = <span class="built_in">Pop</span>(ancx);</span><br><span class="line">    u.<span class="built_in">ChangeRoot</span>(ancx, nwroot);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, val[ancx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带权并查集</title>
      <link href="/1970/01/01/TemLib/%E5%B8%A6%E6%9D%83%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/1970/01/01/TemLib/%E5%B8%A6%E6%9D%83%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<ul><li>带权并查集的适用前提：维护的关系具有可传递性</li><li>带权并查集操作需保证的条件：执行了 Find 函数或 Merge 函数的节点的所有信息一定会被更新</li></ul><h2 id="P2024-NOI2001-食物链"><a href="#P2024-NOI2001-食物链" class="headerlink" title="P2024 NOI2001 食物链"></a><a href="https://www.luogu.com.cn/problem/P2024">P2024 NOI2001 食物链</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">5e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[MAXn + <span class="number">10</span>], dis[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x] == x) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> lastfa = fa[x];</span><br><span class="line">        fa[x] = <span class="built_in">Find</span>(fa[x]);</span><br><span class="line">        dis[x] = dis[x] + dis[lastfa];</span><br><span class="line">        <span class="keyword">return</span> fa[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dist)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ancx = <span class="built_in">Find</span>(x), ancy = <span class="built_in">Find</span>(y);</span><br><span class="line">    fa[ancx] = ancy;</span><br><span class="line">    dis[ancx] = -dis[x] + dist + dis[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ancx = <span class="built_in">Find</span>(x), ancy = <span class="built_in">Find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (ancx != ancy) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">return</span></span> ((dis[x] - dis[y]) % <span class="number">3</span> + <span class="number">3</span>) % <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, cntfalse;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>); cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">Init</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, opt, x, y; i &lt;= m; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; opt &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; n || y &gt; n) &#123;</span><br><span class="line">            ++cntfalse;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> qu = <span class="built_in">Query</span>(x, y);</span><br><span class="line">            <span class="keyword">if</span> (qu == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">Merge</span>(x, y, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qu != <span class="number">0</span>) &#123;</span><br><span class="line">                ++cntfalse;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> qu = <span class="built_in">Query</span>(x, y);</span><br><span class="line">            <span class="keyword">if</span> (qu == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">Merge</span>(x, y, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qu != <span class="number">1</span>) &#123;</span><br><span class="line">                ++cntfalse;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cntfalse &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/1970/01/01/TemLib/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/1970/01/01/TemLib/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="P3367-【模板】并查集"><a href="#P3367-【模板】并查集" class="headerlink" title="P3367 【模板】并查集"></a><a href="https://www.luogu.com.cn/problem/P3367">P3367 【模板】并查集</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">anc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x] = fa[x] == x ? x : <span class="built_in">anc</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">anc</span>(x) != <span class="built_in">anc</span>(y)) &#123;</span><br><span class="line">        fa[<span class="built_in">anc</span>(x)] = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SameAnc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">anc</span>(x) == <span class="built_in">anc</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="built_in">Init</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, opt, x, y; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt);</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (opt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">read</span>(x), <span class="built_in">read</span>(y);</span><br><span class="line">            <span class="built_in">Merge</span>(x, y);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">read</span>(x), <span class="built_in">read</span>(y);</span><br><span class="line">            <span class="built_in">SameAnc</span>(x, y) ? <span class="built_in">printf</span>(<span class="string">&quot;Y\n&quot;</span>) : <span class="built_in">printf</span>(<span class="string">&quot;N\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>康托展开 &amp; 逆康托展开</title>
      <link href="/1970/01/01/TemLib/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80%20&amp;%20%E9%80%86%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/"/>
      <url>/1970/01/01/TemLib/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80%20&amp;%20%E9%80%86%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3014">P3014 [USACO11FEB]Cow Line S</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : c ^ <span class="string">&#x27;0&#x27;</span>;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">BuildUseSum</span><span class="params">(<span class="keyword">int</span> *sum, <span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        t[i] = sum[i] - sum[i - <span class="built_in">lowbit</span>(i)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x, <span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (p &lt;= top) &#123;</span><br><span class="line">        t[p] += x;</span><br><span class="line">        p += <span class="built_in">lowbit</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        ans += t[p];</span><br><span class="line">        p -= <span class="built_in">lowbit</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Div</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Sum</span>(mid) &gt;= x) &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fac[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaFac</span><span class="params">(<span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaSum</span><span class="params">(<span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        sum[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">int</span> x, a[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[MAXn + <span class="number">10</span>], ans[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvCantor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">BuildUseSum</span>(sum, n);</span><br><span class="line">    <span class="keyword">int</span> tmpx = x - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">        cnt[i] = tmpx / fac[i - <span class="number">1</span>];</span><br><span class="line">        tmpx %= fac[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">        ans[i] = <span class="built_in">Div</span>(<span class="number">1</span>, n, cnt[i] + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">Add</span>(ans[i], <span class="number">-1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Cantor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">BuildUseSum</span>(sum, n);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">        <span class="built_in">Add</span>(a[i], <span class="number">-1</span>, n);</span><br><span class="line">        ans += fac[i - <span class="number">1</span>] * <span class="built_in">Sum</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, q);</span><br><span class="line">    <span class="built_in">EvaFac</span>(n);</span><br><span class="line">    <span class="built_in">EvaSum</span>(n);</span><br><span class="line">    <span class="keyword">char</span> opt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; opt;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="string">&#x27;P&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            <span class="built_in">InvCantor</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, ans[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">                <span class="built_in">read</span>(a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">Cantor</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异或高斯消元</title>
      <link href="/1970/01/01/TemLib/%E5%BC%82%E6%88%96%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"/>
      <url>/1970/01/01/TemLib/%E5%BC%82%E6%88%96%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/</url>
      
        <content type="html"><![CDATA[<h2 id="P2447-SDOI2010-外星千足虫"><a href="#P2447-SDOI2010-外星千足虫" class="headerlink" title="P2447 SDOI2010 外星千足虫"></a><a href="https://www.luogu.com.cn/problem/P2447">P2447 SDOI2010 外星千足虫</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">2e3</span>; <span class="comment">// 本代码中n和m和题面中的是反的，代码中n代表矩阵的行数，m代表列数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">1e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, ans;</span><br><span class="line">bitset&lt;MAXm + 10&gt; a[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">char</span> tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m + <span class="number">1</span>; ++j) &#123;</span><br><span class="line">            cin &gt;&gt; tmp;</span><br><span class="line">            a[i][j] = tmp - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> row = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">1</span>; col &lt;= m; ++col) &#123;</span><br><span class="line">        <span class="keyword">int</span> maxer = row;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = row + <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[maxer][col] &lt; a[i][col]) &#123;</span><br><span class="line">                maxer = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!a[maxer][col]) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Cannot Determine\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, maxer);</span><br><span class="line">        <span class="built_in">swap</span>(a[row], a[maxer]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == row) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[i][col]) &#123;</span><br><span class="line">                a[i] = a[i] ^ a[row];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++row;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i][m + <span class="number">1</span>]) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;?y7M#\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Earth\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强连通分量</title>
      <link href="/1970/01/01/TemLib/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
      <url>/1970/01/01/TemLib/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="B3609-图论与代数结构-701-强连通分量"><a href="#B3609-图论与代数结构-701-强连通分量" class="headerlink" title="B3609 [图论与代数结构 701] 强连通分量"></a><a href="https://www.luogu.com.cn/problem/B3609">B3609 [图论与代数结构 701] 强连通分量</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cntdfs, dfs[MAXnd + <span class="number">10</span>], low[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntscc; vector&lt;<span class="keyword">int</span>&gt; scc[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> top, stk[MAXnd + <span class="number">10</span>]; <span class="keyword">bool</span> instk[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    dfs[cur] = low[cur] = ++cntdfs;</span><br><span class="line">    stk[++top] = cur; instk[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dfs[to[i]] &amp;&amp; instk[to[i]]) &#123;</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], dfs[to[i]]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!dfs[to[i]]) &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(to[i]);</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], low[to[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dfs[cur] == low[cur]) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        ++cntscc;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            x = stk[top--]; instk[x] = <span class="number">0</span>;</span><br><span class="line">            scc[cntscc].<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (x != cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfs[i]) &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缩点："><a href="#缩点：" class="headerlink" title="缩点："></a>缩点：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (inscc[from1[i]] != inscc[to1[i]]) &#123;</span><br><span class="line">        <span class="built_in">Insert2</span>(inscc[from1[i]], inscc[to1[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/1970/01/01/TemLib/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/1970/01/01/TemLib/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="P1177-【模板】快速排序"><a href="#P1177-【模板】快速排序" class="headerlink" title="P1177 【模板】快速排序"></a><a href="https://www.luogu.com.cn/problem/P1177">P1177 【模板】快速排序</a></h2><h4 id="可以用快排的板测"><a href="#可以用快排的板测" class="headerlink" title="可以用快排的板测"></a>可以用快排的板测</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">register</span> <span class="keyword">int</span> <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x=x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> tmp[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r - l &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + (r - l &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">merge</span>(l, mid);</span><br><span class="line">    <span class="built_in">merge</span>(mid, r);</span><br><span class="line">    <span class="keyword">int</span> p = l, q = mid, s = l;</span><br><span class="line">    <span class="keyword">while</span> (s &lt; r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p &gt;= mid || (q &lt; r &amp;&amp; a[p] &gt; a[q])) &#123;</span><br><span class="line">            tmp[s++] = a[q++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp[s++] = a[p++];          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; r; i++) &#123;</span><br><span class="line">        a[i] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] = <span class="built_in">read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">merge</span>(<span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并法求逆序对数</title>
      <link href="/1970/01/01/TemLib/%E5%BD%92%E5%B9%B6%E6%B3%95%E6%B1%82%E9%80%86%E5%BA%8F%E5%AF%B9%E6%95%B0/"/>
      <url>/1970/01/01/TemLib/%E5%BD%92%E5%B9%B6%E6%B3%95%E6%B1%82%E9%80%86%E5%BA%8F%E5%AF%B9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="P1908-逆序对"><a href="#P1908-逆序对" class="headerlink" title="P1908 逆序对"></a><a href="https://www.luogu.com.cn/problem/P1908">P1908 逆序对</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Inverted Sequence Numbers</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//different from only Merge Sort:&quot;//Diff&quot; </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn=<span class="number">500000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>(c=<span class="built_in">getchar</span>(),c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">register</span> <span class="keyword">int</span> <span class="title">x</span><span class="params">(c-<span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(c=<span class="built_in">getchar</span>(),c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x=x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[MAXn+<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> tmp[MAXn+<span class="number">10</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;<span class="comment">//Diff</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> ll, <span class="keyword">int</span> rr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rr - ll &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = ll + (rr - ll &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">merge</span>(ll, mid);</span><br><span class="line">    <span class="built_in">merge</span>(mid, rr);</span><br><span class="line">    <span class="keyword">int</span> p = ll, q = mid, s = ll;</span><br><span class="line">    <span class="keyword">while</span> (s &lt; rr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p &gt;= mid || (q &lt; rr &amp;&amp; a[p] &gt; a[q])) &#123;</span><br><span class="line">            tmp[s++] = a[q++];</span><br><span class="line">            ans += mid - p;<span class="comment">//Diff</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp[s++] = a[p++];          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ll; i &lt; rr; i++) &#123;</span><br><span class="line">        a[i] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] = <span class="built_in">read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">merge</span>(<span class="number">0</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);<span class="comment">//Diff</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快读</title>
      <link href="/1970/01/01/TemLib/%E5%BF%AB%E8%AF%BB/"/>
      <url>/1970/01/01/TemLib/%E5%BF%AB%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速乘</title>
      <link href="/1970/01/01/TemLib/%E5%BF%AB%E9%80%9F%E4%B9%98/"/>
      <url>/1970/01/01/TemLib/%E5%BF%AB%E9%80%9F%E4%B9%98/</url>
      
        <content type="html"><![CDATA[<p><del>龟速乘</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">mul</span><span class="params">(T x, T y, T mod)</span> </span>&#123;</span><br><span class="line">    x %= mod; y %= mod;</span><br><span class="line">    T ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = (ans + x) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        x = (x + x) % mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速傅里叶变换(fft)</title>
      <link href="/1970/01/01/TemLib/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2(fft)/"/>
      <url>/1970/01/01/TemLib/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2(fft)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3803">Luogu P3803 【模板】多项式乘法（FFT）</a></p><p>需要注意的是，题目中要开几十万个 <code>Complex</code>，而且和矩阵乘法不同的是代码中没有开非全局变量的 <code>Complex</code> 的需求，所以可以不用写构造函数，节省一些运行时间。</p><p>代码中的变量 <code>n</code> 的意义是多项式的长度，也就是度数加一，而非度数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> twoPI = <span class="built_in">acos</span>(<span class="number">-1</span>) * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="keyword">inline</span> Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> Complex sec) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex&#123;x: x + sec.x, y: y + sec.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> Complex <span class="keyword">operator</span>-(<span class="keyword">const</span> Complex sec) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex&#123;x: x - sec.x, y: y - sec.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> Complex <span class="keyword">operator</span>*(<span class="keyword">const</span> Complex sec) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Complex&#123;x: x * sec.x - y * sec.y, y: x * sec.y + y * sec.x&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Complex Zero = Complex&#123;x: <span class="number">0</span>, y: <span class="number">0</span>&#125;,</span><br><span class="line">        One = Complex&#123;x: <span class="number">1</span>, y: <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> swp[MAXN + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaSwp</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mxdeg = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        swp[i] = (swp[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) + ((i &amp; <span class="number">1</span>) ? mxdeg : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swp</span><span class="params">(<span class="keyword">int</span> n, Complex *a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (swp[i] &gt; i) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[i], a[swp[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">int</span> n, Complex *a, <span class="keyword">int</span> getinv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Swp</span>(n, a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>, halflen = <span class="number">1</span>; len &lt;= n; len &lt;&lt;= <span class="number">1</span>, halflen &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        Complex wlen = Complex&#123;x: <span class="built_in">cos</span>(twoPI / len), y: <span class="built_in">sin</span>(twoPI / len)&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>, r = len - <span class="number">1</span>; r &lt; n; l += len, r += len) &#123;</span><br><span class="line">            Complex w = One;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l, j = l + halflen; j &lt;= r; ++i, ++j, w = w * wlen) &#123;</span><br><span class="line">                Complex u = a[i],</span><br><span class="line">                        v = a[j] * w;</span><br><span class="line">                a[i] = u + v;</span><br><span class="line">                a[j] = u - v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getinv == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(a + <span class="number">1</span>, a + n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            a[i].x /= n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂</title>
      <link href="/1970/01/01/TemLib/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
      <url>/1970/01/01/TemLib/%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<h2 id="P1226-【模板】快速幂-取余运算"><a href="#P1226-【模板】快速幂-取余运算" class="headerlink" title="P1226 【模板】快速幂||取余运算"></a><a href="https://www.luogu.com.cn/problem/P1226">P1226 【模板】快速幂||取余运算</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e7</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = ((LL)ans * x) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        x = ((LL)x * x) % MOD;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/1970/01/01/TemLib/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/1970/01/01/TemLib/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="P1177-【模板】快速排序"><a href="#P1177-【模板】快速排序" class="headerlink" title="P1177 【模板】快速排序"></a><a href="https://www.luogu.com.cn/problem/P1177">P1177 【模板】快速排序</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">void</span> _QuickSort_(<span class="keyword">int</span>* a, <span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line">    <span class="keyword">int</span> i = l, j = r, f = a[(l + r) / <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[i] &lt; f) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (a[j] &gt; f) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= j) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = a[i];</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            a[j] = tmp;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &lt;= j);</span><br><span class="line">    <span class="keyword">if</span> (l &lt; j) &#123;</span><br><span class="line">        _QuickSort_(a, l, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; r) &#123;</span><br><span class="line">        _QuickSort_(a, i, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    _QuickSort_(a, l, r - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] = <span class="built_in">read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">QuickSort</span>(a, <span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速数论变换(ntt)</title>
      <link href="/1970/01/01/TemLib/%E5%BF%AB%E9%80%9F%E6%95%B0%E8%AE%BA%E5%8F%98%E6%8D%A2(ntt)/"/>
      <url>/1970/01/01/TemLib/%E5%BF%AB%E9%80%9F%E6%95%B0%E8%AE%BA%E5%8F%98%E6%8D%A2(ntt)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3803">Luogu P3803 【模板】多项式乘法（FFT）</a></p><p>代码中的变量 <code>n</code> 的意义是多项式的长度，也就是度数加一，而非度数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">998244353</span>, G = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> swp[MAXN + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaSwp</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mxdeg = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        swp[i] = (swp[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) + ((i &amp; <span class="number">1</span>) ? mxdeg : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swp</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (swp[i] &gt; i) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[i], a[swp[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *a, <span class="keyword">int</span> getinv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Swp</span>(n, a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>, halflen = <span class="number">1</span>; len &lt;= n; len &lt;&lt;= <span class="number">1</span>, halflen &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> glen = <span class="built_in">power</span>(G, (MOD - <span class="number">1</span>) / len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>, r = len - <span class="number">1</span>; r &lt; n; l += len, r += len) &#123;</span><br><span class="line">            <span class="keyword">int</span> g = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l, j = l + halflen; j &lt;= r; ++i, ++j, g = g * glen % MOD) &#123;</span><br><span class="line">                <span class="keyword">int</span> u = a[i],</span><br><span class="line">                    v = a[j] * g % MOD;</span><br><span class="line">                a[i] = <span class="built_in">addmod</span>(u + v);</span><br><span class="line">                a[j] = <span class="built_in">redmod</span>(u - v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getinv == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(a + <span class="number">1</span>, a + n);</span><br><span class="line">        <span class="keyword">int</span> invn = <span class="built_in">inv</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            a[i] = a[i] * invn % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速莫比乌斯变换(fmt) &amp; 快速沃尔什-阿达玛变换(fwt)</title>
      <link href="/1970/01/01/TemLib/%E5%BF%AB%E9%80%9F%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%98%E6%8D%A2(fmt)%20&amp;%20%E5%BF%AB%E9%80%9F%E6%B2%83%E5%B0%94%E4%BB%80-%E9%98%BF%E8%BE%BE%E7%8E%9B%E5%8F%98%E6%8D%A2(fwt)/"/>
      <url>/1970/01/01/TemLib/%E5%BF%AB%E9%80%9F%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%98%E6%8D%A2(fmt)%20&amp;%20%E5%BF%AB%E9%80%9F%E6%B2%83%E5%B0%94%E4%BB%80-%E9%98%BF%E8%BE%BE%E7%8E%9B%E5%8F%98%E6%8D%A2(fwt)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4717">Luogu P4717 【模板】快速莫比乌斯/沃尔什变换 (FMT/FWT)</a></p><p>代码中的变量 <code>n</code> 的意义是多项式的长度，也就是度数加一，而非度数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> inv2 = <span class="built_in">inv</span>(<span class="number">2</span>);</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Or</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    y = <span class="built_in">addmod</span>(y + x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">OrInv</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    y = <span class="built_in">redmod</span>(y - x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">And</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">addmod</span>(x + y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AndInv</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">redmod</span>(x - y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Xor</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = x, v = y;</span><br><span class="line">    x = <span class="built_in">addmod</span>(u + v);</span><br><span class="line">    y = <span class="built_in">redmod</span>(u - v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">XorInv</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = x, v = y;</span><br><span class="line">    x = <span class="built_in">addmod</span>(u + v) * inv2 % MOD;</span><br><span class="line">    y = <span class="built_in">redmod</span>(u - v) * inv2 % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FMTFWT</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *a, <span class="keyword">void</span> (*oper)(<span class="keyword">int</span> &amp;, <span class="keyword">int</span> &amp;))</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>, halflen = <span class="number">1</span>; len &lt;= n; len &lt;&lt;= <span class="number">1</span>, halflen &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>, r = len - <span class="number">1</span>; r &lt; n; l += len, r += len) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l, j = l + halflen; j &lt;= r; ++i, ++j) &#123;</span><br><span class="line">                <span class="built_in">oper</span>(a[i], a[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩展欧几里得定理(exgcd)</title>
      <link href="/1970/01/01/TemLib/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E5%AE%9A%E7%90%86(exgcd)/"/>
      <url>/1970/01/01/TemLib/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E5%AE%9A%E7%90%86(exgcd)/</url>
      
        <content type="html"><![CDATA[<h2 id="P1082-NOIP2012-提高组-同余方程"><a href="#P1082-NOIP2012-提高组-同余方程" class="headerlink" title="P1082 [NOIP2012 提高组] 同余方程"></a><a href="https://www.luogu.com.cn/problem/P1082">P1082 [NOIP2012 提高组] 同余方程</a></h2><h2 id="P5656-【模板】二元一次不定方程-exgcd"><a href="#P5656-【模板】二元一次不定方程-exgcd" class="headerlink" title="P5656 【模板】二元一次不定方程 (exgcd)"></a><a href="https://www.luogu.com.cn/problem/P5656">P5656 【模板】二元一次不定方程 (exgcd)</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">        y -= a / b * x;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a, b, d, x, y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    d = <span class="built_in">exgcd</span>(a, b, x, y);</span><br><span class="line">    x *= d;</span><br><span class="line">    x = (x % b + b) % b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插头dp</title>
      <link href="/1970/01/01/TemLib/%E6%8F%92%E5%A4%B4dp/"/>
      <url>/1970/01/01/TemLib/%E6%8F%92%E5%A4%B4dp/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P5056">Luogu P5056【模板】插头dp</a></p><p>其实我觉得叫插头 dp，不如叫拼图 dp 更形象。</p><p>可以将代码中注释起来的有 <code>exit(1)</code> 的行取消注释，如果代码没有漏洞，则不会触发 <code>exit(1)</code>，反之则可能触发。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXcntsta = <span class="number">5e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1009</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; hx[<span class="number">2</span>][MOD + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Clear</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MOD; ++i) &#123;</span><br><span class="line">        hx[idx][i].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> k, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hxk = k % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="built_in">begin</span>(hx[idx][hxk]), topi = <span class="built_in">end</span>(hx[idx][hxk]); i != topi; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((*i).first == k) &#123;</span><br><span class="line">            (*i).second += v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hx[idx][hxk].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(k, v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">deg</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> deg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num &gt;&gt; (deg &lt;&lt; <span class="number">1</span>)) &amp; <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">assdeg</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> deg, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num &amp; ~(<span class="number">3</span> &lt;&lt; (deg &lt;&lt; <span class="number">1</span>))) | (val &lt;&lt; (deg &lt;&lt; <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, ans; <span class="keyword">char</span> a[MAXn + <span class="number">10</span>][MAXm + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a[i] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> begini, beginj, endi, endj;</span><br><span class="line">    <span class="keyword">bool</span> ok = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                begini = i, beginj = j;</span><br><span class="line">                ok = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ok) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ok = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j; --j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                endi = i, endj = j;</span><br><span class="line">                ok = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ok) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = begini; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = (i == begini) ? beginj : <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = ((i - <span class="number">1</span>) * m + j) &amp; <span class="number">1</span>, last = now ^ <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> x = j - <span class="number">1</span>, y = j;</span><br><span class="line">            <span class="keyword">if</span> (i == begini &amp;&amp; j == beginj) <span class="built_in">Add</span>(last, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">Clear</span>(now);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; MOD; ++k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hx[last][k].<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> l = <span class="built_in">begin</span>(hx[last][k]), topl = <span class="built_in">end</span>(hx[last][k]); l != topl; ++l) &#123;</span><br><span class="line">                    <span class="keyword">int</span> sta = (*l).first, val = (*l).second;</span><br><span class="line">                    <span class="keyword">if</span> (!val) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">int</span> degx = <span class="built_in">deg</span>(sta, x), degy = <span class="built_in">deg</span>(sta, y);</span><br><span class="line">                    <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (degx == <span class="number">0</span> &amp;&amp; degy == <span class="number">0</span>) <span class="built_in">Add</span>(now, sta, val);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (degx == <span class="number">0</span> &amp;&amp; degy == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (i != n &amp;&amp; j != m) <span class="built_in">Add</span>(now, <span class="built_in">assdeg</span>(<span class="built_in">assdeg</span>(sta, x, <span class="number">1</span>), y, <span class="number">2</span>), val);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (degx &amp;&amp; degy == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (i != n) <span class="built_in">Add</span>(now, sta, val);</span><br><span class="line">                            <span class="keyword">if</span> (j != m) <span class="built_in">Add</span>(now, <span class="built_in">assdeg</span>(<span class="built_in">assdeg</span>(sta, x, <span class="number">0</span>), y, degx), val);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (degx == <span class="number">0</span> &amp;&amp; degy) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (i != n) <span class="built_in">Add</span>(now, <span class="built_in">assdeg</span>(<span class="built_in">assdeg</span>(sta, x, degy), y, <span class="number">0</span>), val);</span><br><span class="line">                            <span class="keyword">if</span> (j != m) <span class="built_in">Add</span>(now, sta, val);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (degx == <span class="number">1</span> &amp;&amp; degy == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">int</span> tmpsta = sta;</span><br><span class="line">                            tmpsta = <span class="built_in">assdeg</span>(<span class="built_in">assdeg</span>(tmpsta, x, <span class="number">0</span>), y, <span class="number">0</span>);</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> o = y + <span class="number">1</span>, cnt = <span class="number">1</span>; ; ++o) &#123;</span><br><span class="line">                                <span class="keyword">int</span> dego = <span class="built_in">deg</span>(tmpsta, o);</span><br><span class="line">                                <span class="keyword">if</span> (dego == <span class="number">1</span>) ++cnt;</span><br><span class="line">                                <span class="keyword">else</span> <span class="keyword">if</span> (dego == <span class="number">2</span>) --cnt;</span><br><span class="line">                                <span class="keyword">if</span> (!cnt) &#123;</span><br><span class="line">                                    tmpsta = <span class="built_in">assdeg</span>(tmpsta, o, <span class="number">1</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="built_in">Add</span>(now, tmpsta, val);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (degx == <span class="number">2</span> &amp;&amp; degy == <span class="number">2</span>) &#123;</span><br><span class="line">                            <span class="comment">// if (i == n) exit(1);</span></span><br><span class="line">                            <span class="keyword">int</span> tmpsta = sta;</span><br><span class="line">                            tmpsta = <span class="built_in">assdeg</span>(<span class="built_in">assdeg</span>(tmpsta, x, <span class="number">0</span>), y, <span class="number">0</span>);</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> o = x - <span class="number">1</span>, cnt = <span class="number">1</span>; ; --o) &#123;</span><br><span class="line">                                <span class="keyword">int</span> dego = <span class="built_in">deg</span>(tmpsta, o);</span><br><span class="line">                                <span class="keyword">if</span> (dego == <span class="number">1</span>) --cnt;</span><br><span class="line">                                <span class="keyword">else</span> <span class="keyword">if</span> (dego == <span class="number">2</span>) ++cnt;</span><br><span class="line">                                <span class="keyword">if</span> (!cnt) &#123;</span><br><span class="line">                                    tmpsta = <span class="built_in">assdeg</span>(tmpsta, o, <span class="number">2</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="built_in">Add</span>(now, tmpsta, val);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (degx == <span class="number">2</span> &amp;&amp; degy == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="comment">// if (i == n) exit(1);</span></span><br><span class="line">                            <span class="built_in">Add</span>(now, <span class="built_in">assdeg</span>(<span class="built_in">assdeg</span>(sta, x, <span class="number">0</span>), y, <span class="number">0</span>), val);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == endi &amp;&amp; j == endj) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (!<span class="built_in">assdeg</span>(<span class="built_in">assdeg</span>(sta, x, <span class="number">0</span>), y, <span class="number">0</span>)) ans += val;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; MOD; ++k) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (hx[now][k].<span class="built_in">empty</span>()) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">auto</span> l = <span class="built_in">begin</span>(hx[now][k]), topl = <span class="built_in">end</span>(hx[now][k]); l != topl; ++l) &#123;</span><br><span class="line">                        <span class="comment">// if (deg((*l).first, m)) exit(1);</span></span><br><span class="line">                        (*l).first &lt;&lt;= <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整体二分解静态区间第k小</title>
      <link href="/1970/01/01/TemLib/%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86%E8%A7%A3%E9%9D%99%E6%80%81%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%B0%8F/"/>
      <url>/1970/01/01/TemLib/%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86%E8%A7%A3%E9%9D%99%E6%80%81%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="P3834【模板】可持久化线段树-2（主席树）"><a href="#P3834【模板】可持久化线段树-2（主席树）" class="headerlink" title="P3834【模板】可持久化线段树 2（主席树）"></a><a href="https://www.luogu.com.cn/problem/P3834">P3834【模板】可持久化线段树 2（主席树）</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">2e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">2e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXai = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>);<span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;<span class="keyword">register</span> T x = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> top, t[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x) &amp; (-(x)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildUseSum</span><span class="params">(<span class="keyword">int</span> *sum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        t[i] = sum[i] - sum[i - <span class="built_in">lowbit</span>(i)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (p &lt;= top) &#123;</span><br><span class="line">        t[p] += v;</span><br><span class="line">        p += <span class="built_in">lowbit</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EvaSum</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        ans += t[p];</span><br><span class="line">        p -= <span class="built_in">lowbit</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, cnt, ans[MAXm + <span class="number">10</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ele</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> idx, v, l, r, opt;</span><br><span class="line">    <span class="built_in">Ele</span>(): <span class="built_in">idx</span>(<span class="number">0</span>), <span class="built_in">v</span>(<span class="number">0</span>), <span class="built_in">l</span>(<span class="number">0</span>), <span class="built_in">r</span>(<span class="number">0</span>), <span class="built_in">opt</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">Ele</span>(<span class="keyword">int</span> idx_, <span class="keyword">int</span> v_, <span class="keyword">int</span> l_, <span class="keyword">int</span> r_, <span class="keyword">int</span> opt_): </span><br><span class="line">        <span class="built_in">idx</span>(idx_), <span class="built_in">v</span>(v_), <span class="built_in">l</span>(l_), <span class="built_in">r</span>(r_), <span class="built_in">opt</span>(opt_) &#123;&#125;</span><br><span class="line">&#125;a[MAXn + MAXm + <span class="number">10</span>], a1[MAXn + MAXm + <span class="number">10</span>], a2[MAXn + MAXm + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Div</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (L == R) &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i].opt) &#123;</span><br><span class="line">                ans[a[i].idx] = L;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt1 = <span class="number">0</span>; <span class="keyword">int</span> cnt2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!a[i].opt) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i].v &lt;= mid) &#123;</span><br><span class="line">                    a1[++cnt1] = a[i];</span><br><span class="line">                    <span class="built_in">Add</span>(a[i].idx, <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    a2[++cnt2] = a[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> x = <span class="built_in">EvaSum</span>(a[i].r) - <span class="built_in">EvaSum</span>(a[i].l - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (a[i].v &lt;= x) &#123;</span><br><span class="line">                    a1[++cnt1] = a[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    a[i].v -= x;</span><br><span class="line">                    a2[++cnt2] = a[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!a1[i].opt) &#123;</span><br><span class="line">                <span class="built_in">Add</span>(a1[i].idx, <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt1; ++i) &#123;</span><br><span class="line">            a[l + i - <span class="number">1</span>] = a1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt2; ++i) &#123;</span><br><span class="line">            a[l + cnt1 + i - <span class="number">1</span>] = a2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Div</span>(L, mid, l, l + cnt1 - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">Div</span>(mid + <span class="number">1</span>, R, l + cnt1, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    top = n;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, v; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(v);</span><br><span class="line">        a[++cnt] = <span class="built_in">Ele</span>(i, v, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, l, r, k; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(l), <span class="built_in">read</span>(r), <span class="built_in">read</span>(k);</span><br><span class="line">        a[++cnt] = <span class="built_in">Ele</span>(i, k, l, r, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Div</span>(-MAXai, MAXai, <span class="number">1</span>, cnt);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>折半搜索</title>
      <link href="/1970/01/01/TemLib/%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2/"/>
      <url>/1970/01/01/TemLib/%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4799">P4799 [CEOI2015 Day2]世界冰球锦标赛</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; map1, map2;</span><br><span class="line"><span class="keyword">int</span> n, midn, W, w[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, W);</span><br><span class="line">    midn = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    map1[<span class="number">0</span>] = map2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= midn; ++i) &#123;</span><br><span class="line">        <span class="keyword">auto</span> j = <span class="built_in">end</span>(map1), bottomj = <span class="built_in">begin</span>(map1);</span><br><span class="line">        <span class="keyword">for</span> (--j; ; --j) &#123;</span><br><span class="line">            map1[(*j).first + w[i]] += map1[(*j).first];</span><br><span class="line">            <span class="keyword">if</span> (j == bottomj) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = midn + <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">auto</span> j = <span class="built_in">end</span>(map2), bottomj = <span class="built_in">begin</span>(map2);</span><br><span class="line">        <span class="keyword">for</span> (--j; ; --j) &#123;</span><br><span class="line">            map2[(*j).first + w[i]] += map2[(*j).first];</span><br><span class="line">            <span class="keyword">if</span> (j == bottomj) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> j = <span class="built_in">begin</span>(map2), topj = <span class="built_in">end</span>(map2);</span><br><span class="line">    <span class="keyword">auto</span> i = <span class="built_in">end</span>(map1), bottomi = <span class="built_in">begin</span>(map1);</span><br><span class="line">    <span class="keyword">for</span> (--i; ; --i) &#123;</span><br><span class="line">        <span class="keyword">int</span> topmapj = W - (*i).first;</span><br><span class="line">        <span class="keyword">while</span> (j != topj &amp;&amp; (*j).first &lt;= topmapj) &#123;</span><br><span class="line">            sum += (*j).second;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += (*i).second * sum;</span><br><span class="line">        <span class="keyword">if</span> (i == bottomi) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斜率优化dp &amp; Luogu P3195 [HNOI2008]玩具装箱</title>
      <link href="/1970/01/01/TemLib/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96dp%20&amp;%20Luogu%20P3195%20%5BHNOI2008%5D%E7%8E%A9%E5%85%B7%E8%A3%85%E7%AE%B1/"/>
      <url>/1970/01/01/TemLib/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96dp%20&amp;%20Luogu%20P3195%20%5BHNOI2008%5D%E7%8E%A9%E5%85%B7%E8%A3%85%E7%AE%B1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3195">题目传送门</a></p><p>本题状转方程：</p><script type="math/tex; mode=display">\begin{aligned}d_i&=\min_{j<i}\{d_j+(sum_i-sum_j+i-j-1-L)^2\}\\&=\min_{j<i}\{d_j+((-1-L+sum_i+i)-(j+sum_j))^2\}\\&设A_i=-1-L+sum_i+i,B_i=i+sum_i\\&=\min_{j<i}\{d_j+(A_i-B_j)^2\}\\&=\min_{j<i}\{d_j+B_j^2-2\times A_i \times B_j\}+A_i^2\end{aligned}</script><p>推式子的方向是将只含 $j$（决策）的，既含 $j$（决策）又含 $i$（状态）的和不含 $j$ 的分别放在一起。</p><p>于是只含 $j$ 的 $d_j+B_j^2$、既含 $j$ 又含 $i$（斜率优化要求含 $i$ 与 $j$ 这一部分中这两者的关系是相乘）的 $2\times A_i \times B_j$、和什么都不含的 $A_i^2$。</p><p><img src="https://figurebed-1306986731.file.myqcloud.com/blog/2021/10/07/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96dp%20%26%20Luogu%20P3195%20%5BHNOI2008%5D%E7%8E%A9%E5%85%B7%E8%A3%85%E7%AE%B1/1.png" alt=""></p><p>只含 $j$ 的部分就是<strong>决策点</strong>的 $y$ 坐标，既含 $j$ 又含 $i$ 的部分比较复杂：将这一部分分为只含 $i$ 的 $part1$ 和只含 $j$ 的 $part2$（系数归谁无所谓），$part2$ 就是<strong>决策点</strong>的 $x$ 坐标，而 $part1$ 的相反数是<strong>状态线</strong>的斜率。本题 $x_i=B_i$，$y_i=d_i+B_i^2$，$k_i=-(-(2\times A_i))=2\times A_i$。</p><p><strong>注意：决策点</strong> $x$ 坐标必须满足随状态的下标（$i$）增加而单增。</p><p>上（下）凸壳维护即可，二分查询。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">5e4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>);<span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;<span class="keyword">register</span> T x = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;n, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="keyword">int</span> idx;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point sec) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == sec.x) &#123;</span><br><span class="line">            <span class="keyword">return</span> y &lt; sec.y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x &lt; sec.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">k</span><span class="params">(Point a, Point b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b.y - a.y) / (b.x - a.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">cp</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a2.x - a1.x) * (b2.y - b1.y) - (b2.x - b1.x) * (a2.y - a1.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, L, sum[MAXn + <span class="number">10</span>], d[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> top; Point stk[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Div</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> r;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">k</span>(stk[mid], stk[mid + <span class="number">1</span>]) &gt;= x) &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, L);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, a; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a);</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + a;</span><br><span class="line">    &#125;</span><br><span class="line">    stk[++top] = Point&#123;x: <span class="number">0</span>, y: <span class="number">0</span>, idx: <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> Ai = (<span class="number">-1</span> - L + sum[i] + i), Bi = i + sum[i];</span><br><span class="line">        <span class="keyword">int</span> j = <span class="built_in">Div</span>(<span class="number">1</span>, top - <span class="number">1</span>, <span class="number">2</span> * Ai);</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span> || (j == top - <span class="number">1</span> &amp;&amp; <span class="built_in">k</span>(stk[top - <span class="number">1</span>], stk[top]) &lt; <span class="number">2</span> * Ai)) &#123;</span><br><span class="line">            j = top;</span><br><span class="line">        &#125;</span><br><span class="line">        j = stk[j].idx;</span><br><span class="line">        <span class="keyword">int</span> Bj = j + sum[j];</span><br><span class="line">        d[i] = d[j] + (Ai - Bj) * (Ai - Bj);</span><br><span class="line">        Point nowpoint = Point&#123;x: (<span class="keyword">double</span>)Bi, y: (<span class="keyword">double</span>)d[i] + Bi * Bi, idx: i&#125;;</span><br><span class="line">        <span class="keyword">while</span> (top &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">cp</span>(stk[top - <span class="number">1</span>], stk[top], stk[top], nowpoint) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            --top;</span><br><span class="line">        &#125;</span><br><span class="line">        stk[++top] = nowpoint;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, d[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 模板 </tag>
            
            <tag> 几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转卡壳 &amp; 最小矩形覆盖</title>
      <link href="/1970/01/01/TemLib/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3%20&amp;%20%E6%9C%80%E5%B0%8F%E7%9F%A9%E5%BD%A2%E8%A6%86%E7%9B%96/"/>
      <url>/1970/01/01/TemLib/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3%20&amp;%20%E6%9C%80%E5%B0%8F%E7%9F%A9%E5%BD%A2%E8%A6%86%E7%9B%96/</url>
      
        <content type="html"><![CDATA[<h3 id="旋转卡壳"><a href="#旋转卡壳" class="headerlink" title="旋转卡壳"></a>旋转卡壳</h3><p><a href="https://www.luogu.com.cn/problem/P1452">Luogu P1452 USACO03FALL Beauty Contest G /【模板】旋转卡壳</a></p><p>注意 <code>stk</code> 数组要开二倍。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaConv</span><span class="params">(Point p[], <span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Rotate</span><span class="params">(Point p[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">EvaConv</span>(p, n);</span><br><span class="line">    <span class="keyword">if</span> (top &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dist</span>(p[stk[<span class="number">1</span>]], p[stk[top]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">copy</span>(stk + <span class="number">1</span>, stk + top + <span class="number">1</span>, stk + top + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">3</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; top * <span class="number">2</span> &amp;&amp; <span class="built_in">area</span>(p[stk[i]], p[stk[i + <span class="number">1</span>]], p[stk[j]]) &lt;= <span class="built_in">area</span>(p[stk[i]], p[stk[i + <span class="number">1</span>]], p[stk[j + <span class="number">1</span>]])) ++j;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, <span class="built_in">max</span>(<span class="built_in">dist</span>(p[stk[i]], p[stk[j]]), <span class="built_in">dist</span>(p[stk[i + <span class="number">1</span>]], p[stk[j]])));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小矩形覆盖"><a href="#最小矩形覆盖" class="headerlink" title="最小矩形覆盖"></a>最小矩形覆盖</h3><p><a href="https://www.luogu.com.cn/problem/P3187">Luogu P3187 HNOI2007 最小矩形覆盖</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaConv</span><span class="params">(Point p[], <span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rotate</span><span class="params">(Point p[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">EvaConv</span>(p, n);</span><br><span class="line">    <span class="keyword">if</span> (top &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">copy</span>(stk + <span class="number">1</span>, stk + top + <span class="number">1</span>, stk + top + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">3</span>, k = <span class="number">2</span>, l, topidx = top * <span class="number">2</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; topidx &amp;&amp; <span class="built_in">area</span>(p[stk[i]], p[stk[i + <span class="number">1</span>]], p[stk[j]]) &lt;= <span class="built_in">area</span>(p[stk[i]], p[stk[i + <span class="number">1</span>]], p[stk[j + <span class="number">1</span>]])) ++j;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; topidx &amp;&amp; <span class="built_in">proj</span>(p[stk[i]], p[stk[i + <span class="number">1</span>]], p[stk[k]]) &lt;= <span class="built_in">proj</span>(p[stk[i]], p[stk[i + <span class="number">1</span>]], p[stk[k + <span class="number">1</span>]])) ++k;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) l = j;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; topidx &amp;&amp; <span class="built_in">proj</span>(p[stk[i]], p[stk[i + <span class="number">1</span>]], p[stk[l]]) &gt;= <span class="built_in">proj</span>(p[stk[i]], p[stk[i + <span class="number">1</span>]], p[stk[l + <span class="number">1</span>]])) ++l;</span><br><span class="line">        <span class="keyword">double</span> h = <span class="built_in">poi_dist_str</span>(p[stk[i]], p[stk[i + <span class="number">1</span>]], p[stk[j]]);</span><br><span class="line">        Point kproji = <span class="built_in">poi_proj_str</span>(p[stk[i]], p[stk[i + <span class="number">1</span>]], p[stk[k]]), lproji = <span class="built_in">poi_proj_str</span>(p[stk[i]], p[stk[i + <span class="number">1</span>]], p[stk[l]]);</span><br><span class="line">        <span class="keyword">double</span> w = <span class="built_in">length</span>(kproji - lproji);</span><br><span class="line">        <span class="keyword">if</span> (ans &gt; h * w) &#123;</span><br><span class="line">            Point jprojk = <span class="built_in">poi_proj_str</span>(kproji + <span class="built_in">rotate</span>(lproji - kproji, -PI / <span class="number">2</span>), kproji, p[stk[j]]),</span><br><span class="line">                  jprojl = <span class="built_in">poi_proj_str</span>(lproji + <span class="built_in">rotate</span>(kproji - lproji, PI / <span class="number">2</span>), lproji, p[stk[j]]);</span><br><span class="line">            ans = h * w;</span><br><span class="line">            ansp[<span class="number">0</span>] = lproji; ansp[<span class="number">1</span>] = kproji; ansp[<span class="number">2</span>] = jprojk; ansp[<span class="number">3</span>] = jprojl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大流</title>
      <link href="/1970/01/01/TemLib/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
      <url>/1970/01/01/TemLib/%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3376">P3376 【模板】网络最大流</a></p><h4 id="1-Ek-算法"><a href="#1-Ek-算法" class="headerlink" title="1. Ek 算法"></a>1. Ek 算法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> l, r, que[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXn + <span class="number">10</span>]; <span class="keyword">int</span> lim[MAXn + <span class="number">10</span>], fromeg[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    que[++r] = s;</span><br><span class="line">    vis[s] = <span class="number">1</span>;</span><br><span class="line">    lim[s] = INF;</span><br><span class="line">    fromeg[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cur;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        cur = que[l++];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!c[i] || vis[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">            que[++r] = to[i];</span><br><span class="line">            vis[to[i]] = <span class="number">1</span>;</span><br><span class="line">            lim[to[i]] = <span class="built_in">min</span>(lim[cur], c[i]);</span><br><span class="line">            fromeg[to[i]] = i;</span><br><span class="line">            <span class="keyword">if</span> (to[i] == t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fmx;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ek</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">        fmx += lim[t];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> eg = fromeg[t]; eg; eg = fromeg[to[eg ^ <span class="number">1</span>]]) &#123;</span><br><span class="line">            c[eg] -= lim[t];</span><br><span class="line">            c[eg ^ <span class="number">1</span>] += lim[t];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Dinic-算法"><a href="#2-Dinic-算法" class="headerlink" title="2. Dinic 算法"></a>2. Dinic 算法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span> lay[MAXn + <span class="number">10</span>], arc[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> l, r, que[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(lay, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(lay));</span><br><span class="line">    l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    que[++r] = s;</span><br><span class="line">    lay[s] = <span class="number">0</span>; arc[s] = head[s];</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = que[l++];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (~lay[to[i]] || !cap[i]) <span class="keyword">continue</span>;</span><br><span class="line">            lay[to[i]] = lay[cur] + <span class="number">1</span>; arc[to[i]] = head[to[i]];</span><br><span class="line">            <span class="keyword">if</span> (to[i] == t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            que[++r] = to[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> t, <span class="keyword">int</span> lim)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur == t) <span class="keyword">return</span> lim;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arc[cur]; i &amp;&amp; ans &lt; lim; i = nex[i]) &#123;</span><br><span class="line">        arc[cur] = i;</span><br><span class="line">        <span class="keyword">if</span> (lay[to[i]] != lay[cur] + <span class="number">1</span> || !cap[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> flow = <span class="built_in">dfs</span>(to[i], t, <span class="built_in">min</span>(lim - ans, cap[i]));</span><br><span class="line">        <span class="keyword">if</span> (!flow) lay[to[i]] = <span class="number">-1</span>;</span><br><span class="line">        cap[i] -= flow; cap[i ^ <span class="number">1</span>] += flow;</span><br><span class="line">        ans += flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dinic</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) ans += <span class="built_in">dfs</span>(s, t, INF);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小树形图</title>
      <link href="/1970/01/01/TemLib/%E6%9C%80%E5%B0%8F%E6%A0%91%E5%BD%A2%E5%9B%BE/"/>
      <url>/1970/01/01/TemLib/%E6%9C%80%E5%B0%8F%E6%A0%91%E5%BD%A2%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4716">P4716 【模板】最小树形图</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">1e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cntnd, eg[MAXn + <span class="number">10</span>][MAXn + <span class="number">10</span>], tmpeg[MAXn + <span class="number">10</span>][MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> pre[MAXn + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CheckCon</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    vis[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntnd; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (eg[cur][i] == INF || vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">        ans += <span class="built_in">CheckCon</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cntdfs, dfs[MAXn + <span class="number">10</span>], low[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntscc, inscc[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> top, stk[MAXn + <span class="number">10</span>]; <span class="keyword">bool</span> instk[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    dfs[cur] = low[cur] = ++cntdfs;</span><br><span class="line">    stk[++top] = cur; instk[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pre[cur]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfs[pre[cur]]) &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(pre[cur]);</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], low[pre[cur]]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (instk[pre[cur]]) &#123;</span><br><span class="line">            low[cur] = <span class="built_in">min</span>(low[cur], dfs[pre[cur]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dfs[cur] == low[cur]) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        ++cntscc;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            x = stk[top--]; instk[x] = <span class="number">0</span>;</span><br><span class="line">            inscc[x] = cntscc;</span><br><span class="line">        &#125; <span class="keyword">while</span> (x != cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, root, ans;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m, root);</span><br><span class="line">    cntnd = n;</span><br><span class="line">    <span class="built_in">memset</span>(eg, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(eg));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(u, v, w);</span><br><span class="line">        <span class="keyword">if</span> (u == v) <span class="keyword">continue</span>;</span><br><span class="line">        eg[u][v] = <span class="built_in">min</span>(eg[u][v], w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CheckCon</span>(root) != cntnd) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntnd; ++i) &#123;</span><br><span class="line">            pre[i] = i;</span><br><span class="line">            <span class="keyword">if</span> (i == root) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cntnd; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (eg[j][i] &lt; eg[pre[i]][i]) &#123;</span><br><span class="line">                    pre[i] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dfs, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dfs));</span><br><span class="line">        cntdfs = cntscc = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntnd; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dfs[i]) <span class="built_in">Tarjan</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cntscc == cntnd) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntnd; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == root) <span class="keyword">continue</span>;</span><br><span class="line">                ans += eg[pre[i]][i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntnd; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == root) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (inscc[pre[i]] == inscc[i]) ans += eg[pre[i]][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(tmpeg, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(tmpeg));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x = inscc[i]; i &lt;= cntnd; ++i, x = inscc[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, y = inscc[j]; j &lt;= cntnd; ++j, y = inscc[j]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (eg[i][j] == INF || eg[pre[j]][j] == INF || x == y) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (inscc[pre[j]] != y) &#123;</span><br><span class="line">                    tmpeg[x][y] = <span class="built_in">min</span>(tmpeg[x][y], eg[i][j]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tmpeg[x][y] = <span class="built_in">min</span>(tmpeg[x][y], eg[i][j] - eg[pre[j]][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span>(eg, tmpeg, <span class="built_in"><span class="keyword">sizeof</span></span>(eg));</span><br><span class="line">        cntnd = cntscc;</span><br><span class="line">        root = inscc[root];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树</title>
      <link href="/1970/01/01/TemLib/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/1970/01/01/TemLib/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="P3366-【模板】最小生成树"><a href="#P3366-【模板】最小生成树" class="headerlink" title="P3366 【模板】最小生成树"></a><a href="https://www.luogu.com.cn/problem/P3366">P3366 【模板】最小生成树</a></h2><h4 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">5e3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">2e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> fa[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">anc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x] = fa[x] == x ? x : <span class="built_in">anc</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">anc</span>(x) != <span class="built_in">anc</span>(y)) &#123;</span><br><span class="line">        fa[<span class="built_in">anc</span>(x)] = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SameAnc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">anc</span>(x) == <span class="built_in">anc</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="built_in">Edge</span>():<span class="built_in">u</span>(<span class="number">0</span>), <span class="built_in">v</span>(<span class="number">0</span>), <span class="built_in">w</span>(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="keyword">int</span> u_, <span class="keyword">int</span> v_, <span class="keyword">int</span> w_):<span class="built_in">u</span>(u_), <span class="built_in">v</span>(v_), <span class="built_in">w</span>(w_)&#123;&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Edge x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;w &lt; x.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edge[MAXm + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(edge + <span class="number">1</span>, edge + <span class="number">1</span> + m);</span><br><span class="line">    <span class="built_in">Init</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">SameAnc</span>(edge[i].u, edge[i].v)) &#123;</span><br><span class="line">            ans += edge[i].w;</span><br><span class="line">            <span class="built_in">Merge</span>(edge[i].u, edge[i].v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v), <span class="built_in">read</span>(w);</span><br><span class="line">        edge[i] = <span class="built_in">Edge</span>(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="built_in">Kruskal</span>();</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">SameAnc</span>(i, i + <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;orz\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小费用最大流</title>
      <link href="/1970/01/01/TemLib/%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
      <url>/1970/01/01/TemLib/%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h4 id="1-无负环最小费用最大流"><a href="#1-无负环最小费用最大流" class="headerlink" title="1. 无负环最小费用最大流"></a>1. 无负环最小费用最大流</h4><p><a href="https://www.luogu.com.cn/problem/P3381">P3381 【模板】最小费用最大流</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> inque[MAXnd + <span class="number">10</span>], dis[MAXnd + <span class="number">10</span>], lim[MAXnd + <span class="number">10</span>], pre[MAXnd + <span class="number">10</span>];</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spfa</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(inque, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(inque));</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(lim, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(lim));</span><br><span class="line">    <span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(pre));</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    que.<span class="built_in">push</span>(s); inque[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = que.<span class="built_in">front</span>(); que.<span class="built_in">pop</span>(); inque[cur] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!cap[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (dis[to[i]] &gt; dis[cur] + wei[i]) &#123;</span><br><span class="line">                dis[to[i]] = dis[cur] + wei[i];</span><br><span class="line">                lim[to[i]] = <span class="built_in">min</span>(lim[cur], cap[i]);</span><br><span class="line">                pre[to[i]] = i;</span><br><span class="line">                <span class="keyword">if</span> (!inque[to[i]]) &#123;</span><br><span class="line">                    que.<span class="built_in">push</span>(to[i]); inque[to[i]] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ek</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> &amp;ansf, <span class="keyword">int</span> &amp;anscos)</span> </span>&#123;</span><br><span class="line">    ansf = <span class="number">0</span>, anscos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">Spfa</span>(s), dis[t] != INF) &#123;</span><br><span class="line">        ansf += lim[t];</span><br><span class="line">        anscos += lim[t] * dis[t];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> eg = pre[t]; eg; eg = pre[to[eg ^ <span class="number">1</span>]]) &#123;</span><br><span class="line">            cap[eg] -= lim[t]; cap[eg ^ <span class="number">1</span>] += lim[t];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-有负环最小费用最大流"><a href="#2-有负环最小费用最大流" class="headerlink" title="2. 有负环最小费用最大流"></a>2. 有负环最小费用最大流</h4><p><a href="https://www.luogu.com.cn/problem/P7173">P7173 【模板】有负圈的费用流</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m, s1, t1, s2, t2, ans1, ans2;</span><br><span class="line"><span class="keyword">int</span> startf[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> ansf, anscos;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cntnex = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">read</span>(n, m, s1, t1);</span><br><span class="line">    s2 = n + <span class="number">1</span>, t2 = n + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, c, w; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(u, v, c, w);</span><br><span class="line">        <span class="keyword">if</span> (w &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">Insert</span>(u, v, c, w); <span class="built_in">Insert</span>(v, u, <span class="number">0</span>, -w);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (w &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            startf[u] -= c, startf[v] += c;</span><br><span class="line">            ans2 += w * c;</span><br><span class="line">            <span class="built_in">Insert</span>(u, v, <span class="number">0</span>, w); <span class="built_in">Insert</span>(v, u, c, -w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (startf[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">Insert</span>(s2, i, startf[i], <span class="number">0</span>); <span class="built_in">Insert</span>(i, s2, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (startf[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">Insert</span>(i, t2, -startf[i], <span class="number">0</span>); <span class="built_in">Insert</span>(t2, i, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Insert</span>(t1, s1, INF, <span class="number">0</span>); <span class="built_in">Insert</span>(s1, t1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Ek</span>(s2, t2, ansf, anscos);</span><br><span class="line">    ans1 += cap[cntnex]; ans2 += anscos;</span><br><span class="line">    head[s1] = nex[head[s1]]; head[t1] = nex[head[t1]]; cntnex -= <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">Ek</span>(s1, t1, ansf, anscos);</span><br><span class="line">    ans1 += ansf; ans2 += anscos;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, ans1, ans2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路</title>
      <link href="/1970/01/01/TemLib/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
      <url>/1970/01/01/TemLib/%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="P3371-【模板】单源最短路径（弱化版）"><a href="#P3371-【模板】单源最短路径（弱化版）" class="headerlink" title="P3371 【模板】单源最短路径（弱化版）"></a><a href="https://www.luogu.com.cn/problem/P3371">P3371 【模板】单源最短路径（弱化版）</a></h2><h2 id="P4779-【模板】单源最短路径（标准版）"><a href="#P4779-【模板】单源最短路径（标准版）" class="headerlink" title="P4779 【模板】单源最短路径（标准版）"></a><a href="https://www.luogu.com.cn/problem/P4779">P4779 【模板】单源最短路径（标准版）</a></h2><h4 id="1-Dijkstra"><a href="#1-Dijkstra" class="headerlink" title="1. Dijkstra"></a>1. Dijkstra</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[MAXn + <span class="number">10</span>]; <span class="keyword">int</span> dis[MAXn + <span class="number">10</span>];</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    dis[root] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, root));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.<span class="built_in">top</span>().second; q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[cur]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[cur] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[to[i]] &gt; dis[cur] + wei[i]) &#123;</span><br><span class="line">                dis[to[i]] = dis[cur] + wei[i];</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-dis[to[i]], to[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Dijkstra</span>(root);</span><br></pre></td></tr></table></figure><h4 id="2-SPFA"><a href="#2-SPFA" class="headerlink" title="2. SPFA"></a>2. SPFA</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> inque[MAXn + <span class="number">10</span>]; <span class="keyword">int</span> dis[MAXn + <span class="number">10</span>];</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    dis[root] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(root); inque[root] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>(); inque[cur] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[to[i]] &gt; dis[cur] + wei[i]) &#123;</span><br><span class="line">                dis[to[i]] = dis[cur] + wei[i];</span><br><span class="line">                <span class="keyword">if</span> (!inque[to[i]]) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(to[i]); inque[to[i]] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SPFA</span>(root);</span><br></pre></td></tr></table></figure><h4 id="3-Floyd"><a href="#3-Floyd" class="headerlink" title="3. Floyd"></a>3. Floyd</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            dis[i][j] = <span class="built_in">min</span>(dis[i][j], dis[i][k] + dis[k][j]);</span><br><span class="line">            <span class="comment">//传递闭包：con[i][j] |= con[i][k] &amp; con[k][j];</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近公共祖先(lca)</title>
      <link href="/1970/01/01/TemLib/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88(lca)/"/>
      <url>/1970/01/01/TemLib/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88(lca)/</url>
      
        <content type="html"><![CDATA[<h2 id="P3379-【模板】最近公共祖先（LCA）"><a href="#P3379-【模板】最近公共祖先（LCA）" class="headerlink" title="P3379 【模板】最近公共祖先（LCA）"></a><a href="https://www.luogu.com.cn/problem/P3379">P3379 【模板】最近公共祖先（LCA）</a></h2><h4 id="1-倍增"><a href="#1-倍增" class="headerlink" title="1. 倍增"></a>1. 倍增</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">500000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXlogdep = <span class="number">19</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = MAXn - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> anc[MAXn + <span class="number">10</span>][MAXlogdep + <span class="number">10</span>], dep[MAXn + <span class="number">10</span>], n, q, s;</span><br><span class="line"><span class="keyword">int</span> head[MAXn + <span class="number">10</span>], next[MAXm * <span class="number">2</span> + <span class="number">10</span>], toid[MAXm * <span class="number">2</span> + <span class="number">10</span>], nown;</span><br><span class="line"><span class="keyword">int</span> lg2[MAXn + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">    next[++nown] = head[from];</span><br><span class="line">    head[from] = nown;</span><br><span class="line">    toid[nown] = to;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">register</span> <span class="keyword">int</span> <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> nodeid, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    anc[nodeid][<span class="number">0</span>] = fa;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MAXlogdep; ++i) &#123;</span><br><span class="line">        anc[nodeid][i] = anc[anc[nodeid][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    dep[nodeid] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[nodeid]; i; i = next[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (toid[i] != fa) &#123;</span><br><span class="line">            <span class="built_in">Dfs</span>(toid[i], nodeid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        lg2[i] = lg2[i - <span class="number">1</span>] + (<span class="number">1</span> &lt;&lt; lg2[i - <span class="number">1</span>] == i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        lg2[i]--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (dep[x] &lt; dep[y]) &#123;</span><br><span class="line">        y = anc[y][lg2[dep[y] - dep[x]]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lg2[dep[y]]; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (anc[x][i] != anc[y][i]) &#123;</span><br><span class="line">            x = anc[x][i];</span><br><span class="line">            y = anc[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> anc[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    q = <span class="built_in">read</span>();</span><br><span class="line">    s = <span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">Init</span>();</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        x = <span class="built_in">read</span>();</span><br><span class="line">        y = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">Insert</span>(x, y);</span><br><span class="line">        <span class="built_in">Insert</span>(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs</span>(s, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; ++i) &#123;</span><br><span class="line">        x = <span class="built_in">read</span>();</span><br><span class="line">        y = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">Lca</span>(x, y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-树剖"><a href="#2-树剖" class="headerlink" title="2. 树剖"></a>2. 树剖</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &gt; dep[top[y]]) &#123;</span><br><span class="line">            x = fa[top[x]];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            y = fa[top[y]];</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[x] &gt; dep[y] ? y : x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-离线Tarjan"><a href="#3-离线Tarjan" class="headerlink" title="3. 离线Tarjan"></a>3. 离线Tarjan</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">5e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = MAXn;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXq = <span class="number">5e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXn + <span class="number">10</span>], cntnex, nex[MAXm * <span class="number">2</span> + <span class="number">10</span>], to[MAXm * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> headq[MAXn + <span class="number">10</span>], cntnexq, nexq[MAXq + <span class="number">10</span>], q[MAXq + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insertq</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    nexq[++cntnexq] = headq[u];</span><br><span class="line">    headq[u] = cntnexq;</span><br><span class="line">    q[cntnexq] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[MAXn + <span class="number">10</span>]; <span class="keyword">bool</span> vis[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs1</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    vis[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        fa[to[i]] = cur;</span><br><span class="line">        <span class="built_in">Dfs1</span>(to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> times[MAXn + <span class="number">10</span>], ans[MAXq + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs2</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    ++times[cur];</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = headq[cur]; i; i = nexq[i]) &#123;</span><br><span class="line">        <span class="keyword">int</span> id = q[i];</span><br><span class="line">        <span class="keyword">while</span> (times[id] != <span class="number">1</span>) &#123;</span><br><span class="line">            id = fa[id];</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i] = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (times[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Dfs2</span>(to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    ++times[cur];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, Q, root, qid_nexq[MAXq + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;Q, &amp;root);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">Insert</span>(u, v);</span><br><span class="line">        <span class="built_in">Insert</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs1</span>(root);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= Q; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">Insertq</span>(u, v);</span><br><span class="line">        qid_nexq[i] = cntnexq;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs2</span>(root);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[qid_nexq[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-欧拉序"><a href="#4-欧拉序" class="headerlink" title="4. 欧拉序"></a>4. 欧拉序</h4><p>请见 <a href="https://www.cnblogs.com/stxy-ferryman/p/7741970.html">一位dalao的博客</a>。<del>（我懒得写了）</del></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长上升子序列(lis)</title>
      <link href="/1970/01/01/TemLib/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97(lis)/"/>
      <url>/1970/01/01/TemLib/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97(lis)/</url>
      
        <content type="html"><![CDATA[<p>本解法时间复杂度$O(nlogn)$，还有一种 <strong>DP</strong> 的 $O(n^2)$ 的求法，感兴趣的可以上网了解一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, s[MAXn + <span class="number">10</span>], cnt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, a; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a);</span><br><span class="line">        <span class="keyword">if</span> (a &gt; s[cnt]) &#123;</span><br><span class="line">            s[++cnt] = a;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            *<span class="built_in">lower_bound</span>(s + <span class="number">1</span>, s + <span class="number">1</span> + cnt, a) = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cnt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长公共子序列(lcs)</title>
      <link href="/1970/01/01/TemLib/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97(lcs)/"/>
      <url>/1970/01/01/TemLib/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97(lcs)/</url>
      
        <content type="html"><![CDATA[<h2 id="P1439-【模板】最长公共子序列"><a href="#P1439-【模板】最长公共子序列" class="headerlink" title="P1439 【模板】最长公共子序列"></a><a href="https://www.luogu.com.cn/problem/P1439">P1439 【模板】最长公共子序列</a></h2><p>本解法时间复杂度$O(nlogn)$，还有一种 <strong>DP</strong> 的 $O(n^2)$ 的求法，感兴趣的可以上网了解一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c&gt;<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> id[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> mapping[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> d[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)   id[<span class="built_in">read</span>()] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)   mapping[i] = id[<span class="built_in">read</span>()];</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(d));</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = len, mid;</span><br><span class="line">        <span class="keyword">if</span> (mapping[i] &gt; d[len])   d[++len] = mapping[i];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (d[mid] &gt; mapping[i])   r = mid;</span><br><span class="line">                <span class="keyword">else</span>    l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            d[l] = <span class="built_in">min</span>(mapping[i], d[l]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; len;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有理数取余</title>
      <link href="/1970/01/01/TemLib/%E6%9C%89%E7%90%86%E6%95%B0%E5%8F%96%E4%BD%99/"/>
      <url>/1970/01/01/TemLib/%E6%9C%89%E7%90%86%E6%95%B0%E5%8F%96%E4%BD%99/</url>
      
        <content type="html"><![CDATA[<h2 id="P2613-【模板】有理数取余"><a href="#P2613-【模板】有理数取余" class="headerlink" title="P2613 【模板】有理数取余 "></a><a href="https://www.luogu.com.cn/problem/P2613">P2613 【模板】有理数取余 </a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">19260817</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">register</span> <span class="keyword">int</span> <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = (x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    a = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> inv, k;</span><br><span class="line">    <span class="built_in">exgcd</span>(n, mod, inv, k);</span><br><span class="line">    <span class="keyword">return</span> (inv % mod + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">frac</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a * <span class="built_in">inv</span>(b, mod)) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(b);</span><br><span class="line">    <span class="keyword">if</span> (!(b % MOD)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Angry!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">frac</span>(a, b, MOD));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杜教筛</title>
      <link href="/1970/01/01/TemLib/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
      <url>/1970/01/01/TemLib/%E6%9D%9C%E6%95%99%E7%AD%9B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4213">Luogu P4213 【模板】杜教筛（Sum）</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ele</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key, val1, val2;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Ele&gt; hx[MOD + <span class="number">10</span>]; <span class="comment">// Find 函数和 Insert 函数是 hash 表的函数，不是文章重点</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Ele <span class="title">Find</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> kmod = k % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: hx[kmod]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i.key == k) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Ele&#123;key: INF, val1: INF, val2: INF&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(Ele ele)</span> </span>&#123;</span><br><span class="line">    hx[ele.key % MOD].<span class="built_in">push_back</span>(ele);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">SumId</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n * (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Ele <span class="title">EvaSum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= MAXn2div3) <span class="keyword">return</span> Ele&#123;key: n, val1: ola[n], val2: mob[n]&#125;;</span><br><span class="line">    Ele ans = <span class="built_in">Find</span>(n);</span><br><span class="line">    <span class="keyword">if</span> (ans.key != INF) <span class="keyword">return</span> ans;</span><br><span class="line">    ans = Ele&#123;key: n, val1: <span class="built_in">SumId</span>(n), val2: <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> il = <span class="number">2</span>, ir = <span class="built_in">min</span>(n, (n / (n / il))); ; il = ir + <span class="number">1</span>, ir = <span class="built_in">min</span>(n, (n / (n / il)))) &#123;</span><br><span class="line">        Ele query = <span class="built_in">EvaSum</span>(n / il);</span><br><span class="line">        ans.val1 -= (ir - il + <span class="number">1</span>) * query.val1;</span><br><span class="line">        ans.val2 -= (ir - il + <span class="number">1</span>) * query.val2;</span><br><span class="line">        <span class="keyword">if</span> (ir == n) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Insert</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">EvaOlaMob</span>(MAXn2div3);</span><br><span class="line">    <span class="built_in">GetSum</span>(MAXn2div3, ola);</span><br><span class="line">    <span class="built_in">GetSum</span>(MAXn2div3, mob);</span><br><span class="line">    Ele ans = <span class="built_in">EvaSum</span>(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>, ans.val1, ans.val2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树上启发式合并</title>
      <link href="/1970/01/01/TemLib/%E6%A0%91%E4%B8%8A%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
      <url>/1970/01/01/TemLib/%E6%A0%91%E4%B8%8A%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/U41492">U41492 树上数颜色</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = MAXn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXn + <span class="number">10</span>], cntnex, nex[MAXm * <span class="number">2</span> + <span class="number">10</span>], to[MAXm * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[MAXn + <span class="number">10</span>], hson[MAXn + <span class="number">10</span>], siz[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs1</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    fa[cur] = f;</span><br><span class="line">    siz[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to[i] == fa[cur]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Dfs1</span>(to[i], cur);</span><br><span class="line">        siz[cur] += siz[to[i]];</span><br><span class="line">        <span class="keyword">if</span> (mx &lt; siz[to[i]]) &#123;</span><br><span class="line">            mx = siz[to[i]];</span><br><span class="line">            hson[cur] = to[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> color[MAXn + <span class="number">10</span>], ans[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntbuc, buc[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs3</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> hson)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!buc[color[cur]]) ++cntbuc;</span><br><span class="line">    ++buc[color[cur]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to[i] == fa[cur] || to[i] == hson) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Dfs3</span>(to[i], hson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs2</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!hson[cur]) &#123;</span><br><span class="line">        ans[cur] = <span class="number">1</span>;</span><br><span class="line">        buc[color[cur]] = <span class="number">1</span>;</span><br><span class="line">        cntbuc = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (to[i] == fa[cur] || to[i] == hson[cur]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Dfs2</span>(to[i]);</span><br><span class="line">            <span class="built_in">memset</span>(buc, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(buc));</span><br><span class="line">            cntbuc = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Dfs2</span>(hson[cur]);</span><br><span class="line">        <span class="built_in">Dfs3</span>(cur, hson[cur]);</span><br><span class="line">        ans[cur] = cntbuc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(u, v);</span><br><span class="line">        <span class="built_in">Insert</span>(u, v); <span class="built_in">Insert</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(color[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Dfs2</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, cur; i &lt;= q; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(cur);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[cur]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树上关键点</title>
      <link href="/1970/01/01/TemLib/%E6%A0%91%E4%B8%8A%E5%85%B3%E9%94%AE%E7%82%B9/"/>
      <url>/1970/01/01/TemLib/%E6%A0%91%E4%B8%8A%E5%85%B3%E9%94%AE%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = MAXn;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    re <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());re <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;re T x = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">&#x27;0&#x27;</span>;&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXn + <span class="number">10</span>], cntnex, nex[MAXm * <span class="number">2</span> + <span class="number">10</span>], to[MAXm * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k, ans, root = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function">pair&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123; <span class="comment">// 0: hav, 1: ned</span></span><br><span class="line">    vis[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ned = -INF, hav = -INF;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        pair&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; tmp = <span class="built_in">Dfs</span>(to[i]);</span><br><span class="line">        <span class="keyword">if</span> (tmp.second) &#123;</span><br><span class="line">            ned = <span class="built_in">max</span>(ned, tmp.first);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hav = <span class="built_in">max</span>(hav, tmp.first);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cur == root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ned == -INF &amp;&amp; hav == -INF) &#123;</span><br><span class="line">            ++ans;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ned == -INF) &#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hav == -INF) &#123;</span><br><span class="line">            ++ans;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ned &gt; hav) &#123;</span><br><span class="line">                ++ans;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ned == -INF &amp;&amp; hav == -INF) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ned == -INF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hav == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">make_pair</span>(hav - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hav == -INF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ned == k) &#123;</span><br><span class="line">            ++ans;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">make_pair</span>(k - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">make_pair</span>(ned + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ned &gt; hav) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ned == k) &#123;</span><br><span class="line">                ++ans;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">make_pair</span>(k - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">make_pair</span>(ned + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (hav == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">make_pair</span>(hav - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        <span class="built_in">Insert</span>(u, v); <span class="built_in">Insert</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs</span>(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树形dp</title>
      <link href="/1970/01/01/TemLib/%E6%A0%91%E5%BD%A2dp/"/>
      <url>/1970/01/01/TemLib/%E6%A0%91%E5%BD%A2dp/</url>
      
        <content type="html"><![CDATA[<h2 id="P1352-没有上司的舞会"><a href="#P1352-没有上司的舞会" class="headerlink" title="P1352 没有上司的舞会"></a><a href="https://www.luogu.com.cn/problem/P1352">P1352 没有上司的舞会</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">6000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NEGINF = <span class="number">0xc0c0c0c0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> d[MAXn + <span class="number">10</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> v[MAXn + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> edgenum;</span><br><span class="line"><span class="keyword">int</span> head[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> next[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> to[MAXn + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c&gt;<span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> s = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>())s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0xc0c0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(d));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_edge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> too)</span></span>&#123;</span><br><span class="line">    next[++edgenum] = head[from];</span><br><span class="line">    head[from] = edgenum;</span><br><span class="line"></span><br><span class="line">    to[edgenum] = too;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put_in</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        v[i] = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> to = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> from = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">insert_edge</span>(from, to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> nodeid, <span class="keyword">bool</span> have_root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d[nodeid][have_root] != NEGINF)</span><br><span class="line">        <span class="keyword">return</span> d[nodeid][have_root];</span><br><span class="line">    <span class="keyword">int</span>&amp; ans = d[nodeid][have_root] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!have_root)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[nodeid]; i; i = next[i])</span><br><span class="line">            ans += <span class="built_in">max</span>(<span class="built_in">dp</span>(to[i], <span class="number">0</span>), <span class="built_in">dp</span>(to[i], <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ans += v[nodeid];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[nodeid]; i; i = next[i])</span><br><span class="line">            ans += <span class="built_in">dp</span>(to[i], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> have_in_deg[MAXn + <span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= edgenum; i++)have_in_deg[to[i]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!have_in_deg[i])</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">first</span>();</span><br><span class="line">    <span class="built_in">put_in</span>();</span><br><span class="line">    <span class="keyword">int</span> rootid = <span class="built_in">find_root</span>();</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(<span class="built_in">dp</span>(rootid, <span class="number">0</span>), <span class="built_in">dp</span>(rootid, <span class="number">1</span>)) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P2015-二叉苹果树"><a href="#P2015-二叉苹果树" class="headerlink" title="P2015 二叉苹果树"></a><a href="https://www.luogu.com.cn/problem/P2015">P2015 二叉苹果树</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXq = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">int</span> d[MAXn + <span class="number">10</span>][MAXq + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> to[MAXn + <span class="number">10</span>][<span class="number">2</span>];<span class="comment">//ÏÂ±ê1ÎªfromµÄid</span></span><br><span class="line"><span class="keyword">int</span> edgew[MAXn + <span class="number">10</span>][<span class="number">2</span>];<span class="comment">//ÏÂ±ê1ÎªfromµÄid</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c&gt;<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(d));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_edge</span><span class="params">(<span class="keyword">int</span> nodeid1, <span class="keyword">int</span> nodeid2, <span class="keyword">int</span> edge_w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!to[nodeid1][<span class="number">0</span>])&#123;</span><br><span class="line">        to[nodeid1][<span class="number">0</span>] = nodeid2;</span><br><span class="line">        edgew[nodeid1][<span class="number">0</span>] = edge_w;</span><br><span class="line">        to[nodeid1][<span class="number">0</span>] = nodeid2;</span><br><span class="line">        edgew[nodeid1][<span class="number">0</span>] = edge_w;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        to[nodeid1][<span class="number">1</span>] = nodeid2;</span><br><span class="line">        edgew[nodeid1][<span class="number">1</span>] = edge_w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> nodeid, <span class="keyword">int</span> keepnum)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d[nodeid][keepnum] != <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> d[nodeid][keepnum];</span><br><span class="line">    <span class="keyword">int</span>&amp; ans = d[nodeid][keepnum] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!keepnum)</span><br><span class="line">        <span class="keyword">return</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!to[nodeid][<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> ans = -INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> knuml = <span class="number">0</span>; knuml &lt;= keepnum; knuml++)&#123;</span><br><span class="line">        <span class="keyword">int</span> knumr = keepnum - knuml;</span><br><span class="line">        <span class="keyword">int</span> tmp_ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (knuml)</span><br><span class="line">            tmp_ans += edgew[nodeid][<span class="number">0</span>] + <span class="built_in">dp</span>(to[nodeid][<span class="number">0</span>], knuml - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (knumr)</span><br><span class="line">            tmp_ans += edgew[nodeid][<span class="number">1</span>] + <span class="built_in">dp</span>(to[nodeid][<span class="number">1</span>], knumr - <span class="number">1</span>);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, tmp_ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">Init</span>();</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    q = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> nodeid1 = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> nodeid2 = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> edgew = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">insert_edge</span>(nodeid1, nodeid2, edgew);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">dp</span>(<span class="number">1</span>, q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树形背包</title>
      <link href="/1970/01/01/TemLib/%E6%A0%91%E5%BD%A2%E8%83%8C%E5%8C%85/"/>
      <url>/1970/01/01/TemLib/%E6%A0%91%E5%BD%A2%E8%83%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h4 id="1-size优化解树形背包"><a href="#1-size优化解树形背包" class="headerlink" title="1. size优化解树形背包"></a>1. size优化解树形背包</h4><p>注意：该方法无法解决带权树形背包。</p><p><a href="https://www.luogu.com.cn/problem/P3177">P3177 HAOI2015 树上染色</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">2e3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = MAXn;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXk = <span class="number">2e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;n, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXm + <span class="number">10</span>], cntnex, nex[MAXm * <span class="number">2</span> + <span class="number">10</span>], to[MAXm * <span class="number">2</span> + <span class="number">10</span>], wei[MAXm * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">    wei[cntnex] = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, fa[MAXn + <span class="number">10</span>], siz[MAXn + <span class="number">10</span>], d[MAXn + <span class="number">10</span>][MAXk + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    siz[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to[i] == fa[cur]) <span class="keyword">continue</span>;</span><br><span class="line">        fa[to[i]] = cur;</span><br><span class="line">        <span class="built_in">Dfs</span>(to[i]);</span><br><span class="line">        siz[cur] += siz[to[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DfsDp</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    d[cur][<span class="number">0</span>] = d[cur][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to[i] == fa[cur]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">DfsDp</span>(to[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="built_in">min</span>(m, siz[cur]); ~j; --j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="built_in">min</span>(j, siz[to[i]]); ++k) &#123;</span><br><span class="line">                d[cur][j] = <span class="built_in">max</span>(d[cur][j], d[cur][j - k] + d[to[i]][k] + wei[i] * (k * (m - k) + (siz[to[i]] - k) * (n - siz[to[i]] - (m - k))));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0xc0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(d));</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; m * <span class="number">2</span>) &#123;</span><br><span class="line">        m = n - m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(u, v, w);</span><br><span class="line">        <span class="built_in">Insert</span>(u, v, w); <span class="built_in">Insert</span>(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">DfsDp</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, d[<span class="number">1</span>][m]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-dfs序优化解树形背包"><a href="#2-dfs序优化解树形背包" class="headerlink" title="2. dfs序优化解树形背包"></a>2. dfs序优化解树形背包</h4><p><a href="https://www.luogu.com.cn/problem/U189430">U189430 带权树形背包</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">5e3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXW = <span class="number">1e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = MAXn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXn + <span class="number">10</span>], cntnex, nex[MAXm + <span class="number">10</span>], from[MAXm + <span class="number">10</span>], to[MAXm + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    from[cntnex] = u;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, W, ndw[MAXn + <span class="number">10</span>], ndv[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntdfs, idxdfs[MAXn + <span class="number">10</span>], bottom[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    idxdfs[++cntdfs] = cur;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="built_in">Dfs</span>(to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    bottom[cur] = cntdfs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[MAXn * <span class="number">2</span> + <span class="number">10</span>][MAXW + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, W);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, f; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(ndw[i], f, ndv[i]);</span><br><span class="line">        <span class="keyword">if</span> (f == i) &#123;</span><br><span class="line">            <span class="built_in">Insert</span>(n + <span class="number">1</span>, i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">Insert</span>(f, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 主干部分</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = cntdfs; i; --i) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = idxdfs[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = W; j &gt;= ndw[cur]; --j) &#123;</span><br><span class="line">            d[i][j] = <span class="built_in">max</span>(d[bottom[cur] + <span class="number">1</span>][j], d[i + <span class="number">1</span>][j - ndw[cur]] + ndv[cur]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = ndw[cur] - <span class="number">1</span>; ~j; --j) &#123;</span><br><span class="line">            d[i][j] = d[bottom[cur] + <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 主干部分</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= W; ++j) &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, d[<span class="number">1</span>][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/1970/01/01/TemLib/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
      <url>/1970/01/01/TemLib/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="P3374-【模板】树状数组-1"><a href="#P3374-【模板】树状数组-1" class="headerlink" title="P3374 【模板】树状数组 1"></a><a href="https://www.luogu.com.cn/problem/P3374">P3374 【模板】树状数组 1</a></h2><h2 id="P3368-【模板】树状数组-2"><a href="#P3368-【模板】树状数组-2" class="headerlink" title="P3368 【模板】树状数组 2"></a><a href="https://www.luogu.com.cn/problem/P3368">P3368 【模板】树状数组 2</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">5e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>);<span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;<span class="keyword">register</span> T x = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, t[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x) &amp; (-(x))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildUseSum</span><span class="params">(<span class="keyword">int</span> *sum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        t[i] = sum[i] - sum[i - <span class="built_in">lowbit</span>(i)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (p &lt;= n) &#123;</span><br><span class="line">        t[p] += v;</span><br><span class="line">        p += <span class="built_in">lowbit</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EvaSum</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        ans += t[p];</span><br><span class="line">        p -= <span class="built_in">lowbit</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[MAXn + <span class="number">10</span>], m;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BuildUseSum</span>(a);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, opt, x, y, k; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt);</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (opt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">read</span>(x), <span class="built_in">read</span>(y), <span class="built_in">read</span>(k);</span><br><span class="line">            <span class="built_in">Add</span>(x, k); <span class="built_in">Add</span>(y + <span class="number">1</span>, -k);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">EvaSum</span>(x));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的直径</title>
      <link href="/1970/01/01/TemLib/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
      <url>/1970/01/01/TemLib/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/U81904">U81904 【模板】树的直径</a></p><h4 id="1-两次Dfs"><a href="#1-两次Dfs" class="headerlink" title="1. 两次Dfs"></a>1. 两次Dfs</h4><p>注意：该方法无法解决负权树。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">5e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = MAXn;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> FINF = <span class="number">0xc0c0c0c0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> head[MAXn + <span class="number">10</span>], cntnex, nex[MAXm * <span class="number">2</span> + <span class="number">10</span>], to[MAXm * <span class="number">2</span> + <span class="number">10</span>], wei[MAXm * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">    wei[cntnex] = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[MAXn + <span class="number">10</span>]; <span class="keyword">bool</span> vis[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    vis[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        dis[to[i]] = dis[cur] + wei[i];</span><br><span class="line">        <span class="built_in">Dfs</span>(to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EvaFar</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0xc0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    dis[root] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Dfs</span>(root);</span><br><span class="line">    <span class="keyword">int</span> mx = FINF, maxer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mx &lt; dis[i]) &#123;</span><br><span class="line">            mx = dis[i];</span><br><span class="line">            maxer = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> side1, side2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        <span class="built_in">Insert</span>(u, v, w);</span><br><span class="line">        <span class="built_in">Insert</span>(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    side1 = <span class="built_in">EvaFar</span>(<span class="number">1</span>);</span><br><span class="line">    side2 = <span class="built_in">EvaFar</span>(side1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, side1, side2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dis[side2]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-树形Dp"><a href="#2-树形Dp" class="headerlink" title="2. 树形Dp"></a>2. 树形Dp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">5e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = MAXn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXn + <span class="number">10</span>], cntnex, nex[MAXm * <span class="number">2</span> + <span class="number">10</span>], to[MAXm * <span class="number">2</span> + <span class="number">10</span>], wei[MAXm * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">    wei[cntnex] = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans, d[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fath)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to[i] == fath) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Dfs</span>(to[i], cur);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, d[cur] + d[to[i]] + wei[i]);</span><br><span class="line">        d[cur] = <span class="built_in">max</span>(d[cur], d[to[i]] + wei[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, w; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(u, v, w);</span><br><span class="line">        <span class="built_in">Insert</span>(u, v, w); <span class="built_in">Insert</span>(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的重心</title>
      <link href="/1970/01/01/TemLib/%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83/"/>
      <url>/1970/01/01/TemLib/%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1395">P1395 会议</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> head[MAXn + <span class="number">10</span>], cntnex, nex[MAXm * <span class="number">2</span> + <span class="number">10</span>], to[MAXm * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXn + <span class="number">10</span>]; <span class="keyword">int</span> siz[MAXn + <span class="number">10</span>], w[MAXn + <span class="number">10</span>], cen[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaCen</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    vis[cur] = <span class="number">1</span>;</span><br><span class="line">    siz[cur] = <span class="number">1</span>;</span><br><span class="line">    w[cur] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">EvaCen</span>(to[i]);</span><br><span class="line">        siz[cur] += siz[to[i]];</span><br><span class="line">        w[cur] = <span class="built_in">max</span>(w[cur], siz[to[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    w[cur] = <span class="built_in">max</span>(w[cur], n - siz[cur]);</span><br><span class="line">    <span class="keyword">if</span> (w[cur] &lt;= n / <span class="number">2</span>) &#123;</span><br><span class="line">        cen[cen[<span class="number">0</span>] != <span class="number">0</span>] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">EvaCen</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根号分治</title>
      <link href="/1970/01/01/TemLib/%E6%A0%B9%E5%8F%B7%E5%88%86%E6%B2%BB/"/>
      <url>/1970/01/01/TemLib/%E6%A0%B9%E5%8F%B7%E5%88%86%E6%B2%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3396">P3396 哈希冲突</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span> + <span class="number">5e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXsqrtn = <span class="number">387</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, sqrtn, m, a[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> small[MAXsqrtn + <span class="number">10</span>][MAXsqrtn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    sqrtn = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= sqrtn; ++j) &#123;</span><br><span class="line">            small[j][i % j] += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> opt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;opt);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mod, yu;</span><br><span class="line">            <span class="built_in">read</span>(mod, yu);</span><br><span class="line">            <span class="keyword">if</span> (mod &lt;= sqrtn) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, small[mod][yu]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = (yu ? yu : mod); i &lt;= n; i += mod) &#123;</span><br><span class="line">                    ans += a[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> idx, val;</span><br><span class="line">            <span class="built_in">read</span>(idx, val);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sqrtn; ++i) &#123;</span><br><span class="line">                small[i][idx % i] += -a[idx] + val;</span><br><span class="line">            &#125;</span><br><span class="line">            a[idx] = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树链剖分</title>
      <link href="/1970/01/01/TemLib/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/1970/01/01/TemLib/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="P3384-【模板】轻重链剖分"><a href="#P3384-【模板】轻重链剖分" class="headerlink" title="P3384 【模板】轻重链剖分"></a><a href="https://www.luogu.com.cn/problem/P3384">P3384 【模板】轻重链剖分</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = MAXn;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>);<span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;<span class="keyword">register</span> T x = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k, root, mod;</span><br><span class="line"><span class="keyword">int</span> head[MAXn + <span class="number">10</span>], cntnex, nex[MAXm * <span class="number">2</span> + <span class="number">10</span>], to[MAXm * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> le[MAXn * <span class="number">4</span> + <span class="number">10</span>], ri[MAXn * <span class="number">4</span> + <span class="number">10</span>], sum[MAXn * <span class="number">4</span> + <span class="number">10</span>], add[MAXn * <span class="number">4</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    sum[id] = sum[id &lt;&lt; <span class="number">1</span>] + sum[(id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    sum[id &lt;&lt; <span class="number">1</span>] += add[id] * (ri[id &lt;&lt; <span class="number">1</span>] - le[id &lt;&lt; <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">    sum[(id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>] += add[id] * (ri[(id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>] - le[(id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">    add[id &lt;&lt; <span class="number">1</span>] += add[id];</span><br><span class="line">    add[(id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>] += add[id];</span><br><span class="line">    add[id] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildUseArray</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">    le[id] = l;</span><br><span class="line">    ri[id] = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        sum[id] = a[l];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">BuildUseArray</span>(id &lt;&lt; <span class="number">1</span>, l, mid, a);</span><br><span class="line">        <span class="built_in">BuildUseArray</span>((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, r, a);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        sum[id] += w * (ri[id] - le[id] + <span class="number">1</span>);</span><br><span class="line">        add[id] += w;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">Add</span>(id &lt;&lt; <span class="number">1</span>, l, r, w);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) <span class="built_in">Add</span>((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, r, w);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Eva</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        ans += sum[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) ans += <span class="built_in">Eva</span>(id &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) ans += <span class="built_in">Eva</span>((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa[MAXn + <span class="number">10</span>], dep[MAXn + <span class="number">10</span>], siz[MAXn + <span class="number">10</span>], hson[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs1</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    dep[cur] = dep[fa[cur]] + <span class="number">1</span>;</span><br><span class="line">    siz[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mx = -INF;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to[i] == fa[cur]) <span class="keyword">continue</span>;</span><br><span class="line">        fa[to[i]] = cur;</span><br><span class="line">        <span class="built_in">Dfs1</span>(to[i]);</span><br><span class="line">        siz[cur] += siz[to[i]];</span><br><span class="line">        <span class="keyword">if</span> (siz[to[i]] &gt; mx) &#123;</span><br><span class="line">            mx = siz[to[i]];</span><br><span class="line">            hson[cur] = to[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cntdfs, nddfs[MAXn + <span class="number">10</span>], idxdfs[MAXn + <span class="number">10</span>], top[MAXn + <span class="number">10</span>], bottom[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs2</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    nddfs[cur] = ++cntdfs;</span><br><span class="line">    idxdfs[cntdfs] = cur;</span><br><span class="line">    <span class="keyword">if</span> (hson[cur]) &#123;</span><br><span class="line">        top[hson[cur]] = top[cur];</span><br><span class="line">        <span class="built_in">Dfs2</span>(hson[cur]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to[i] == hson[cur] || to[i] == fa[cur]) <span class="keyword">continue</span>;</span><br><span class="line">        top[to[i]] = to[i];</span><br><span class="line">        <span class="built_in">Dfs2</span>(to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    bottom[cur] = idxdfs[cntdfs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreePathAdd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &gt; dep[top[y]]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Add</span>(<span class="number">1</span>, nddfs[top[y]], nddfs[y], w);</span><br><span class="line">        y = fa[top[y]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Add</span>(<span class="number">1</span>, nddfs[x], nddfs[y], w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TreePathEva</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &gt; dep[top[y]]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        ans += <span class="built_in">Eva</span>(<span class="number">1</span>, nddfs[top[y]], nddfs[y]);</span><br><span class="line">        y = fa[top[y]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    ans += <span class="built_in">Eva</span>(<span class="number">1</span>, nddfs[x], nddfs[y]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SonTreeAdd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Add</span>(<span class="number">1</span>, nddfs[x], nddfs[bottom[x]], w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SonTreeEva</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Eva</span>(<span class="number">1</span>, nddfs[x], nddfs[bottom[x]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &gt; dep[top[y]]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        y = fa[top[y]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[x] &gt; dep[y] ? y : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ndwei[MAXn + <span class="number">10</span>], idxwei[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k), <span class="built_in">read</span>(root), <span class="built_in">read</span>(mod);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(ndwei[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        <span class="built_in">Insert</span>(u, v); <span class="built_in">Insert</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs1</span>(root);</span><br><span class="line">    <span class="built_in">Dfs2</span>(root);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        idxwei[i] = ndwei[idxdfs[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BuildUseArray</span>(<span class="number">1</span>, <span class="number">1</span>, n, idxwei);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, opt, x, y, w; i &lt;= k; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt);</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (opt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">read</span>(x), <span class="built_in">read</span>(y), <span class="built_in">read</span>(w);</span><br><span class="line">            <span class="built_in">TreePathAdd</span>(x, y, w);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">read</span>(x), <span class="built_in">read</span>(y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">TreePathEva</span>(x, y) % mod);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">read</span>(x), <span class="built_in">read</span>(w);</span><br><span class="line">            <span class="built_in">SonTreeAdd</span>(x, w);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">SonTreeEva</span>(x) % mod);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟退火</title>
      <link href="/1970/01/01/TemLib/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
      <url>/1970/01/01/TemLib/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1337">Luogu P1337 [JSOI2004]平衡点 / 吊打XXX</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line"><span class="keyword">double</span> ansval = INF, ansx, ansy;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> tem = MAXx;</span><br><span class="line">    <span class="keyword">double</span> nowx = <span class="built_in">rdom</span>(-MAXx, MAXx), nowy = <span class="built_in">rdom</span>(-MAXx, MAXx);</span><br><span class="line">    <span class="keyword">double</span> nowval = <span class="built_in">calc</span>(nowx, nowy);</span><br><span class="line">    <span class="keyword">double</span> nexval, nexx, nexy;</span><br><span class="line">    <span class="keyword">while</span> (tem &gt; <span class="number">1e-10</span>) &#123;</span><br><span class="line">        nexx = nowx + <span class="built_in">rdom</span>(-tem, tem); nexy = nowy + <span class="built_in">rdom</span>(-tem, tem);</span><br><span class="line">        nexval = <span class="built_in">calc</span>(nexx, nexy);</span><br><span class="line">        <span class="keyword">if</span> (nowval &gt; nexval || <span class="built_in">exp</span>((nowval - nexval) / tem) &gt; <span class="built_in">rdom</span>()) &#123;</span><br><span class="line">            nowval = nexval;</span><br><span class="line">            nowx = nexx; nowy = nexy;</span><br><span class="line">            <span class="keyword">if</span> (ansval &gt; nowval) &#123;</span><br><span class="line">                ansval = nowval;</span><br><span class="line">                ansx = nowx; ansy = nowy;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tem *= <span class="number">0.999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bg1 = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">int</span> bg2 = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">SA</span>();</span><br><span class="line">    <span class="keyword">int</span> times = <span class="built_in">clock</span>() - bg2;</span><br><span class="line">    <span class="keyword">while</span> (CLOCKS_PER_SEC - <span class="built_in">clock</span>() + bg1 &gt; times + <span class="number">20000</span>) &#123;</span><br><span class="line">        <span class="built_in">SA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>次短路</title>
      <link href="/1970/01/01/TemLib/%E6%AC%A1%E7%9F%AD%E8%B7%AF/"/>
      <url>/1970/01/01/TemLib/%E6%AC%A1%E7%9F%AD%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2865">P2865 [USACO06NOV]Roadblocks G</a></p><h4 id="1-Dijkstra"><a href="#1-Dijkstra" class="headerlink" title="1. Dijkstra"></a>1. Dijkstra</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dis[MAXn + <span class="number">10</span>], secdis[MAXn + <span class="number">10</span>];</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(secdis, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(secdis));</span><br><span class="line">    dis[root] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, root));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.<span class="built_in">top</span>().second, d = -q.<span class="built_in">top</span>().first; q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (secdis[cur] &lt; d) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> dist = d + wei[i];</span><br><span class="line">            <span class="keyword">if</span> (dis[to[i]] &gt; dist) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(dis[to[i]], dist);</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-dis[to[i]], to[i]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (secdis[to[i]] &gt; dist) &#123;</span><br><span class="line">                secdis[tod[i]] = dist;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-secdis[to[i]], to[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main函数中</span></span><br><span class="line"><span class="built_in">Dijkstra</span>(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, secdis[cur]);</span><br></pre></td></tr></table></figure><h4 id="2-Spfa"><a href="#2-Spfa" class="headerlink" title="2. Spfa"></a>2. Spfa</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> secdis[MAXn + <span class="number">10</span>], dis[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> inque[MAXn + <span class="number">10</span>];</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> tmp[<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;dis1, <span class="keyword">int</span> &amp;secdis1, <span class="keyword">int</span> dis2, <span class="keyword">int</span> secdis2)</span> </span>&#123;</span><br><span class="line">    tmp[<span class="number">0</span>] = dis1, tmp[<span class="number">1</span>] = secdis1, tmp[<span class="number">2</span>] = dis2, tmp[<span class="number">3</span>] = secdis2;</span><br><span class="line">    <span class="built_in">sort</span>(tmp, tmp + <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">unique</span>(tmp, tmp + <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (dis1 != tmp[<span class="number">0</span>] || secdis1 != tmp[<span class="number">1</span>]) &#123;</span><br><span class="line">        dis1 = tmp[<span class="number">0</span>], secdis1 = tmp[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spfa</span><span class="params">(<span class="keyword">int</span> sour)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(secdis, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(secdis));</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    dis[sour] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(sour); inque[sour] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>(); inque[cur] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">update</span>(dis[to[i]], secdis[to[i]], dis[cur] + wei[i], secdis[cur] + wei[i])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!inque[to[i]]) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(to[i]); inque[to[i]] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main函数中</span></span><br><span class="line"><span class="built_in">Spfa</span>(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, secdis[cur]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉路径</title>
      <link href="/1970/01/01/TemLib/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/"/>
      <url>/1970/01/01/TemLib/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h4 id="1-无向图欧拉路径"><a href="#1-无向图欧拉路径" class="headerlink" title="1. 无向图欧拉路径"></a>1. 无向图欧拉路径</h4><p><a href="https://www.luogu.com.cn/problem/P2731">P2731 [USACO3.3]骑马修栅栏 Riding the Fences</a></p><p>之所以要用邻接矩阵是因为一条边只能走一次，走过一条边这条边的另一个方向也不能走了，邻接矩阵便于删除走过的边的另一个方向。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">5e2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;n, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, source = <span class="number">1</span>, edge[MAXn + <span class="number">10</span>][MAXn + <span class="number">10</span>], deg[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> top, stk[MAXm * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (edge[cur][i]) &#123;</span><br><span class="line">            --edge[cur][i]; --edge[i][cur];</span><br><span class="line">            <span class="built_in">Dfs</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stk[++top] = cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(u, v);</span><br><span class="line">        ++edge[u][v]; ++edge[v][u];</span><br><span class="line">        ++deg[u]; ++deg[v];</span><br><span class="line">        n = <span class="built_in">max</span>(n, <span class="built_in">max</span>(u, v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deg[i] &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            source = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs</span>(source);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = top; i; --i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, stk[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空间开不下 $O(n^2)$ 怎么办，听别人说要用什么当前弧优化，留坑待补……</p><h4 id="2-有向图欧拉路径"><a href="#2-有向图欧拉路径" class="headerlink" title="2. 有向图欧拉路径"></a>2. 有向图欧拉路径</h4><p><a href="https://www.luogu.com.cn/problem/P7771">P7771 【模板】欧拉路径</a></p><p>有向图求欧拉路径，因为边没有另一个方向，所以不用删另一个方向。直接用邻接表即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">2e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : c ^ <span class="string">&#x27;0&#x27;</span>;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;n, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; edge[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> top, stk[MAXm + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!edge[cur].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> to = edge[cur].<span class="built_in">back</span>();</span><br><span class="line">        edge[cur].<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="built_in">Dfs</span>(to);</span><br><span class="line">    &#125;</span><br><span class="line">    stk[++top] = cur;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> indeg[MAXn + <span class="number">10</span>], outdeg[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(u, v);</span><br><span class="line">        edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        ++outdeg[u]; ++indeg[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>, bg = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (indeg[i] == outdeg[i] + <span class="number">1</span>) &#123;</span><br><span class="line">            ++cnt1;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (indeg[i] == outdeg[i] - <span class="number">1</span>) &#123;</span><br><span class="line">            ++cnt2;</span><br><span class="line">            bg = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (indeg[i] != outdeg[i]) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!((cnt1 == <span class="number">1</span> &amp;&amp; cnt2 == <span class="number">1</span>) || (cnt1 == <span class="number">0</span> &amp;&amp; cnt2 == <span class="number">0</span>))) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bg == <span class="number">0</span>) &#123;</span><br><span class="line">        bg = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(<span class="built_in">begin</span>(edge[i]), <span class="built_in">end</span>(edge[i]), cmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs</span>(bg);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = top; i; --i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, stk[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>混合背包</title>
      <link href="/1970/01/01/TemLib/%E6%B7%B7%E5%90%88%E8%83%8C%E5%8C%85/"/>
      <url>/1970/01/01/TemLib/%E6%B7%B7%E5%90%88%E8%83%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="P1833-樱花"><a href="#P1833-樱花" class="headerlink" title="P1833 樱花"></a><a href="https://www.luogu.com.cn/problem/P1833">P1833 樱花</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXW = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, W;</span><br><span class="line"><span class="keyword">int</span> v_new[MAXn * <span class="number">10</span> + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> w_new[MAXn * <span class="number">10</span> + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> is_limit[MAXn * <span class="number">10</span> + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> num_new;</span><br><span class="line"><span class="keyword">int</span> d[MAXW + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c&gt;<span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> s = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>())s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bin_divide</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> num, <span class="keyword">int</span> v_new[], <span class="keyword">int</span> w_new[], <span class="keyword">int</span>&amp; num_new, <span class="keyword">bool</span> is_limit[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; num &gt;= i; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        v_new[++num_new] = v * i;</span><br><span class="line">        w_new[num_new] = w * i;</span><br><span class="line">        is_limit[num_new] = <span class="number">1</span>;</span><br><span class="line">        num -= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        v_new[++num_new] = v * num;</span><br><span class="line">        w_new[num_new] = w * num;</span><br><span class="line">        is_limit[num_new] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">put_in</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    W = <span class="built_in">read</span>();</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> v, w, num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        w = <span class="built_in">read</span>();</span><br><span class="line">        v = <span class="built_in">read</span>();</span><br><span class="line">        num = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span> (num) <span class="built_in">bin_divide</span>(v, w, num, v_new, w_new, num_new, is_limit);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            v_new[++num_new] = v;</span><br><span class="line">            w_new[num_new] = w;</span><br><span class="line">            is_limit[num_new] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> v[], <span class="keyword">int</span> w[], <span class="keyword">bool</span> is_limit[], <span class="keyword">int</span> W, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_limit[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = W; j &gt;= w[i]; j--)    d[j] = <span class="built_in">max</span>(d[j], d[j - w[i]] + v[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = w[i]; j &lt;= W; j++)    d[j] = <span class="built_in">max</span>(d[j], d[j - w[i]] + v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">eva_maxV</span><span class="params">(<span class="keyword">int</span> W)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = -INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= W; i++)   ans = <span class="built_in">max</span>(ans, d[i]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">put_in</span>();</span><br><span class="line">    <span class="built_in">rec</span>(v_new, w_new, is_limit, W, num_new);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">eva_maxV</span>(W);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>点分治</title>
      <link href="/1970/01/01/TemLib/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
      <url>/1970/01/01/TemLib/%E7%82%B9%E5%88%86%E6%B2%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4178">Luogu P4178 Tree</a></p><p>不建议使用 <a href="https://www.luogu.com.cn/problem/P3806">Luogu 3806</a> 作为模板，该题情形过于特殊，只需找到一组解即可判断为 <code>true</code>，导致只遍历树的一部分也可通过此题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cen, siz[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaCen</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> f, <span class="keyword">int</span> totsiz)</span> </span>&#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cntd, d[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> f, <span class="keyword">int</span> dis, <span class="keyword">int</span> tar)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dis &gt; tar) <span class="keyword">return</span>;</span><br><span class="line">    d[++cntd] = dis;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to[i] == f || vis[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Dfs</span>(to[i], cur, dis + wei[i], tar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> top, stk[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Div</span><span class="params">(<span class="keyword">int</span> bg, <span class="keyword">int</span> totsiz, <span class="keyword">int</span> tar)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">EvaCen</span>(bg, <span class="number">0</span>, totsiz);</span><br><span class="line">    <span class="keyword">int</span> c = cen;</span><br><span class="line">    vis[c] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (top) <span class="built_in">Add</span>(stk[top--], <span class="number">-1</span>, tar);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[c]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        cntd = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">Dfs</span>(to[i], c, wei[i], tar);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntd; ++i) &#123;</span><br><span class="line">            ans += <span class="built_in">Sum</span>(tar - d[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntd; ++i) &#123;</span><br><span class="line">            <span class="built_in">Add</span>(d[i], <span class="number">1</span>, tar);</span><br><span class="line">            stk[++top] = d[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[c]; i; i = nex[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[to[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (siz[to[i]] &lt; siz[c]) <span class="built_in">Div</span>(to[i], siz[to[i]], tar);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">Div</span>(to[i], siz[to[i]] - siz[c], tar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">Add</span>(<span class="number">0</span>, <span class="number">1</span>, tar);</span><br><span class="line">    <span class="built_in">Div</span>(<span class="number">1</span>, n, tar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵求逆</title>
      <link href="/1970/01/01/TemLib/%E7%9F%A9%E9%98%B5%E6%B1%82%E9%80%86/"/>
      <url>/1970/01/01/TemLib/%E7%9F%A9%E9%98%B5%E6%B1%82%E9%80%86/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4783">Luogu P4783 【模板】矩阵求逆</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, n2; <span class="comment">// n2 = n * 2</span></span><br><span class="line"><span class="keyword">int</span> a[MAXn + <span class="number">10</span>][MAXn * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EvaInv</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        a[i][i + n] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> chose = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j][i]) &#123;</span><br><span class="line">                chose = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (chose == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (chose != i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n2; ++j) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[i][j], a[chose][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> invaii = <span class="built_in">inv</span>(a[i][i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n2; ++j) &#123;</span><br><span class="line">            a[i][j] = a[i][j] * invaii % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == i) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> mul = a[j][i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= n2; ++k) &#123;</span><br><span class="line">                a[j][k] -= a[i][k] * mul % MOD;</span><br><span class="line">                <span class="built_in">redmod</span>(a[j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵运算</title>
      <link href="/1970/01/01/TemLib/%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/"/>
      <url>/1970/01/01/TemLib/%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="P3390-【模板】矩阵快速幂"><a href="#P3390-【模板】矩阵快速幂" class="headerlink" title="P3390 【模板】矩阵快速幂"></a><a href="https://www.luogu.com.cn/problem/P3390">P3390 【模板】矩阵快速幂</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mat[MAXmat][MAXmat];</span><br><span class="line">    <span class="built_in">Mat</span>() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(mat, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(mat));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Mat</span>(<span class="keyword">int</span> a[MAXmat][MAXmat]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXmat; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAXmat; ++j) &#123;</span><br><span class="line">                mat[i][j] = a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>=(Mat x) &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXmat; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAXmat; ++j) &#123;</span><br><span class="line">                mat[i][j] = x.mat[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> Mat <span class="keyword">operator</span>+(Mat x) &#123;</span><br><span class="line">        Mat ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXmat; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAXmat; ++j) &#123;</span><br><span class="line">                ans.mat[i][j] = (mat[i][j] + x.mat[i][j]) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> Mat <span class="keyword">operator</span>*(Mat x) &#123;</span><br><span class="line">        Mat ans;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXmat; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (re <span class="keyword">int</span> k = <span class="number">0</span>; k &lt; MAXmat; ++k) &#123;</span><br><span class="line">                <span class="keyword">int</span> a = mat[i][k];</span><br><span class="line">                <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAXmat; ++j) &#123;</span><br><span class="line">                    ans.mat[i][j] = (a * x.mat[k][j] + ans.mat[i][j]) % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> Mat <span class="keyword">operator</span>^(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        Mat ans, base;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXmat; ++i) &#123;</span><br><span class="line">            ans.mat[i][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXmat; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAXmat; ++j) &#123;</span><br><span class="line">                base.mat[i][j] = mat[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                ans = ans * base;</span><br><span class="line">            &#125;</span><br><span class="line">            base = base * base;</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笛卡尔树</title>
      <link href="/1970/01/01/TemLib/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91/"/>
      <url>/1970/01/01/TemLib/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="P5854-【模板】笛卡尔树"><a href="#P5854-【模板】笛卡尔树" class="headerlink" title="P5854 【模板】笛卡尔树"></a><a href="https://www.luogu.com.cn/problem/P5854">P5854 【模板】笛卡尔树</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL MAXn = <span class="number">1e7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    LL p;</span><br><span class="line">    LL ls;</span><br><span class="line">    LL rs;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node node[MAXn + <span class="number">10</span>];</span><br><span class="line">LL n;</span><br><span class="line">LL nowid;</span><br><span class="line">LL stk[MAXn + <span class="number">10</span>];</span><br><span class="line">LL top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="keyword">register</span> LL s = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;</span><br><span class="line">        s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f ? -s : s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(LL p)</span> </span>&#123;</span><br><span class="line">    nowid++;</span><br><span class="line">    node[nowid].p = p;</span><br><span class="line">    LL newtop = top;</span><br><span class="line">    <span class="keyword">while</span> (newtop &amp;&amp; node[stk[newtop]].p &gt; node[nowid].p) </span><br><span class="line">        newtop--;</span><br><span class="line">    <span class="keyword">if</span> (newtop) </span><br><span class="line">        node[stk[newtop]].rs = nowid; </span><br><span class="line">    <span class="keyword">if</span> (newtop &lt; top) </span><br><span class="line">        node[nowid].ls = stk[newtop + <span class="number">1</span>];</span><br><span class="line">    stk[++newtop] = nowid;</span><br><span class="line">    top = newtop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>();</span><br><span class="line">    LL p;</span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        p = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">insert</span>(p);<span class="comment">/*这里 insert 的数字的值(p)没有单调的要求，</span></span><br><span class="line"><span class="comment">但数字的标号(id)要求单增，若不单增要先排序*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld %lld\n&quot;</span>, node[i].p, node[i].ls, node[i].rs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性基</title>
      <link href="/1970/01/01/TemLib/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
      <url>/1970/01/01/TemLib/%E7%BA%BF%E6%80%A7%E5%9F%BA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/3167/">Acwing 3164. 线性基</a></p><p>这里推荐 Acwing 上的线性基模板。luogu 上的模板数据范围太小了。</p><p>这里的求线性基是求一种特殊的线性基：把每个数在二进制下的每一位看做一个 $0/1$ 分向量，每个数表示一个向量，一个数组就是一个向量组。求这个向量组的线性基。</p><h4 id="1-高消法"><a href="#1-高消法" class="headerlink" title="1. 高消法"></a>1. 高消法</h4><p>生成的线性基拥有的性质：</p><ol><li><p>是原向量组的线性基<del>废话</del></p></li><li><p>线性基内所有数在二进制下会构成上三角结构（重要性质）</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">deg</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> deg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num &amp; (<span class="number">1ll</span> &lt;&lt; deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> row = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> col = MAXm - <span class="number">1</span>; ~col &amp;&amp; row &lt;= n; --col) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = row; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">deg</span>(a[i], col)) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[row], a[i]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">deg</span>(a[row], col)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == row) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">deg</span>(a[i], col)) &#123;</span><br><span class="line">                a[i] ^= a[row];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++row;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; row; ++i) &#123;</span><br><span class="line">        ans ^= a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供一组样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">681519689123291 153992348230057 352917520953222 379410980430607 333284887124912 596782649548897 1004880543767517 258503666829624 353486948696275 244563245470691</span><br></pre></td></tr></table></figure><p>二进制表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">10011010111101011010101010111110100100010111011011</span><br><span class="line">00100011000000111000100011001101101110000110101001</span><br><span class="line">01010000001111101000000011011110001010111110000110</span><br><span class="line">01010110010001001010000000101101100110001100001111</span><br><span class="line">01001011110001111011101111010011100101101110110000</span><br><span class="line">10000111101100010101001001110101011010000001100001</span><br><span class="line">11100100011110111011111011110110100101101111011101</span><br><span class="line">00111010110001101110010011001111000000100100111000</span><br><span class="line">01010000010111111010011000000000101000000011010011</span><br><span class="line">00110111100110110111010001010111110001001111100011</span><br></pre></td></tr></table></figure><p>生成的线性基：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">10000001000011001001000110110011001011000111101101</span><br><span class="line">01000000000011101000011101111011101100011100010000</span><br><span class="line">00100001000101101011000000110100000110101011111001</span><br><span class="line">00010000000110010110100001010011001111111101100001</span><br><span class="line">00001001000110111110011101100100011100101011110101</span><br><span class="line">00000100000011100011111011010100100110100010001100</span><br><span class="line">00000010000101010011100011111001101000101101010000</span><br><span class="line">00000000100011111010101000011101110110010110100111</span><br><span class="line">00000000010010000100100100101000001011100010100010</span><br><span class="line">00000000001010010110111111110110101001011111110111</span><br></pre></td></tr></table></figure><p>可以看到确实是上三角结构。</p><h4 id="2-贪心法"><a href="#2-贪心法" class="headerlink" title="2. 贪心法"></a>2. 贪心法</h4><p>生成的线性基<strong>不具有</strong>性质 2。</p><p>所以这种方法生成的线性基不能处理一些问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">degll</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> deg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num &amp; (<span class="number">1ll</span> &lt;&lt; deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">maxdegll</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">63</span> - __builtin_clzl(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> num[MAXm + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, a, mxdeg; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a);</span><br><span class="line">        <span class="keyword">while</span> (a) &#123;</span><br><span class="line">            mxdeg = <span class="built_in">maxdegll</span>(a);</span><br><span class="line">            <span class="keyword">if</span> (num[mxdeg]) &#123;</span><br><span class="line">                a ^= num[mxdeg];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                num[mxdeg] = a;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = MAXm - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">degll</span>(ans, i)) &#123;</span><br><span class="line">            ans ^= num[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的线性基：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">10011010111101011010101010111110100100010111011011</span><br><span class="line">01010000001111101000000011011110001010111110000110</span><br><span class="line">00100011000000111000100011001101101110000110101001</span><br><span class="line">00011011111110010011101100001101101111010000110110</span><br><span class="line">00001101101100110001110001011011100101000000101001</span><br><span class="line">00000110011110100010000011110011101100110010001001</span><br><span class="line">00000010001111000101011100001111000001110010100111</span><br><span class="line">00000000110001111110001100110101111101110100000101</span><br><span class="line">00000000011000010010011011011110100010111101010101</span><br><span class="line">00000000001010010110111111110110101001011111110111</span><br></pre></td></tr></table></figure><p>而且注意这种方法生成的线性基存在 <code>num</code> 数组里的时候不是连续的，如果删去 41 行 <code>if (!degll(ans, i))</code> 的话输出的是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10011010111101011010101010111110100100010111011011</span><br><span class="line">01010000001111101000000011011110001010111110000110</span><br><span class="line">00100011000000111000100011001101101110000110101001</span><br><span class="line">00011011111110010011101100001101101111010000110110</span><br><span class="line">00001101101100110001110001011011100101000000101001</span><br><span class="line">00000110011110100010000011110011101100110010001001</span><br><span class="line">00000010001111000101011100001111000001110010100111</span><br><span class="line">00000000000000000000000000000000000000000000000000</span><br><span class="line">00000000110001111110001100110101111101110100000101</span><br><span class="line">00000000011000010010011011011110100010111101010101</span><br><span class="line">00000000001010010110111111110110101001011111110111</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性求区间莫比乌斯函数</title>
      <link href="/1970/01/01/TemLib/%E7%BA%BF%E6%80%A7%E6%B1%82%E5%8C%BA%E9%97%B4%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%87%BD%E6%95%B0/"/>
      <url>/1970/01/01/TemLib/%E7%BA%BF%E6%80%A7%E6%B1%82%E5%8C%BA%E9%97%B4%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mob[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntp, p[MAXn + <span class="number">10</span>]; <span class="keyword">bool</span> notp[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ls</span><span class="params">(<span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">    notp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    mob[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!notp[i]) &#123;</span><br><span class="line">            p[++cntp] = i;</span><br><span class="line">            mob[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, toppj = top / i; j &lt;= cntp &amp;&amp; p[j] &lt;= toppj; ++j) &#123;</span><br><span class="line">            notp[i * p[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p[j]) &#123;</span><br><span class="line">                mob[i * p[j]] = -mob[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mob[i * p[j]] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性求区间欧拉函数</title>
      <link href="/1970/01/01/TemLib/%E7%BA%BF%E6%80%A7%E6%B1%82%E5%8C%BA%E9%97%B4%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
      <url>/1970/01/01/TemLib/%E7%BA%BF%E6%80%A7%E6%B1%82%E5%8C%BA%E9%97%B4%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cntp, p[MAXn + <span class="number">10</span>]; <span class="keyword">bool</span> notp[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> ola[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ls</span><span class="params">(<span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line">    notp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    ola[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!notp[i]) &#123;</span><br><span class="line">            p[++cntp] = i;</span><br><span class="line">            ola[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, toppj = top / i; j &lt;= cntp &amp;&amp; p[j] &lt;= toppj; ++j) &#123;</span><br><span class="line">            notp[i * p[j]] = <span class="number">1</span>;</span><br><span class="line">            ola[i * p[j]] = ola[i] * (i % p[j] ? p[j] - <span class="number">1</span> : p[j]);</span><br><span class="line">            <span class="keyword">if</span> (!(i % p[j])) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性求区间逆元</title>
      <link href="/1970/01/01/TemLib/%E7%BA%BF%E6%80%A7%E6%B1%82%E5%8C%BA%E9%97%B4%E9%80%86%E5%85%83/"/>
      <url>/1970/01/01/TemLib/%E7%BA%BF%E6%80%A7%E6%B1%82%E5%8C%BA%E9%97%B4%E9%80%86%E5%85%83/</url>
      
        <content type="html"><![CDATA[<h2 id="P3811-【模板】乘法逆元"><a href="#P3811-【模板】乘法逆元" class="headerlink" title="P3811 【模板】乘法逆元"></a><a href="https://www.luogu.com.cn/problem/P3811">P3811 【模板】乘法逆元</a></h2><p>$inv<em>i=(p-\left\lfloor\dfrac{p}{i}\right\rfloor)\times inv</em>{p\operatorname{mod}i}\operatorname{mod}p$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaSectionInvLine</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> mod, <span class="keyword">int</span> inv[])</span> </span>&#123;</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        inv[i] = (<span class="keyword">long</span> <span class="keyword">long</span>) (mod - mod / i) * inv[mod % i] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树优化建图</title>
      <link href="/1970/01/01/TemLib/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%BC%98%E5%8C%96%E5%BB%BA%E5%9B%BE/"/>
      <url>/1970/01/01/TemLib/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%BC%98%E5%8C%96%E5%BB%BA%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">5e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXedge = <span class="number">3e7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXn * <span class="number">11</span> + <span class="number">10</span>], cntnex, nex[MAXedge + <span class="number">10</span>], to[MAXedge + <span class="number">10</span>]; <span class="keyword">bool</span> wei[MAXedge + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">    wei[cntnex] = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, root;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, idx;</span><br><span class="line">&#125;out[MAXn * <span class="number">4</span> + <span class="number">10</span>], in[MAXn * <span class="number">4</span> + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntnd;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildOut</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    out[id].idx = ++cntnd;</span><br><span class="line">    out[id].l = l;</span><br><span class="line">    out[id].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="built_in">Insert</span>(l, out[id].idx, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">BuildOut</span>(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">BuildOut</span>((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">Insert</span>(out[id &lt;&lt; <span class="number">1</span>].idx, out[id].idx, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Insert</span>(out[(id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>].idx, out[id].idx, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildIn</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    in[id].idx = ++cntnd;</span><br><span class="line">    in[id].l = l;</span><br><span class="line">    in[id].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="built_in">Insert</span>(in[id].idx, <span class="number">10</span> * n + l, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">BuildIn</span>(id &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">BuildIn</span>((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">Insert</span>(in[id].idx, in[id &lt;&lt; <span class="number">1</span>].idx, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Insert</span>(in[id].idx, in[(id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>].idx, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cntqin, qin[MAXn + <span class="number">10</span>], cntqout, qout[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetSecIn</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (in[id].l &gt;= l &amp;&amp; in[id].r &lt;= r) &#123;</span><br><span class="line">        qin[++cntqin] = in[id].idx;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (in[id].l + in[id].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (mid &gt;= l) &#123;</span><br><span class="line">        <span class="built_in">GetSecIn</span>(id &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mid + <span class="number">1</span> &lt;= r) &#123;</span><br><span class="line">        <span class="built_in">GetSecIn</span>((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetSecOut</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (out[id].l &gt;= l &amp;&amp; out[id].r &lt;= r) &#123;</span><br><span class="line">        qout[++cntqout] = out[id].idx;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (out[id].l + out[id].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (mid &gt;= l) &#123;</span><br><span class="line">        <span class="built_in">GetSecOut</span>(id &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mid + <span class="number">1</span> &lt;= r) &#123;</span><br><span class="line">        <span class="built_in">GetSecOut</span>((id &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSec</span><span class="params">(<span class="keyword">int</span> l1, <span class="keyword">int</span> r1, <span class="keyword">int</span> l2, <span class="keyword">int</span> r2)</span> </span>&#123;</span><br><span class="line">    cntqin = cntqout = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">GetSecOut</span>(<span class="number">1</span>, l2, r2);</span><br><span class="line">    <span class="built_in">GetSecIn</span>(<span class="number">1</span>, l1, r1);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntqout; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cntqin; ++j) &#123;</span><br><span class="line">            <span class="built_in">Insert</span>(qout[i], qin[j], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[MAXn * <span class="number">11</span> + <span class="number">10</span>]; <span class="keyword">int</span> dis[MAXn * <span class="number">11</span> + <span class="number">10</span>];</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">    dis[root] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, root));</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.<span class="built_in">top</span>().second; q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[cur]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[cur] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = head[cur]; i; i = nex[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[to[i]] &gt; dis[cur] + wei[i]) &#123;</span><br><span class="line">                dis[to[i]] = dis[cur] + wei[i];</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-dis[to[i]], to[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(root);</span><br><span class="line">    cntnd = n;</span><br><span class="line">    <span class="built_in">BuildOut</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">BuildIn</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, l1, r1, l2, r2; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(l1), <span class="built_in">read</span>(r1), <span class="built_in">read</span>(l2), <span class="built_in">read</span>(r2);</span><br><span class="line">        <span class="built_in">InsertSec</span>(l1, r1, l2, r2);</span><br><span class="line">        <span class="built_in">InsertSec</span>(l2, r2, l1, r1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">Insert</span>(i, <span class="number">10</span> * n + i, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">Insert</span>(<span class="number">10</span> * n + i, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dijkstra</span>(root);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">10</span> * n + <span class="number">1</span>; i &lt;= <span class="number">11</span> * n; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dis[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性筛</title>
      <link href="/1970/01/01/TemLib/%E7%BA%BF%E6%80%A7%E7%AD%9B/"/>
      <url>/1970/01/01/TemLib/%E7%BA%BF%E6%80%A7%E7%AD%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="P3383-【模板】线性筛素数"><a href="#P3383-【模板】线性筛素数" class="headerlink" title="P3383 【模板】线性筛素数"></a><a href="https://www.luogu.com.cn/problem/P3383">P3383 【模板】线性筛素数</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt;<span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + c - <span class="string">&#x27;0&#x27;</span>;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, cntp, p[MAXn / <span class="number">10</span> + <span class="number">100</span>];</span><br><span class="line"><span class="keyword">bool</span> notp[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LS</span><span class="params">(<span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">    notp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= up; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!notp[i]) </span><br><span class="line">            p[++cntp] = i;</span><br><span class="line">        <span class="keyword">int</span> up2 = up / i;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cntp &amp;&amp; p[j] &lt;= up2; ++j) &#123;</span><br><span class="line">            notp[i * p[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!(i % p[j])) </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="built_in">LS</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>, q; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(q);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p[q]);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/1970/01/01/TemLib/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/1970/01/01/TemLib/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="P3372-【模板】线段树-1"><a href="#P3372-【模板】线段树-1" class="headerlink" title="P3372 【模板】线段树 1"></a><a href="https://www.luogu.com.cn/problem/P3372">P3372 【模板】线段树 1</a></h2><h4 id="1-无懒标记"><a href="#1-无懒标记" class="headerlink" title="1. 无懒标记"></a>1. 无懒标记</h4><hr><p>Update 2022-01-06:</p><p>草，今天来翻看我的老文章，突然发现我还写过一个无懒标记的线段树。就不删了，留个纪念。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>);<span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;<span class="keyword">register</span> T x = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;n, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (id &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (id &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="keyword">int</span> le[MAXn * <span class="number">4</span> + <span class="number">10</span>], ri[MAXn * <span class="number">4</span> + <span class="number">10</span>], sum[MAXn * <span class="number">4</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    sum[id] = sum[ls] + sum[rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build0</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    le[id] = l;</span><br><span class="line">    ri[id] = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Build0</span>(ls, l, mid);</span><br><span class="line">        <span class="built_in">Build0</span>(rs, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildUseArr</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">    le[id] = l;</span><br><span class="line">    ri[id] = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        sum[id] = a[l];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">BuildUseArr</span>(ls, l, mid, a);</span><br><span class="line">        <span class="built_in">BuildUseArr</span>(rs, mid + <span class="number">1</span>, r, a);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] == ri[id]) &#123;</span><br><span class="line">        sum[id] = sum[id] + k;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">Add</span>(ls, l, r, k);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) <span class="built_in">Add</span>(rs, l, r, k);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Eva</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) ans = ans + <span class="built_in">Eva</span>(ls, l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) ans = ans + <span class="built_in">Eva</span>(rs, l, r);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BuildUseArr</span>(<span class="number">1</span>, <span class="number">1</span>, n, a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, opt, x, y, z; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt);</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (opt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">read</span>(x, y, z);</span><br><span class="line">            <span class="built_in">Add</span>(<span class="number">1</span>, x, y, z);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">read</span>(x, y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">Eva</span>(<span class="number">1</span>, x, y));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-有懒标记"><a href="#2-有懒标记" class="headerlink" title="2. 有懒标记"></a>2. 有懒标记</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>);<span class="keyword">register</span> <span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;<span class="keyword">register</span> T x = f ? <span class="number">0</span> : c - <span class="string">&#x27;0&#x27;</span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;n, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (id &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (id &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="keyword">int</span> le[MAXn * <span class="number">4</span> + <span class="number">10</span>], ri[MAXn * <span class="number">4</span> + <span class="number">10</span>], add[MAXn * <span class="number">4</span> + <span class="number">10</span>], sum[MAXn * <span class="number">4</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    sum[id] = sum[ls] + sum[rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    sum[ls] = sum[ls] + add[id] * (ri[ls] - le[ls] + <span class="number">1</span>);</span><br><span class="line">    sum[rs] = sum[rs] + add[id] * (ri[rs] - le[rs] + <span class="number">1</span>);</span><br><span class="line">    add[ls] = add[ls] + add[id];</span><br><span class="line">    add[rs] = add[rs] + add[id];</span><br><span class="line">    add[id] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build0</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    le[id] = l;</span><br><span class="line">    ri[id] = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Build0</span>(ls, l, mid);</span><br><span class="line">        <span class="built_in">Build0</span>(rs, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildUseArr</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">    le[id] = l;</span><br><span class="line">    ri[id] = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        sum[id] = a[l];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">BuildUseArr</span>(ls, l, mid, a);</span><br><span class="line">        <span class="built_in">BuildUseArr</span>(rs, mid + <span class="number">1</span>, r, a);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        sum[id] = sum[id] + k * (ri[id] - le[id] + <span class="number">1</span>);</span><br><span class="line">        add[id] = add[id] + k;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">Add</span>(ls, l, r, k);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) <span class="built_in">Add</span>(rs, l, r, k);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Eva</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) ans = ans + <span class="built_in">Eva</span>(ls, l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) ans = ans + <span class="built_in">Eva</span>(rs, l, r);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BuildUseArr</span>(<span class="number">1</span>, <span class="number">1</span>, n, a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, opt, x, y, z; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt);</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (opt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">read</span>(x, y, z);</span><br><span class="line">            <span class="built_in">Add</span>(<span class="number">1</span>, x, y, z);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">read</span>(x, y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">Eva</span>(<span class="number">1</span>, x, y));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树分裂</title>
      <link href="/1970/01/01/TemLib/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%88%86%E8%A3%82/"/>
      <url>/1970/01/01/TemLib/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%88%86%E8%A3%82/</url>
      
        <content type="html"><![CDATA[<p>省略号部分请见<a href="https://rsdbkhusky.github.io/1970/01/01/TemLib/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6/">线段树合并</a>。</p><p><a href="https://www.luogu.com.cn/problem/P5494">Luogu P5494 【模板】线段树分裂</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Split</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nwid = ++cntnd;</span><br><span class="line">    le[nwid] = le[id]; ri[nwid] = ri[id];</span><br><span class="line">    <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; mid) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ls[id]) ls[nwid] = <span class="built_in">Split</span>(ls[id], p);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == mid) &#123;</span><br><span class="line">        ls[nwid] = ls[id];</span><br><span class="line">        ls[id] = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ls[nwid] = ls[id];</span><br><span class="line">        ls[id] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (rs[id]) rs[nwid] = <span class="built_in">Split</span>(rs[id], p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(id);</span><br><span class="line">    <span class="built_in">pushup</span>(nwid);</span><br><span class="line">    <span class="keyword">return</span> nwid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Split2</span><span class="params">(<span class="keyword">int</span> rtid, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="number">0</span>) &#123;</span><br><span class="line">        ++cntnd;</span><br><span class="line">        le[cntnd] = <span class="number">1</span>; ri[cntnd] = n;</span><br><span class="line">        <span class="keyword">return</span> cntnd;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == n) &#123;</span><br><span class="line">        ++cntnd;</span><br><span class="line">        le[cntnd] = <span class="number">1</span>; ri[cntnd] = n;</span><br><span class="line">        <span class="keyword">int</span> tmp = root[rtid];</span><br><span class="line">        root[rtid] = cntnd;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Split</span>(root[rtid], p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">read</span>(rtid, l, r);</span><br><span class="line">    root[++cntrt] = <span class="built_in">Split2</span>(rtid, r);<span class="comment">//</span></span><br><span class="line">    root[rtid] = <span class="built_in">Mergeto</span>(root[rtid], <span class="built_in">Split2</span>(cntrt, l - <span class="number">1</span>));<span class="comment">// 将下标为rtid的权值线段树值域[l,r]分裂出来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树合并</title>
      <link href="/1970/01/01/TemLib/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6/"/>
      <url>/1970/01/01/TemLib/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<p>其中 <code>le</code> 和 <code>ri</code> 两个数组并非必要，如果空间吃紧可以用传参代替。</p><p><a href="https://www.luogu.com.cn/problem/P4556">Luogu P4556 [Vani有约会]雨天的尾巴 /【模板】线段树合并</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cntnd, ls[MAXnd + <span class="number">10</span>], rs[MAXnd + <span class="number">10</span>], le[MAXnd + <span class="number">10</span>], ri[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> mxval[MAXnd + <span class="number">10</span>], maxer[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    mxval[<span class="number">0</span>] = -INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        le[i] = <span class="number">1</span>; ri[i] = MAXa;</span><br><span class="line">    &#125;</span><br><span class="line">    cntnd = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mxval[ls[id]] &gt;= mxval[rs[id]]) &#123;</span><br><span class="line">        mxval[id] = mxval[ls[id]];</span><br><span class="line">        maxer[id] = maxer[ls[id]];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mxval[id] = mxval[rs[id]];</span><br><span class="line">        maxer[id] = maxer[rs[id]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">modifyAddNew</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = ++cntnd;</span><br><span class="line">    le[id] = l; ri[id] = r;</span><br><span class="line">    <span class="keyword">if</span> (le[id] == ri[id]) &#123;</span><br><span class="line">        mxval[id] = v;</span><br><span class="line">        maxer[id] = le[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= mid) ls[id] = <span class="built_in">modifyAddNew</span>(le[id], mid, p, v);</span><br><span class="line">        <span class="keyword">else</span> rs[id] = <span class="built_in">modifyAddNew</span>(mid + <span class="number">1</span>, ri[id], p, v);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyAddOld</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] == ri[id]) &#123;</span><br><span class="line">        mxval[id] += v;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= mid) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ls[id]) <span class="built_in">modifyAddOld</span>(ls[id], p, v);</span><br><span class="line">            <span class="keyword">else</span> ls[id] = <span class="built_in">modifyAddNew</span>(le[id], mid, p, v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs[id]) <span class="built_in">modifyAddOld</span>(rs[id], p, v);</span><br><span class="line">            <span class="keyword">else</span> rs[id] = <span class="built_in">modifyAddNew</span>(mid + <span class="number">1</span>, ri[id], p, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Mergeto</span><span class="params">(<span class="keyword">int</span> id1, <span class="keyword">int</span> id2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id1 == <span class="number">0</span> || id2 == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> id1 + id2;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (le[id1] == ri[id1]) &#123;</span><br><span class="line">            mxval[id1] += mxval[id2];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ls[id1] = <span class="built_in">Mergeto</span>(ls[id1], ls[id2]);</span><br><span class="line">            rs[id1] = <span class="built_in">Mergeto</span>(rs[id1], rs[id2]);</span><br><span class="line">            <span class="built_in">pushup</span>(id1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> id1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树套平衡树</title>
      <link href="/1970/01/01/TemLib/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
      <url>/1970/01/01/TemLib/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3380">P3380 【模板】二逼平衡树（树套树）</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">5e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">5e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXlogn = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXnd1 = MAXn * <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXnd2 = MAXnd1 * <span class="number">3</span> + MAXn * MAXlogn + MAXm * MAXlogn;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;-&#x27;</span>; c = <span class="built_in">getchar</span>());<span class="keyword">bool</span> f = c == <span class="string">&#x27;-&#x27;</span>;T x = f ? <span class="number">0</span> : (c ^ <span class="string">&#x27;0&#x27;</span>);<span class="keyword">for</span> (c = <span class="built_in">getchar</span>(); c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c = <span class="built_in">getchar</span>()) &#123;x = x * <span class="number">10</span> + (c ^ <span class="string">&#x27;0&#x27;</span>);&#125;a = f ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...Argv&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a, Argv &amp;...argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a), <span class="built_in">read</span>(argv...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> idxinf, idxninf;</span><br><span class="line"><span class="keyword">int</span> cntnd, son[MAXnd2 + <span class="number">10</span>][<span class="number">2</span>], fa[MAXnd2 + <span class="number">10</span>], siz[MAXnd2 + <span class="number">10</span>], cnt[MAXnd2 + <span class="number">10</span>], val[MAXnd2 + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    siz[cur] = cnt[cur] + siz[son[cur][<span class="number">0</span>]] + siz[son[cur][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">side</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cur == son[fa[cur]][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = fa[cur], z = fa[y], sidecur = <span class="built_in">side</span>(cur), s = son[cur][sidecur ^ <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (z) &#123;son[z][<span class="built_in">side</span>(y)] = cur;&#125; fa[cur] = z;</span><br><span class="line">    son[y][sidecur] = s; <span class="keyword">if</span> (s) &#123;fa[s] = y;&#125;</span><br><span class="line">    son[cur][sidecur ^ <span class="number">1</span>] = y; fa[y] = cur;</span><br><span class="line">    <span class="built_in">pushup</span>(y); <span class="built_in">pushup</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> &amp;root, <span class="keyword">int</span> cur, <span class="keyword">int</span> goal = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y, z;</span><br><span class="line">    <span class="keyword">while</span> (fa[cur] != goal) &#123;</span><br><span class="line">        y = fa[cur], z = fa[y];</span><br><span class="line">        <span class="keyword">if</span> (z != goal) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">side</span>(cur) == <span class="built_in">side</span>(y)) <span class="built_in">rotate</span>(y);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!goal) root = cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">V2R</span><span class="params">(<span class="keyword">int</span> &amp;root, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, cur = root;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val[cur] &lt; v) &#123;</span><br><span class="line">            ans += siz[son[cur][<span class="number">0</span>]] + cnt[cur];</span><br><span class="line">            <span class="keyword">if</span> (son[cur][<span class="number">1</span>]) cur = son[cur][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val[cur] == v) &#123;</span><br><span class="line">            ans += siz[son[cur][<span class="number">0</span>]];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (son[cur][<span class="number">0</span>]) cur = son[cur][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(root, cur);</span><br><span class="line">    <span class="keyword">return</span> ans - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">PI</span><span class="params">(<span class="keyword">int</span> &amp;root, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = idxninf, cur = root;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val[cur] &gt;= v) &#123;</span><br><span class="line">            <span class="keyword">if</span> (son[cur][<span class="number">0</span>]) cur = son[cur][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans = val[ans] &gt; val[cur] ? ans : cur;</span><br><span class="line">            <span class="keyword">if</span> (son[cur][<span class="number">1</span>]) cur = son[cur][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(root, cur);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">NI</span><span class="params">(<span class="keyword">int</span> &amp;root, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = idxinf, cur = root;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val[cur] &lt;= v) &#123;</span><br><span class="line">            <span class="keyword">if</span> (son[cur][<span class="number">1</span>]) cur = son[cur][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans = val[ans] &lt; val[cur] ? ans : cur;</span><br><span class="line">            <span class="keyword">if</span> (son[cur][<span class="number">0</span>]) cur = son[cur][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(root, cur);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">I</span><span class="params">(<span class="keyword">int</span> &amp;root, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = root, f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur &amp;&amp; v != val[cur]) &#123;</span><br><span class="line">        f = cur;</span><br><span class="line">        cur = son[cur][v &gt; val[cur]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cur) &#123;</span><br><span class="line">        ++cnt[cur];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cur = ++cntnd;</span><br><span class="line">        cnt[cur] = <span class="number">1</span>;</span><br><span class="line">        val[cur] = v;</span><br><span class="line">        fa[cur] = f;</span><br><span class="line">        <span class="keyword">if</span> (f) son[f][v &gt; val[f]] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(root, cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">D</span><span class="params">(<span class="keyword">int</span> &amp;root, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pre = <span class="built_in">PI</span>(root, v), nex = <span class="built_in">NI</span>(root, v);</span><br><span class="line">    <span class="built_in">splay</span>(root, pre); <span class="built_in">splay</span>(root, nex, pre);</span><br><span class="line">    <span class="keyword">int</span> del = son[nex][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (del) &#123;</span><br><span class="line">        --cnt[del];</span><br><span class="line">        <span class="keyword">if</span> (cnt[del]) &#123;</span><br><span class="line">            <span class="built_in">splay</span>(root, del);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            son[nex][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (id &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (id &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="keyword">int</span> le[MAXnd1 + <span class="number">10</span>], ri[MAXnd1 + <span class="number">10</span>], root[MAXnd1 + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildUseArr</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">    le[id] = l; ri[id] = r;</span><br><span class="line">    <span class="built_in">I</span>(root[id], INF);</span><br><span class="line">    <span class="built_in">I</span>(root[id], -INF);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) <span class="built_in">I</span>(root[id], a[i]);</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">BuildUseArr</span>(ls, l, mid, a);</span><br><span class="line">        <span class="built_in">BuildUseArr</span>(rs, mid + <span class="number">1</span>, r, a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p, <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">I</span>(root[id], a);</span><br><span class="line">    <span class="keyword">if</span> (le[id] == ri[id]) &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= mid) <span class="built_in">Insert</span>(ls, p, a);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">Insert</span>(rs, p, a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p, <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">D</span>(root[id], a);</span><br><span class="line">    <span class="keyword">if</span> (le[id] == ri[id]) &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (p &lt;= mid) <span class="built_in">Delete</span>(ls, p, a);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">Delete</span>(rs, p, a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ValtoRank</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">V2R</span>(root[id], v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) ans += <span class="built_in">ValtoRank</span>(ls, l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) ans += <span class="built_in">ValtoRank</span>(rs, l, r, v);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RanktoVal</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rk)</span> </span>&#123;</span><br><span class="line">    --rk;</span><br><span class="line">    <span class="keyword">int</span> L = -INF + <span class="number">1</span>, R = INF - <span class="number">1</span>, M;</span><br><span class="line">    <span class="keyword">while</span> (L &lt; R) &#123;</span><br><span class="line">        M = (L + R + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ValtoRank</span>(<span class="number">1</span>, l, r, M) &lt;= rk) &#123;</span><br><span class="line">            L = M;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            R = M - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> val[<span class="built_in">PI</span>(root[id], v)];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>, ans = -INF;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) ans = <span class="built_in">max</span>(ans, <span class="built_in">Pre</span>(ls, l, r, v));</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) ans = <span class="built_in">max</span>(ans, <span class="built_in">Pre</span>(rs, l, r, v));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Nex</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> val[<span class="built_in">NI</span>(root[id], v)];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (le[id] + ri[id]) &gt;&gt; <span class="number">1</span>, ans = INF;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) ans = <span class="built_in">min</span>(ans, <span class="built_in">Nex</span>(ls, l, r, v));</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) ans = <span class="built_in">min</span>(ans, <span class="built_in">Nex</span>(rs, l, r, v));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    val[idxinf = ++cntnd] = INF;</span><br><span class="line">    val[idxninf = ++cntnd] = -INF;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BuildUseArr</span>(<span class="number">1</span>, <span class="number">1</span>, n, a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, opt, l, r, p, k, tmp; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(opt);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">read</span>(l, r, k);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">ValtoRank</span>(<span class="number">1</span>, l, r, k) + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">read</span>(l, r, k);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">RanktoVal</span>(l, r, k));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">read</span>(p, k);</span><br><span class="line">            <span class="built_in">Delete</span>(<span class="number">1</span>, p, a[p]);</span><br><span class="line">            a[p] = k;</span><br><span class="line">            <span class="built_in">Insert</span>(<span class="number">1</span>, p, k);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">4</span>)  &#123;</span><br><span class="line">            <span class="built_in">read</span>(l, r, k);</span><br><span class="line">            tmp = <span class="built_in">Pre</span>(<span class="number">1</span>, l, r, k);</span><br><span class="line">            <span class="keyword">if</span> (tmp == -INF) <span class="built_in">puts</span>(<span class="string">&quot;-2147483647&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tmp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="built_in">read</span>(l, r, k);</span><br><span class="line">            tmp = <span class="built_in">Nex</span>(<span class="number">1</span>, l, r, k);</span><br><span class="line">            <span class="keyword">if</span> (tmp == INF) <span class="built_in">puts</span>(<span class="string">&quot;2147483647&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫队</title>
      <link href="/1970/01/01/TemLib/%E8%8E%AB%E9%98%9F/"/>
      <url>/1970/01/01/TemLib/%E8%8E%AB%E9%98%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>$a$：块长，$n$：数组长度，$m$：询问个数，$t$：修改个数。</p><h4 id="普通莫队"><a href="#普通莫队" class="headerlink" title="普通莫队"></a>普通莫队</h4><p><a href="https://www.luogu.com.cn/problem/P1494">Luogu P1494 [国家集训队]小Z的袜子</a></p><ol><li><p>各指针复杂度（从上往下依次代表左端点，右端点，时间点的移动次数）</p><script type="math/tex; mode=display">am+n\\~~~~~~~~~~~~~~~~~~~n\times\dfrac{n}{a}\\</script></li><li><p>最优块长（$n$，$m$，$t$ 同阶情况下）</p><script type="math/tex; mode=display">\dfrac{n}{\sqrt{m}}\\</script></li></ol><h4 id="带修莫队"><a href="#带修莫队" class="headerlink" title="带修莫队"></a>带修莫队</h4><p><a href="https://www.luogu.com.cn/problem/P1903">Luogu P1903 [国家集训队]数颜色 / 维护队列</a></p><ol><li><p>各指针复杂度</p><script type="math/tex; mode=display">am+n\\~~~~~~~~~am+n\times\dfrac{n}{a}\\~~~~~~~~~~~~~~~~~~~~~~~~~~t\times\left(\dfrac{n}{a}\right)^2</script></li><li><p>最优块长</p><script type="math/tex; mode=display">n^{\frac{2}{3}}\\</script></li></ol><h4 id="回滚莫队"><a href="#回滚莫队" class="headerlink" title="回滚莫队"></a>回滚莫队</h4><p><a href="https://www.luogu.com.cn/problem/AT1219">AT1219 歴史の研究</a></p><ol><li><p>各指针复杂度</p><script type="math/tex; mode=display">am\\~~~~~~~~~~~~~~~~~~~~~n\times\dfrac{n}{a}\\</script></li><li><p>最优块长</p><script type="math/tex; mode=display">\dfrac{n}{\sqrt{m}}\\</script></li></ol><h4 id="树上莫队"><a href="#树上莫队" class="headerlink" title="树上莫队"></a>树上莫队</h4><p><a href="https://www.luogu.com.cn/problem/SP10707">SP10707 COT2 - Count on a tree II</a></p><p>复杂度与相当于普通莫队。</p><h4 id="二次离线莫队"><a href="#二次离线莫队" class="headerlink" title="二次离线莫队"></a>二次离线莫队</h4><p><a href="https://www.luogu.com.cn/problem/P4887">Luogu P4887 【模板】莫队二次离线（第十四分块(前体)）</a></p><p>复杂度与相当于普通莫队的复杂度加上二次离线的复杂度。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="普通莫队-1"><a href="#普通莫队-1" class="headerlink" title="普通莫队"></a>普通莫队</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> lenpart, inpart[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaInpart</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    lenpart = <span class="built_in">ceil</span>((<span class="keyword">double</span>)n / <span class="built_in">sqrt</span>(<span class="built_in">ceil</span>((<span class="keyword">double</span>)m)));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        inpart[i] = i / lenpart;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, id;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Query sec) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inpart[l] == inpart[sec.l]) &#123;</span><br><span class="line">            <span class="keyword">return</span> inpart[l] &amp; <span class="number">1</span> ? r &lt; sec.r : sec.r &lt; r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l &lt; sec.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; que[MAXm + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> sum, buc[MAXc + <span class="number">10</span>], ans[MAXm + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mocap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="number">1</span>, r = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &gt; que[i].l) <span class="built_in">add</span>(a[--l]);</span><br><span class="line">        <span class="keyword">while</span> (r &lt; que[i].r) <span class="built_in">add</span>(a[++r]);</span><br><span class="line">        <span class="keyword">while</span> (l &lt; que[i].l) <span class="built_in">del</span>(a[l++]);</span><br><span class="line">        <span class="keyword">while</span> (r &gt; que[i].r) <span class="built_in">del</span>(a[r--]);</span><br><span class="line">        <span class="comment">// 记录答案</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="带修莫队-1"><a href="#带修莫队-1" class="headerlink" title="带修莫队"></a>带修莫队</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> lenpart, inpart[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaInpart</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    lenpart = <span class="built_in">ceil</span>((<span class="keyword">double</span>)<span class="built_in">cbrt</span>((<span class="keyword">double</span>)n) * <span class="built_in">cbrt</span>((<span class="keyword">double</span>)n));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        inpart[i] = i / lenpart;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, t, idx;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Query sec) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inpart[l] == inpart[sec.l]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inpart[r] == inpart[sec.r]) &#123;</span><br><span class="line">                <span class="keyword">return</span> t &lt; sec.t;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> inpart[l] &amp; <span class="number">1</span> ? r &lt; sec.r : sec.r &lt; r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l &lt; sec.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; que[MAXquery + <span class="number">10</span>]; <span class="keyword">int</span> cntque;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Change</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> p, v;</span><br><span class="line">&#125; cha[MAXchange + <span class="number">10</span>]; <span class="keyword">int</span> cntcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> buc[MAXcolor + <span class="number">10</span>], res;</span><br><span class="line"><span class="keyword">int</span> ans[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mocap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="number">1</span>, r = <span class="number">0</span>, t = <span class="number">0</span>; i &lt;= cntque; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (que[i].l &lt; l) <span class="built_in">add</span>(a[--l]);</span><br><span class="line">        <span class="keyword">while</span> (que[i].r &gt; r) <span class="built_in">add</span>(a[++r]);</span><br><span class="line">        <span class="keyword">while</span> (que[i].l &gt; l) <span class="built_in">del</span>(a[l++]);</span><br><span class="line">        <span class="keyword">while</span> (que[i].r &lt; r) <span class="built_in">del</span>(a[r--]);</span><br><span class="line">        <span class="keyword">while</span> (que[i].t &gt; t) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cha[t + <span class="number">1</span>].p &gt;= l &amp;&amp; cha[t + <span class="number">1</span>].p &lt;= r) &#123;</span><br><span class="line">                <span class="built_in">del</span>(a[cha[t + <span class="number">1</span>].p]);</span><br><span class="line">                <span class="built_in">add</span>(cha[t + <span class="number">1</span>].v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(a[cha[t + <span class="number">1</span>].p], cha[t + <span class="number">1</span>].v);</span><br><span class="line">            ++t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (que[i].t &lt; t) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cha[t].p &gt;= l &amp;&amp; cha[t].p &lt;= r) &#123;</span><br><span class="line">                <span class="built_in">del</span>(a[cha[t].p]);</span><br><span class="line">                <span class="built_in">add</span>(cha[t].v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(a[cha[t].p], cha[t].v);</span><br><span class="line">            --t;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[que[i].idx] = res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="回滚莫队-1"><a href="#回滚莫队-1" class="headerlink" title="回滚莫队"></a>回滚莫队</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> lenpart, inpart[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaInpart</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    lenpart = <span class="built_in">ceil</span>((<span class="keyword">double</span>)n / <span class="built_in">sqrt</span>((<span class="keyword">double</span>)m));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        inpart[i] = i / lenpart;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntmap, mapup[MAXn + <span class="number">10</span>]; map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mapdown;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, idx;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Query sec) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inpart[l] == inpart[sec.l]) &#123;</span><br><span class="line">            <span class="keyword">return</span> r &lt; sec.r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l &lt; sec.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; que[MAXm + <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> buc[MAXn + <span class="number">10</span>], res, ans[MAXm + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mocap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; i &lt;= m; i = j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= m &amp;&amp; inpart[que[i].l] == inpart[que[j].l]) ++j;</span><br><span class="line">        <span class="keyword">int</span> k = i;</span><br><span class="line">        <span class="keyword">for</span> (; k &lt; j; ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inpart[que[k].l] == inpart[que[k].r]) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> p = que[k].l; p &lt;= que[k].r; ++p) <span class="built_in">add</span>(a[p]);</span><br><span class="line">                ans[que[k].idx] = res;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> p = que[k].l; p &lt;= que[k].r; ++p) --buc[a[p]];</span><br><span class="line">                res = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = inpart[que[i].l] * lenpart + lenpart - <span class="number">1</span>; k &lt; j; ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inpart[que[k].l] != inpart[que[k].r]) &#123;</span><br><span class="line">                <span class="keyword">while</span> (r &lt; que[k].r) <span class="built_in">add</span>(a[++r]);</span><br><span class="line">                <span class="keyword">int</span> backup = res;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> l = inpart[que[i].l] * lenpart + lenpart - <span class="number">1</span>; l &gt;= que[k].l; --l) <span class="built_in">add</span>(a[l]);</span><br><span class="line">                ans[que[k].idx] = res;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> l = inpart[que[i].l] * lenpart + lenpart - <span class="number">1</span>; l &gt;= que[k].l; --l) --buc[a[l]];</span><br><span class="line">                res = backup;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(buc, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(buc));</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚树</title>
      <link href="/1970/01/01/TemLib/%E8%99%9A%E6%A0%91/"/>
      <url>/1970/01/01/TemLib/%E8%99%9A%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2495">Luogu P2495 [SDOI2011]消耗战</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nddfs[a] &lt; nddfs[b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cntkey, key[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cntuse, use[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> top, stk[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitAdj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cntuse) &#123;</span><br><span class="line">        l2.head[use[cntuse--]] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    l2.cntnex = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EvaVirTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">InitAdj</span>();</span><br><span class="line">    <span class="built_in">sort</span>(key + <span class="number">1</span>, key + <span class="number">1</span> + cntkey, cmp);</span><br><span class="line">    stk[++top] = <span class="number">1</span>;</span><br><span class="line">    use[++cntuse] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntkey; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> lca = <span class="built_in">Lca</span>(key[i], stk[top]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = top; j; --j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nddfs[stk[j]] &lt;= nddfs[lca]) &#123;</span><br><span class="line">                <span class="keyword">for</span> (; top &gt; j + <span class="number">1</span>; --top) &#123;</span><br><span class="line">                    <span class="built_in">Insert</span>(stk[top - <span class="number">1</span>], stk[top]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (top == j + <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="built_in">Insert</span>(lca, stk[top]);</span><br><span class="line">                    --top;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stk[j] != lca) &#123;</span><br><span class="line">                    stk[++top] = lca;</span><br><span class="line">                    use[++cntuse] = lca;</span><br><span class="line">                &#125;</span><br><span class="line">                stk[++top] = key[i];</span><br><span class="line">                use[++cntuse] = key[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; top &gt; <span class="number">1</span>; --top) &#123;</span><br><span class="line">        <span class="built_in">Insert</span>(stk[top - <span class="number">1</span>], stk[top]);</span><br><span class="line">    &#125;</span><br><span class="line">    --top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错排问题</title>
      <link href="/1970/01/01/TemLib/%E9%94%99%E6%8E%92%E9%97%AE%E9%A2%98/"/>
      <url>/1970/01/01/TemLib/%E9%94%99%E6%8E%92%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="P1595-信封问题"><a href="#P1595-信封问题" class="headerlink" title="P1595 信封问题"></a><a href="https://www.luogu.com.cn/problem/P1595">P1595 信封问题</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[MAXn + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">0</span>; a[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        a[i] = (i - <span class="number">1</span>) * (a[i - <span class="number">2</span>] + a[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, a[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邻接表</title>
      <link href="/1970/01/01/TemLib/%E9%82%BB%E6%8E%A5%E8%A1%A8/"/>
      <url>/1970/01/01/TemLib/%E9%82%BB%E6%8E%A5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">1e4</span> * <span class="number">2</span>;<span class="comment">//无向图MAXM应开边数二倍</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[MAXn + <span class="number">10</span>], cntnex, nex[MAXm * <span class="number">2</span> + <span class="number">10</span>], to[MAXm * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    nex[++cntnex] = head[u];</span><br><span class="line">    head[u] = cntnex;</span><br><span class="line">    to[cntnex] = v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>费马小定理求逆元</title>
      <link href="/1970/01/01/TemLib/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E9%80%86%E5%85%83/"/>
      <url>/1970/01/01/TemLib/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%E6%B1%82%E9%80%86%E5%85%83/</url>
      
        <content type="html"><![CDATA[<h2 id="P3811-【模板】乘法逆元"><a href="#P3811-【模板】乘法逆元" class="headerlink" title="P3811 【模板】乘法逆元"></a><a href="https://www.luogu.com.cn/problem/P3811">P3811 【模板】乘法逆元</a></h2><p>此题不是求单个逆元的模板题，但可以用这道模板题检验这种求逆方法的正确性（没有WA）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = (<span class="number">1LL</span> * ans * x) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        x = (<span class="number">1LL</span> * x * x) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">power</span>(n, mod - <span class="number">2</span>, mod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非质数模数逆元运算</title>
      <link href="/1970/01/01/TemLib/%E9%9D%9E%E8%B4%A8%E6%95%B0%E6%A8%A1%E6%95%B0%E9%80%86%E5%85%83%E8%BF%90%E7%AE%97/"/>
      <url>/1970/01/01/TemLib/%E9%9D%9E%E8%B4%A8%E6%95%B0%E6%A8%A1%E6%95%B0%E9%80%86%E5%85%83%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>原理：将模数 $\bmod$ 分解质因数 $p_1^{c_1}p_2^{c_2}p_3^{c_3}\cdots$，再将所有参与运算的数按照 $\bmod$ 的质因数分解为 $v\times p_1^{c’_1}p_2^{c’_2}p_3^{c’_3}$，其中 $v$ 为不属于 $\bmod$ 质因数的部分，可以直接用 <strong>exgcd</strong> 求逆元，其余部分在进行乘除运算时直接指数相加减，最后乘在一起就是结果，如果运算完有指数为负则没有逆元，一般使用下（比如求组合数）是不会出现指数为负的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mod = <span class="number">15</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">int</span> cntp, p[MAXcntp * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dis</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    cntp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, topi = <span class="built_in">sqrt</span>(x); i &lt;= topi; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(x % i)) &#123;</span><br><span class="line">            p[++cntp] = i;</span><br><span class="line">            <span class="keyword">while</span> (!(x % i)) &#123;</span><br><span class="line">                x /= i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) p[++cntp] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Number</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, c[MAXcntp * <span class="number">2</span> + <span class="number">10</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">Number</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">Number</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntp; ++i) &#123;</span><br><span class="line">            c[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (!x) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span> (!(x % p[i])) &#123;</span><br><span class="line">                ++c[i];</span><br><span class="line">                x /= p[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        v = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(c));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntp; ++i) &#123;</span><br><span class="line">            c[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (!x) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span> (!(x % p[i])) &#123;</span><br><span class="line">                ++c[i];</span><br><span class="line">                x /= p[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        v = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> Number <span class="keyword">operator</span>*(Number sec) &#123;</span><br><span class="line">        Number ans;</span><br><span class="line">        ans.v = v * sec.v % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntp; ++i) &#123;</span><br><span class="line">            ans.c[i] = c[i] + sec.c[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> Number <span class="keyword">operator</span>/(Number sec) &#123;</span><br><span class="line">        Number ans;</span><br><span class="line">        ans.v = v * <span class="built_in">inv</span>(sec.v) % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntp; ++i) &#123;</span><br><span class="line">            ans.c[i] = c[i] - sec.c[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">real</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntp; ++i) &#123;</span><br><span class="line">            ans *= <span class="built_in">power</span>(p[i], c[i]);</span><br><span class="line">            ans %= mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Dis</span>(mod);</span><br><span class="line">    <span class="function">Number <span class="title">a</span><span class="params">(<span class="number">36</span>)</span>, <span class="title">b</span><span class="params">(<span class="number">14</span>)</span></span>;</span><br><span class="line">    Number c = a / b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, c.<span class="built_in">real</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
            <tag> 封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高斯消元</title>
      <link href="/1970/01/01/TemLib/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"/>
      <url>/1970/01/01/TemLib/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/</url>
      
        <content type="html"><![CDATA[<h2 id="P2455-SDOI2006-线性方程组"><a href="#P2455-SDOI2006-线性方程组" class="headerlink" title="P2455 [SDOI2006]线性方程组"></a><a href="https://www.luogu.com.cn/problem/P2455">P2455 [SDOI2006]线性方程组</a></h2><p>高斯消元的模板我推荐这一道，而不是 <a href="https://www.luogu.com.cn/problem/P3389">Luogu P3389</a>。原因是 P3389 数据确实太水了。我在 P3389 上 AC 的代码在 P2455 只有 20pts。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> a[MAXn + <span class="number">10</span>][MAXn + <span class="number">1</span> + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n + <span class="number">1</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> row = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> col = <span class="number">1</span>; col &lt;= n; ++col) &#123;</span><br><span class="line">        <span class="keyword">int</span> maxer = row;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = row + <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(a[maxer][col]) &lt; <span class="built_in">abs</span>(a[i][col])) &#123;</span><br><span class="line">                maxer = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!a[maxer][col]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n + <span class="number">1</span>; ++j) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[row][j], a[maxer][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == row) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">double</span> solve = a[i][col] / a[row][col];</span><br><span class="line">            <span class="keyword">for</span> (re <span class="keyword">int</span> j = col; j &lt;= n + <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                a[i][j] -= a[row][j] * solve;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++row;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (row &lt;= n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = row; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][n + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in"><span class="keyword">int</span></span>(a[i][n + <span class="number">1</span>] / a[i][i] * <span class="number">100</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;x%d=0\n&quot;</span>, i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;x%d=%.2lf\n&quot;</span>, i, a[i][n + <span class="number">1</span>] / a[i][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高斯消元解有后效性的dp</title>
      <link href="/1970/01/01/TemLib/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83%E8%A7%A3%E6%9C%89%E5%90%8E%E6%95%88%E6%80%A7%E7%9A%84dp/"/>
      <url>/1970/01/01/TemLib/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83%E8%A7%A3%E6%9C%89%E5%90%8E%E6%95%88%E6%80%A7%E7%9A%84dp/</url>
      
        <content type="html"><![CDATA[<h2 id="CF24D-Broken-robot"><a href="#CF24D-Broken-robot" class="headerlink" title="CF24D Broken robot"></a><a href="https://www.luogu.com.cn/problem/CF24D">CF24D Broken robot</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXn = <span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXm = <span class="number">1e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> c;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);<span class="function"><span class="keyword">register</span> T <span class="title">x</span><span class="params">(c - <span class="string">&#x27;0&#x27;</span>)</span></span>;<span class="keyword">while</span> (c = <span class="built_in">getchar</span>(), c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (c ^ <span class="number">48</span>);&#125;a = x;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, y;</span><br><span class="line"><span class="keyword">double</span> mat[MAXm + <span class="number">10</span>][MAXm + <span class="number">10</span>], d[MAXn + <span class="number">10</span>][MAXm + <span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="built_in">read</span>(x), <span class="built_in">read</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">2</span> * (n - x));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (re <span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= x; --i) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(mat, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(mat));</span><br><span class="line">        mat[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">2</span>; mat[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">-1</span>;</span><br><span class="line">        mat[<span class="number">1</span>][m + <span class="number">1</span>] = d[i + <span class="number">1</span>][<span class="number">1</span>] + <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">2</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            mat[j][j - <span class="number">1</span>] = mat[j][j + <span class="number">1</span>] = <span class="number">-1</span>; mat[j][j] = <span class="number">3</span>;</span><br><span class="line">            mat[j][m + <span class="number">1</span>] = d[i + <span class="number">1</span>][j] + <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mat[m][m] = <span class="number">2</span>; mat[m][m - <span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">        mat[m][m + <span class="number">1</span>] = d[i + <span class="number">1</span>][m] + <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// ------- 高斯消元 begin -------</span></span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">double</span> solve = mat[i + <span class="number">1</span>][i] / mat[i][i];</span><br><span class="line">            mat[i + <span class="number">1</span>][i] -= mat[i][i] * solve;</span><br><span class="line">            <span class="keyword">if</span> (i != m) &#123;</span><br><span class="line">                mat[i + <span class="number">1</span>][i + <span class="number">1</span>] -= mat[i][i + <span class="number">1</span>] * solve;</span><br><span class="line">            &#125;</span><br><span class="line">            mat[i + <span class="number">1</span>][m + <span class="number">1</span>] -= mat[i][m + <span class="number">1</span>] * solve;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> i = m; i &gt; <span class="number">1</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">double</span> solve = mat[i - <span class="number">1</span>][i] / mat[i][i];</span><br><span class="line">            mat[i - <span class="number">1</span>][i] -= mat[i][i] * solve;</span><br><span class="line">            mat[i - <span class="number">1</span>][m + <span class="number">1</span>] -= mat[i][m + <span class="number">1</span>] * solve;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ------- 高斯消元 end -------</span></span><br><span class="line">        <span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            d[i][j] = mat[j][m + <span class="number">1</span>] / mat[j][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.4f\n&quot;</span>, d[x][y]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 数学 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精运算</title>
      <link href="/1970/01/01/TemLib/%E9%AB%98%E7%B2%BE%E8%BF%90%E7%AE%97/"/>
      <url>/1970/01/01/TemLib/%E9%AB%98%E7%B2%BE%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h3 id="实用小高精（推荐）"><a href="#实用小高精（推荐）" class="headerlink" title="实用小高精（推荐）"></a><a href="https://rsdbkhusky.github.io/1970/01/01/TemLib/%E5%AE%9E%E7%94%A8%E5%B0%8F%E9%AB%98%E7%B2%BE/">实用小高精（推荐）</a></h3><h2 id="P1601-A-B-Problem（高精）"><a href="#P1601-A-B-Problem（高精）" class="headerlink" title="P1601 A+B Problem（高精）"></a><a href="https://www.luogu.com.cn/problem/P1601">P1601 A+B Problem（高精）</a></h2><h2 id="P1303-A-B-Problem"><a href="#P1303-A-B-Problem" class="headerlink" title="P1303 A*B Problem"></a><a href="https://www.luogu.com.cn/problem/P1303">P1303 A*B Problem</a></h2><h2 id="P1480-A-B-Problem"><a href="#P1480-A-B-Problem" class="headerlink" title="P1480 A/B Problem"></a><a href="https://www.luogu.com.cn/problem/P1480">P1480 A/B Problem</a></h2><p><strong>(转载的)</strong></p><p><strong>支持负数，压位，重载运算符</strong></p><p><strong><del>不过赛场上应该没人写一遍这个</del></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BIT = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e4</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> num[maxn], len;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bign <span class="title">abs</span><span class="params">(<span class="keyword">const</span> bign &amp;x)</span> </span>&#123;</span><br><span class="line">        bign k = x;</span><br><span class="line">        k.flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(bign &amp;x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x.num[x.len] == <span class="number">0</span> &amp;&amp; x.len &gt; <span class="number">1</span>)x.len--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bign</span>() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(num));</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        len = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bign</span>(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) &#123;</span><br><span class="line">        *<span class="keyword">this</span> = <span class="built_in">bign</span>();</span><br><span class="line">        <span class="keyword">if</span> (x) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = x;</span><br><span class="line">            <span class="keyword">if</span> (k &lt; <span class="number">0</span>)k = -k, flag = <span class="literal">false</span>;</span><br><span class="line">            len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (k) &#123;</span><br><span class="line">                num[++len] = k % MOD;</span><br><span class="line">                k /= MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bign</span>(<span class="keyword">const</span> ll &amp;x) &#123;</span><br><span class="line">        *<span class="keyword">this</span> = <span class="built_in">bign</span>();</span><br><span class="line">        <span class="keyword">if</span> (x) &#123;</span><br><span class="line">            ll k = x;</span><br><span class="line">            <span class="keyword">if</span> (k &lt; <span class="number">0</span>)k = -k, flag = <span class="literal">false</span>;</span><br><span class="line">            len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (k) &#123;</span><br><span class="line">                num[++len] = k % MOD;</span><br><span class="line">                k /= MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bign</span>(<span class="keyword">const</span> <span class="keyword">char</span> *x) &#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="built_in">strlen</span>(x), s, t = <span class="number">0</span>, p = <span class="number">0</span>, k = <span class="number">1</span>;</span><br><span class="line">        *<span class="keyword">this</span> = <span class="built_in">bign</span>();</span><br><span class="line">        <span class="keyword">if</span> (x[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>)flag = <span class="literal">false</span>, s = <span class="number">1</span>;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l - <span class="number">1</span>; i &gt;= s; i--) &#123;</span><br><span class="line">            p += k * (x[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            k *= <span class="number">10</span>;</span><br><span class="line">            t++;</span><br><span class="line">            <span class="keyword">if</span> (t == <span class="number">4</span>) &#123;</span><br><span class="line">                t = <span class="number">0</span>;</span><br><span class="line">                num[++len] = p;</span><br><span class="line">                p = <span class="number">0</span>;</span><br><span class="line">                k = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p)num[++len] = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bign</span>(<span class="keyword">const</span> string x) &#123;</span><br><span class="line">        <span class="keyword">int</span> l = x.<span class="built_in">length</span>(), s = <span class="number">0</span>, t = <span class="number">0</span>, p = <span class="number">0</span>, k = <span class="number">1</span>;</span><br><span class="line">        *<span class="keyword">this</span> = <span class="built_in">bign</span>();</span><br><span class="line">        <span class="keyword">if</span> (x[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>)flag = <span class="literal">false</span>, s = <span class="number">1</span>;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l - <span class="number">1</span>; i &gt;= s; i--) &#123;</span><br><span class="line">            p += k * (x[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            k *= <span class="number">10</span>;</span><br><span class="line">            t++;</span><br><span class="line">            <span class="keyword">if</span> (t == BIT) &#123;</span><br><span class="line">                t = <span class="number">0</span>;</span><br><span class="line">                num[++len] = p;</span><br><span class="line">                p = <span class="number">0</span>;</span><br><span class="line">                k = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p)num[++len] = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> = <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>=(<span class="keyword">const</span> ll &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> = <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="keyword">char</span> *x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> = <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>=(<span class="keyword">const</span> string &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> = <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> bign &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag != x.flag)<span class="keyword">return</span> flag &lt; x.flag;</span><br><span class="line">        <span class="keyword">if</span> (len != x.len)<span class="keyword">return</span> (len &lt; x.len) ^ flag ^ <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num[i] != x.num[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> (num[i] &lt; x.num[i]) ^ flag ^ <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> &lt; <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> ll &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> &lt; <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> bign &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> &gt; <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> ll &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> &gt; <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> bign &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !(*<span class="keyword">this</span> &gt; x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> &lt;= <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> ll &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> &lt;= <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> bign &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> &gt;= <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> ll &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> &gt;= <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> bign &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag != x.flag)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (len != x.len)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num[i] != x.num[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> == <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> ll &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> == <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> bign &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !(*<span class="keyword">this</span> == x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> != <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> ll &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> != <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, bign &amp;x) &#123;</span><br><span class="line">        string s;</span><br><span class="line">        in &gt;&gt; s;</span><br><span class="line">        x = s;</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> bign &amp;x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x.flag == <span class="literal">false</span> &amp;&amp; x != <span class="number">0</span>)out &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">        out &lt;&lt; x.num[x.len];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x.len - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--)<span class="built_in">printf</span>(<span class="string">&quot;%0*d&quot;</span>, BIT, x.num[i]);</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>-() <span class="keyword">const</span> &#123;</span><br><span class="line">        bign k = *<span class="keyword">this</span>;</span><br><span class="line">        k.flag ^= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>+(<span class="keyword">const</span> bign &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag &amp;&amp; x.flag) &#123;</span><br><span class="line">            bign k = <span class="built_in">bign</span>();</span><br><span class="line">            k.len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, g = <span class="number">0</span>; g || i &lt;= len || i &lt;= x.len; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> p = num[i] + x.num[i] + g;</span><br><span class="line">                k.num[++k.len] = p % MOD;</span><br><span class="line">                g = p / MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag &amp;&amp; !x.flag)<span class="keyword">return</span> *<span class="keyword">this</span> - (-x);</span><br><span class="line">        <span class="keyword">if</span> (!flag &amp;&amp; x.flag)<span class="keyword">return</span> x - (-*<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> -((-x) + (-*<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>+(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> + <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>+=(<span class="keyword">const</span> bign &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> + x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>+=(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> += <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>+=(<span class="keyword">const</span> ll &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> += <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>++() &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">        bign k = *<span class="keyword">this</span>;</span><br><span class="line">        *<span class="keyword">this</span> += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>-(<span class="keyword">const</span> bign &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag &amp;&amp; x.flag &amp;&amp; *<span class="keyword">this</span> &gt;= x) &#123;</span><br><span class="line">            bign k = <span class="built_in">bign</span>();</span><br><span class="line">            k.len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, g = <span class="number">0</span>; g || i &lt;= len; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> p = num[i] - x.num[i] + g;</span><br><span class="line">                <span class="keyword">if</span> (p &lt; <span class="number">0</span>)g = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> g = <span class="number">0</span>;</span><br><span class="line">                k.num[++k.len] = (p % MOD + MOD) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">remove</span>(k);</span><br><span class="line">            <span class="keyword">return</span> k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag &amp;&amp; x.flag)<span class="keyword">return</span> -(x - *<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (flag &amp;&amp; !x.flag)<span class="keyword">return</span> *<span class="keyword">this</span> + (-x);</span><br><span class="line">        <span class="keyword">if</span> (!flag &amp;&amp; x.flag)<span class="keyword">return</span> -((-*<span class="keyword">this</span>) + x);</span><br><span class="line">        <span class="keyword">return</span> (-x) - (-*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>-=(<span class="keyword">const</span> bign &amp;x) &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> - x;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>-=(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> -= <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>-=(<span class="keyword">const</span> ll &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> -= <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>--() &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>--(<span class="keyword">int</span>) &#123;</span><br><span class="line">        bign k = *<span class="keyword">this</span>;</span><br><span class="line">        *<span class="keyword">this</span> -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>*(<span class="keyword">const</span> bign &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        bign k;</span><br><span class="line">        k.flag = (flag == x.flag);</span><br><span class="line">        k.len = len + x.len + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= x.len; j++) &#123;</span><br><span class="line">                k.num[i + j - <span class="number">1</span>] += num[i] * x.num[j];</span><br><span class="line">                k.num[i + j] += k.num[i + j - <span class="number">1</span>] / MOD;</span><br><span class="line">                k.num[i + j - <span class="number">1</span>] %= MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">remove</span>(k);</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>*(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        bign k = <span class="built_in">bign</span>();</span><br><span class="line">        k.len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> t[maxn];</span><br><span class="line">        <span class="built_in">memset</span>(t, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(t));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)t[i] = num[i] * x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, g = <span class="number">0</span>; i &lt;= len || g; i++) &#123;</span><br><span class="line">            k.num[++k.len] = (g + t[i]) % MOD;</span><br><span class="line">            g = (g + t[i]) / MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>*(<span class="keyword">const</span> ll &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        bign k = <span class="built_in">bign</span>();</span><br><span class="line">        k.len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> t[maxn];</span><br><span class="line">        <span class="built_in">memset</span>(t, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(t));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)t[i] = num[i] * x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, g = <span class="number">0</span>; i &lt;= len || g; i++) &#123;</span><br><span class="line">            k.num[++k.len] = (g + t[i]) % MOD;</span><br><span class="line">            g = (g + t[i]) / MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>*=(<span class="keyword">const</span> bign &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> * x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>*=(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> * x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>*=(<span class="keyword">const</span> ll &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> * x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>/(<span class="keyword">const</span> bign &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>)<span class="keyword">return</span> <span class="built_in">bign</span>();</span><br><span class="line">        bign k = <span class="built_in">bign</span>(), a = <span class="built_in">bign</span>();</span><br><span class="line">        k.flag = (flag == x.flag);</span><br><span class="line">        k.len = len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            a = a * MOD + num[i];</span><br><span class="line">            <span class="keyword">while</span> (a &gt;= <span class="built_in">abs</span>(x)) &#123;</span><br><span class="line">                a -= <span class="built_in">abs</span>(x);</span><br><span class="line">                k.num[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        if ((flag != x.flag) &amp; a != 0)</span></span><br><span class="line"><span class="comment">//            k--;  //È¡Ä£</span></span><br><span class="line">        <span class="built_in">remove</span>(k);</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>/(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>)<span class="keyword">return</span> <span class="built_in">bign</span>();</span><br><span class="line">        bign k = <span class="built_in">bign</span>();</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        k.flag = (flag == (x &gt;= <span class="number">0</span>));</span><br><span class="line">        k.len = len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            a = a * MOD + num[i];</span><br><span class="line">            k.num[i] = a / x;</span><br><span class="line">            a %= x;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        if ((flag != x.flag) &amp; a != 0)</span></span><br><span class="line"><span class="comment">//            k--;  //È¡Ä£</span></span><br><span class="line">        <span class="built_in">remove</span>(k);</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>/(<span class="keyword">const</span> ll &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>)<span class="keyword">return</span> <span class="built_in">bign</span>();</span><br><span class="line">        bign k = <span class="built_in">bign</span>();</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        k.flag = (flag == (x &gt;= <span class="number">0</span>));</span><br><span class="line">        k.len = len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            a = a * MOD + num[i];</span><br><span class="line">            k.num[i] = a / x;</span><br><span class="line">            a %= x;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        if ((flag != x.flag) &amp; a != 0)</span></span><br><span class="line"><span class="comment">//            k--;  //È¡Ä£</span></span><br><span class="line">        <span class="built_in">remove</span>(k);</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>/=(<span class="keyword">const</span> bign &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> / x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>/=(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> / x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>/=(<span class="keyword">const</span> ll &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> / x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>%(<span class="keyword">const</span> bign &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>)<span class="keyword">return</span> <span class="built_in">bign</span>();</span><br><span class="line">        bign a = <span class="built_in">bign</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            a = a * MOD + num[i];</span><br><span class="line">            <span class="keyword">while</span> (a &gt;= <span class="built_in">abs</span>(x))a -= <span class="built_in">abs</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        if (a == 0)return a;</span></span><br><span class="line"><span class="comment">//        if (flag &amp;&amp; x.flag)return a;</span></span><br><span class="line"><span class="comment">//        if (flag &amp;&amp; !x.flag)return a + x;</span></span><br><span class="line"><span class="comment">//        if (!flag &amp;&amp; x.flag)return x - a;</span></span><br><span class="line"><span class="comment">//        return -a;//È¡Ä£</span></span><br><span class="line">        <span class="keyword">if</span> (flag)<span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">return</span> -a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>%(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> % <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>%(<span class="keyword">const</span> ll &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> % <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>%=(<span class="keyword">const</span> bign &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> % x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>%=(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> %= <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bign <span class="keyword">operator</span>%=(<span class="keyword">const</span> ll &amp;x) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> %= <span class="built_in">bign</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bign <span class="title">pow</span><span class="params">(<span class="keyword">const</span> bign &amp;x, <span class="keyword">const</span> bign &amp;y)</span> </span>&#123;</span><br><span class="line">        bign ans = <span class="number">1</span>, cnt = x, w = y;</span><br><span class="line">        <span class="keyword">while</span> (w &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w % <span class="number">2</span> == <span class="number">1</span>)ans *= cnt;</span><br><span class="line">            cnt *= cnt;</span><br><span class="line">            w /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bign <span class="title">pow</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x, <span class="keyword">const</span> bign &amp;y)</span> </span>&#123;</span><br><span class="line">        bign ans = <span class="number">1</span>, cnt = x, w = y;</span><br><span class="line">        <span class="keyword">while</span> (w &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w % <span class="number">2</span> == <span class="number">1</span>)ans *= cnt;</span><br><span class="line">            cnt *= cnt;</span><br><span class="line">            w /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bign <span class="title">pow</span><span class="params">(<span class="keyword">const</span> bign &amp;x, <span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">        bign ans = <span class="number">1</span>, cnt = x;</span><br><span class="line">        <span class="keyword">int</span> w = y;</span><br><span class="line">        <span class="keyword">while</span> (w) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w &amp; <span class="number">1</span>)ans *= cnt;</span><br><span class="line">            cnt *= cnt;</span><br><span class="line">            w &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bign <span class="title">powmod</span><span class="params">(<span class="keyword">const</span> bign &amp;x, <span class="keyword">const</span> bign &amp;y, <span class="keyword">const</span> bign &amp;z)</span> </span>&#123;</span><br><span class="line">        bign ans = <span class="number">1</span>, cnt = x, w = y;</span><br><span class="line">        <span class="keyword">while</span> (w &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w % <span class="number">2</span> == <span class="number">1</span>)ans = ans * cnt % z;</span><br><span class="line">            cnt = cnt * cnt % z;</span><br><span class="line">            w /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bign <span class="title">powmod</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x, <span class="keyword">const</span> bign &amp;y, <span class="keyword">const</span> bign &amp;z)</span> </span>&#123;</span><br><span class="line">        bign ans = <span class="number">1</span>, cnt = x, w = y;</span><br><span class="line">        <span class="keyword">while</span> (w &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w % <span class="number">2</span> == <span class="number">1</span>)ans = ans * cnt % z;</span><br><span class="line">            cnt = cnt * cnt % z;</span><br><span class="line">            w /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bign <span class="title">powmod</span><span class="params">(<span class="keyword">const</span> bign &amp;x, <span class="keyword">const</span> <span class="keyword">int</span> &amp;y, <span class="keyword">const</span> bign &amp;z)</span> </span>&#123;</span><br><span class="line">        bign ans = <span class="number">1</span>, cnt = x;</span><br><span class="line">        <span class="keyword">int</span> w = y;</span><br><span class="line">        <span class="keyword">while</span> (w) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w &amp; <span class="number">1</span>)ans = ans * cnt % z;</span><br><span class="line">            cnt = cnt * cnt % z;</span><br><span class="line">            w &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bign <span class="title">powmod</span><span class="params">(<span class="keyword">const</span> bign &amp;x, <span class="keyword">const</span> bign &amp;y, <span class="keyword">const</span> <span class="keyword">int</span> &amp;z)</span> </span>&#123;</span><br><span class="line">        bign ans = <span class="number">1</span>, cnt = x, w = y;</span><br><span class="line">        <span class="keyword">while</span> (w &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w % <span class="number">2</span> == <span class="number">1</span>)ans = ans * cnt % z;</span><br><span class="line">            cnt = cnt * cnt % z;</span><br><span class="line">            w /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bign <span class="title">powmod</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x, <span class="keyword">const</span> bign &amp;y, <span class="keyword">const</span> <span class="keyword">int</span> &amp;z)</span> </span>&#123;</span><br><span class="line">        bign ans = <span class="number">1</span>, cnt = x, w = y;</span><br><span class="line">        <span class="keyword">while</span> (w &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w % <span class="number">2</span> == <span class="number">1</span>)ans = ans * cnt % z;</span><br><span class="line">            cnt = cnt * cnt % z;</span><br><span class="line">            w /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bign <span class="title">powmod</span><span class="params">(<span class="keyword">const</span> bign &amp;x, <span class="keyword">const</span> <span class="keyword">int</span> &amp;y, <span class="keyword">const</span> <span class="keyword">int</span> &amp;z)</span> </span>&#123;</span><br><span class="line">        bign ans = <span class="number">1</span>, cnt = x;</span><br><span class="line">        <span class="keyword">int</span> w = y;</span><br><span class="line">        <span class="keyword">while</span> (w) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w &amp; <span class="number">1</span>)ans = ans * cnt % z;</span><br><span class="line">            cnt = cnt * cnt % z;</span><br><span class="line">            w &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bign <span class="title">max</span><span class="params">(<span class="keyword">const</span> bign &amp;x, <span class="keyword">const</span> bign &amp;y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bign <span class="title">min</span><span class="params">(<span class="keyword">const</span> bign &amp;x, <span class="keyword">const</span> bign &amp;y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; y ? x : y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    bign a, b;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a - b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a * b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a / b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a % b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>你竟然看完了！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 模板 </tag>
            
            <tag> 封装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吉老师线段树</title>
      <link href="/1970/01/01/TemLib/%E5%90%89%E8%80%81%E5%B8%88%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/1970/01/01/TemLib/%E5%90%89%E8%80%81%E5%B8%88%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>核心思想</p><ol><li><p>设当前操作为将区间内值与 $v$ 取 $\min$，如果当前节点完全被操作区间包含（既满足普通线段树停止递归的条件），分类讨论：</p><ul><li><p>$\max\le v$</p></li><li><p>$\mathrm{secmax}&lt;v&lt;\max$</p></li><li><p>$v\le\mathrm{secmax}$</p></li></ul></li><li><p>对于有多种懒标记的情况，要么钦定他们的顺序，要么将他们转化成几种没有顺序关系（或者说是顺序上不冲突）的懒标记（比如几种加减标记）。</p></li><li><p>对于维护历史最值的要求，考虑标记的生命周期。</p></li></ol><p><a href="https://darkbzoj.tk/problem/4695">DarkBzoj #4695. 最假女选手</a></p><p>解法一用的是钦定懒标记顺序的方法，解法二用的是转化成没有顺序关系的懒标记的方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (id &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (id &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="keyword">int</span> le[MAXnd + <span class="number">10</span>], ri[MAXnd + <span class="number">10</span>], mid[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> mx[MAXnd + <span class="number">10</span>], cntmx[MAXnd + <span class="number">10</span>], secmx[MAXnd + <span class="number">10</span>], mn[MAXnd + <span class="number">10</span>], cntmn[MAXnd + <span class="number">10</span>], secmn[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> sum[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> lzadd[MAXnd + <span class="number">10</span>], lzmx[MAXnd + <span class="number">10</span>], lzmn[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">钦定顺序: lzadd &gt; lzmx = lzmn</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id)</span>  </span>&#123;</span><br><span class="line">    sum[id] = sum[ls] + sum[rs];</span><br><span class="line">    <span class="keyword">if</span> (mx[ls] &gt; mx[rs]) &#123;</span><br><span class="line">        mx[id] = mx[ls];</span><br><span class="line">        cntmx[id] = cntmx[ls];</span><br><span class="line">        secmx[id] = <span class="built_in">max</span>(secmx[ls], mx[rs]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mx[ls] &lt; mx[rs]) &#123;</span><br><span class="line">        mx[id] = mx[rs];</span><br><span class="line">        cntmx[id] = cntmx[rs];</span><br><span class="line">        secmx[id] = <span class="built_in">max</span>(mx[ls], secmx[rs]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mx[id] = mx[ls];</span><br><span class="line">        cntmx[id] = cntmx[ls] + cntmx[rs];</span><br><span class="line">        secmx[id] = <span class="built_in">max</span>(secmx[ls], secmx[rs]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mn[ls] &lt; mn[rs]) &#123;</span><br><span class="line">        mn[id] = mn[ls];</span><br><span class="line">        cntmn[id] = cntmn[ls];</span><br><span class="line">        secmn[id] = <span class="built_in">min</span>(secmn[ls], mn[rs]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mn[ls] &gt; mn[rs]) &#123;</span><br><span class="line">        mn[id] = mn[rs];</span><br><span class="line">        cntmn[id] = cntmn[rs];</span><br><span class="line">        secmn[id] = <span class="built_in">min</span>(mn[ls], secmn[rs]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mn[id] = mn[ls];</span><br><span class="line">        cntmn[id] = cntmn[ls] + cntmn[rs];</span><br><span class="line">        secmn[id] = <span class="built_in">min</span>(secmn[ls], secmn[rs]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putadd</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> padd)</span> </span>&#123;</span><br><span class="line">    sum[id] += padd * (ri[id] - le[id] + <span class="number">1</span>);</span><br><span class="line">    mx[id] += padd;</span><br><span class="line">    mn[id] += padd;</span><br><span class="line">    <span class="keyword">if</span> (secmx[id] != -INF) secmx[id] += padd;</span><br><span class="line">    <span class="keyword">if</span> (secmn[id] != INF) secmn[id] += padd;</span><br><span class="line">    <span class="keyword">if</span> (lzmx[id] != -INF) lzmx[id] += padd;</span><br><span class="line">    <span class="keyword">if</span> (lzmn[id] != INF) lzmn[id] += padd;</span><br><span class="line">    lzadd[id] += padd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putmx</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> pmx)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mn[id] &gt;= pmx) <span class="keyword">return</span>;</span><br><span class="line">    sum[id] += (pmx - mn[id]) * cntmn[id];</span><br><span class="line">    <span class="keyword">if</span> (secmx[id] == mn[id]) secmx[id] = pmx;</span><br><span class="line">    <span class="keyword">if</span> (mx[id] == mn[id]) mx[id] = pmx;</span><br><span class="line">    <span class="keyword">if</span> (lzmn[id] &lt; pmx) lzmn[id] = pmx;</span><br><span class="line">    mn[id] = lzmx[id] = pmx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putmn</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> pmn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mx[id] &lt;= pmn) <span class="keyword">return</span>;</span><br><span class="line">    sum[id] -= (mx[id] - pmn) * cntmx[id];</span><br><span class="line">    <span class="keyword">if</span> (secmn[id] == mx[id]) secmn[id] = pmn;</span><br><span class="line">    <span class="keyword">if</span> (mn[id] == mx[id]) mn[id] = pmn;</span><br><span class="line">    <span class="keyword">if</span> (lzmx[id] &gt; pmn) lzmx[id] = pmn;</span><br><span class="line">    mx[id] = lzmn[id] = pmn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lzadd[id]) &#123; <span class="comment">// 注意顺序lzadd与其他懒标记的顺序</span></span><br><span class="line">        <span class="built_in">putadd</span>(ls, lzadd[id]);</span><br><span class="line">        <span class="built_in">putadd</span>(rs, lzadd[id]);</span><br><span class="line">        lzadd[id] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lzmx[id] != -INF) &#123;</span><br><span class="line">        <span class="built_in">putmx</span>(ls, lzmx[id]);</span><br><span class="line">        <span class="built_in">putmx</span>(rs, lzmx[id]);</span><br><span class="line">        lzmx[id] = -INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lzmn[id] != INF) &#123;</span><br><span class="line">        <span class="built_in">putmn</span>(ls, lzmn[id]);</span><br><span class="line">        <span class="built_in">putmn</span>(rs, lzmn[id]);</span><br><span class="line">        lzmn[id] = INF;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">    le[id] = l;</span><br><span class="line">    ri[id] = r;</span><br><span class="line">    mid[id] = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    lzmx[id] = -INF;</span><br><span class="line">    lzmn[id] = INF;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        mx[id] = mn[id] = sum[id] = a[l];</span><br><span class="line">        cntmx[id] = cntmn[id] = <span class="number">1</span>;</span><br><span class="line">        secmx[id] = -INF;</span><br><span class="line">        secmn[id] = INF;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">Build</span>(ls, l, mid[id], a);</span><br><span class="line">        <span class="built_in">Build</span>(rs, mid[id] + <span class="number">1</span>, r, a);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyAdd</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="built_in">putadd</span>(id, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) <span class="built_in">modifyAdd</span>(ls, l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) <span class="built_in">modifyAdd</span>(rs, l, r, v);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyMax</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mn[id] &gt;= v) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (secmn[id] &gt; v &amp;&amp; le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="built_in">putmx</span>(id, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) <span class="built_in">modifyMax</span>(ls, l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) <span class="built_in">modifyMax</span>(rs, l, r, v);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyMin</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mx[id] &lt;= v) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (secmx[id] &lt; v &amp;&amp; le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="built_in">putmn</span>(id, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) <span class="built_in">modifyMin</span>(ls, l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) <span class="built_in">modifyMin</span>(rs, l, r, v);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querySum</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) ans += <span class="built_in">querySum</span>(ls, l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) ans += <span class="built_in">querySum</span>(rs, l, r);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryMax</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> mx[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> ans = -INF;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryMax</span>(ls, l, r));</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryMax</span>(rs, l, r));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryMin</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> mn[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> ans = INF;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) ans = <span class="built_in">min</span>(ans, <span class="built_in">queryMin</span>(ls, l, r));</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) ans = <span class="built_in">min</span>(ans, <span class="built_in">queryMin</span>(rs, l, r));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rs</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (id &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (id &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="keyword">int</span> le[MAXnd + <span class="number">10</span>], ri[MAXnd + <span class="number">10</span>], mid[MAXnd + <span class="number">10</span>], len[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> mx[MAXnd + <span class="number">10</span>], cntmx[MAXnd + <span class="number">10</span>], secmx[MAXnd + <span class="number">10</span>], mn[MAXnd + <span class="number">10</span>], cntmn[MAXnd + <span class="number">10</span>], secmn[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> sum[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> lz1[MAXnd + <span class="number">10</span>], lz2[MAXnd + <span class="number">10</span>], lz3[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">lz1: 最大值的增减值</span></span><br><span class="line"><span class="comment">lz2: 最小值的增减值</span></span><br><span class="line"><span class="comment">lz3: 非最小最大值的增减值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mx[ls] &gt; mx[rs]) &#123;</span><br><span class="line">        mx[id] = mx[ls];</span><br><span class="line">        cntmx[id] = cntmx[ls];</span><br><span class="line">        secmx[id] = <span class="built_in">max</span>(secmx[ls], mx[rs]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mx[ls] &lt; mx[rs]) &#123;</span><br><span class="line">        mx[id] = mx[rs];</span><br><span class="line">        cntmx[id] = cntmx[rs];</span><br><span class="line">        secmx[id] = <span class="built_in">max</span>(mx[ls], secmx[rs]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mx[id] = mx[ls];</span><br><span class="line">        cntmx[id] = cntmx[ls] + cntmx[rs];</span><br><span class="line">        secmx[id] = <span class="built_in">max</span>(secmx[ls], secmx[rs]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mn[ls] &lt; mn[rs]) &#123;</span><br><span class="line">        mn[id] = mn[ls];</span><br><span class="line">        cntmn[id] = cntmn[ls];</span><br><span class="line">        secmn[id] = <span class="built_in">min</span>(secmn[ls], mn[rs]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mn[ls] &gt; mn[rs]) &#123;</span><br><span class="line">        mn[id] = mn[rs];</span><br><span class="line">        cntmn[id] = cntmn[rs];</span><br><span class="line">        secmn[id] = <span class="built_in">min</span>(mn[ls], secmn[rs]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mn[id] = mn[ls];</span><br><span class="line">        cntmn[id] = cntmn[ls] + cntmn[rs];</span><br><span class="line">        secmn[id] = <span class="built_in">min</span>(secmn[ls], secmn[rs]);</span><br><span class="line">    &#125;</span><br><span class="line">    sum[id] = sum[ls] + sum[rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> v1, <span class="keyword">int</span> v2, <span class="keyword">int</span> v3)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mx[id] == secmn[id]) &#123;</span><br><span class="line">        sum[id] += v1 * cntmx[id] + v2 * cntmn[id];</span><br><span class="line">        mx[id] += v1;</span><br><span class="line">        mn[id] += v2;</span><br><span class="line">        secmx[id] += v2;</span><br><span class="line">        secmn[id] += v1;</span><br><span class="line">        lz1[id] += v1;</span><br><span class="line">        lz2[id] += v2;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mx[id] == mn[id]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v1) &#123;</span><br><span class="line">            sum[id] += v1 * cntmx[id];</span><br><span class="line">            mx[id] += v1;</span><br><span class="line">            mn[id] += v1;</span><br><span class="line">            lz1[id] += v1;</span><br><span class="line">            lz2[id] += v1;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v2) &#123;</span><br><span class="line">            sum[id] += v2 * cntmx[id];</span><br><span class="line">            mx[id] += v2;</span><br><span class="line">            mn[id] += v2;</span><br><span class="line">            lz1[id] += v2;</span><br><span class="line">            lz2[id] += v2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum[id] += v3 * cntmx[id];</span><br><span class="line">            mx[id] += v3;</span><br><span class="line">            mn[id] += v3;</span><br><span class="line">            lz1[id] += v3;</span><br><span class="line">            lz2[id] += v3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sum[id] += v1 * cntmx[id] + v2 * cntmn[id] + v3 * (len[id] - cntmx[id] - cntmn[id]);</span><br><span class="line">        mx[id] += v1;</span><br><span class="line">        mn[id] += v2;</span><br><span class="line">        secmx[id] += v3;</span><br><span class="line">        secmn[id] += v3;</span><br><span class="line">        lz1[id] += v1;</span><br><span class="line">        lz2[id] += v2;</span><br><span class="line">        lz3[id] += v3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxx = <span class="built_in">max</span>(mx[ls], mx[rs]), minn = <span class="built_in">min</span>(mn[ls], mn[rs]);</span><br><span class="line">    <span class="keyword">if</span> (mx[ls] == mn[ls]) <span class="built_in">update</span>(ls, mx[ls] == maxx ? lz1[id] : <span class="number">0</span>, mn[ls] == minn ? lz2[id] : <span class="number">0</span>, lz3[id]);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(ls, mx[ls] == maxx ? lz1[id] : lz3[id], mn[ls] == minn ? lz2[id] : lz3[id], lz3[id]);</span><br><span class="line">    <span class="keyword">if</span> (mx[rs] == mn[rs]) <span class="built_in">update</span>(rs, mx[rs] == maxx ? lz1[id] : <span class="number">0</span>, mn[rs] == minn ? lz2[id] : <span class="number">0</span>, lz3[id]);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(rs, mx[rs] == maxx ? lz1[id] : lz3[id], mn[rs] == minn ? lz2[id] : lz3[id], lz3[id]);</span><br><span class="line">    lz1[id] = lz2[id] = lz3[id] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">    le[id] = l;</span><br><span class="line">    ri[id] = r;</span><br><span class="line">    mid[id] = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    len[id] = r - l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)  &#123;</span><br><span class="line">        mn[id] = mx[id] = sum[id] = a[l];</span><br><span class="line">        cntmn[id] = cntmx[id] = <span class="number">1</span>;</span><br><span class="line">        secmn[id] = INF;</span><br><span class="line">        secmx[id] = -INF;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">Build</span>(ls, l, mid[id], a);</span><br><span class="line">        <span class="built_in">Build</span>(rs, mid[id] + <span class="number">1</span>, r, a);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyAdd</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="built_in">update</span>(id, v, v, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) <span class="built_in">modifyAdd</span>(ls, l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) <span class="built_in">modifyAdd</span>(rs, l, r, v);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyMin</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mx[id] &lt;= v) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (secmx[id] &lt; v &amp;&amp; le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="built_in">update</span>(id, v - mx[id], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) <span class="built_in">modifyMin</span>(ls, l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) <span class="built_in">modifyMin</span>(rs, l, r, v);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyMax</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mn[id] &gt;= v) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (secmn[id] &gt; v &amp;&amp; le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="built_in">update</span>(id, <span class="number">0</span>, v - mn[id], <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) <span class="built_in">modifyMax</span>(ls, l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) <span class="built_in">modifyMax</span>(rs, l, r, v);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querySum</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) ans += <span class="built_in">querySum</span>(ls, l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) ans += <span class="built_in">querySum</span>(rs, l, r);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryMin</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> mn[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> ans = INF;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) ans = <span class="built_in">min</span>(ans, <span class="built_in">queryMin</span>(ls, l, r));</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) ans = <span class="built_in">min</span>(ans, <span class="built_in">queryMin</span>(rs, l, r));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryMax</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> mx[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> ans = -INF;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryMax</span>(ls, l, r));</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryMax</span>(rs, l, r));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rs</span></span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P6242">Luogu P6242 【模板】线段树 3</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (id &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (id &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="keyword">int</span> le[MAXnd + <span class="number">10</span>], ri[MAXnd + <span class="number">10</span>], mid[MAXnd + <span class="number">10</span>], len[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> sum[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> mx[MAXnd + <span class="number">10</span>], cntmx[MAXnd + <span class="number">10</span>], secmx[MAXnd + <span class="number">10</span>], hismx[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> lz1[MAXnd + <span class="number">10</span>], lz2[MAXnd + <span class="number">10</span>], lz3[MAXnd + <span class="number">10</span>], lz4[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">lz1: 最大值的增减值</span></span><br><span class="line"><span class="comment">lz2: 最大值的增减值生命周期中的最大值</span></span><br><span class="line"><span class="comment">lz3: 非最大值的增减值</span></span><br><span class="line"><span class="comment">lz4: 非最大值历史的增减值生命周期中的最大值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mx[ls] &gt; mx[rs]) &#123;</span><br><span class="line">        mx[id] = mx[ls];</span><br><span class="line">        cntmx[id] = cntmx[ls];</span><br><span class="line">        secmx[id] = <span class="built_in">max</span>(secmx[ls], mx[rs]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mx[ls] &lt; mx[rs]) &#123;</span><br><span class="line">        mx[id] = mx[rs];</span><br><span class="line">        cntmx[id] = cntmx[rs];</span><br><span class="line">        secmx[id] = <span class="built_in">max</span>(mx[ls], secmx[rs]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mx[id] = mx[ls];</span><br><span class="line">        cntmx[id] = cntmx[ls] + cntmx[rs];</span><br><span class="line">        secmx[id] = <span class="built_in">max</span>(secmx[ls], secmx[rs]);</span><br><span class="line">    &#125;</span><br><span class="line">    hismx[id] = <span class="built_in">max</span>(hismx[ls], hismx[rs]);</span><br><span class="line">    sum[id] = sum[ls] + sum[rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> v1, <span class="keyword">int</span> v2, <span class="keyword">int</span> v3, <span class="keyword">int</span> v4)</span> </span>&#123;</span><br><span class="line">    sum[id] += v1 * cntmx[id] + v3 * (len[id] - cntmx[id]);</span><br><span class="line">    hismx[id] = <span class="built_in">max</span>(hismx[id], mx[id] + v2);</span><br><span class="line">    lz2[id] = <span class="built_in">max</span>(lz2[id], lz1[id] + v2);</span><br><span class="line">    lz4[id] = <span class="built_in">max</span>(lz4[id], lz3[id] + v4);</span><br><span class="line">    mx[id] += v1; <span class="comment">// 注意顺序!</span></span><br><span class="line">    <span class="keyword">if</span> (secmx[id] != -INF) secmx[id] += v3;</span><br><span class="line">    lz1[id] += v1;</span><br><span class="line">    lz3[id] += v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxx = <span class="built_in">max</span>(mx[ls], mx[rs]);</span><br><span class="line">    <span class="keyword">if</span> (maxx == mx[ls]) <span class="built_in">update</span>(ls, lz1[id], lz2[id], lz3[id], lz4[id]);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(ls, lz3[id], lz4[id], lz3[id], lz4[id]);</span><br><span class="line">    <span class="keyword">if</span> (maxx == mx[rs]) <span class="built_in">update</span>(rs, lz1[id], lz2[id], lz3[id], lz4[id]);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(rs, lz3[id], lz4[id], lz3[id], lz4[id]);</span><br><span class="line">    lz1[id] = lz2[id] = lz3[id] = lz4[id] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">    le[id] = l;</span><br><span class="line">    ri[id] = r;</span><br><span class="line">    mid[id] = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    len[id] = r - l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        sum[id] = mx[id] = hismx[id] = a[l];</span><br><span class="line">        cntmx[id] = <span class="number">1</span>;</span><br><span class="line">        secmx[id] = -INF;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">Build</span>(ls, l, mid[id], a);</span><br><span class="line">        <span class="built_in">Build</span>(rs, mid[id] + <span class="number">1</span>, r, a);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyAdd</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="built_in">update</span>(id, v, v, v, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) <span class="built_in">modifyAdd</span>(ls, l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) <span class="built_in">modifyAdd</span>(rs, l, r, v);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyMin</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mx[id] &lt;= v) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (secmx[id] &lt; v &amp;&amp; le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="built_in">update</span>(id, v - mx[id], v - mx[id], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) <span class="built_in">modifyMin</span>(ls, l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) <span class="built_in">modifyMin</span>(rs, l, r, v);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">querySum</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) ans += <span class="built_in">querySum</span>(ls, l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) ans += <span class="built_in">querySum</span>(rs, l, r);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryMax</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> mx[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> ans = -INF;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryMax</span>(ls, l, r));</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryMax</span>(rs, l, r));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryHisMax</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> hismx[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> ans = -INF;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryHisMax</span>(ls, l, r));</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryHisMax</span>(rs, l, r));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rs</span></span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P4314">Luogu P4314 CPU 监控</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (id &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (id &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="keyword">int</span> le[MAXnd + <span class="number">10</span>], ri[MAXnd + <span class="number">10</span>], mid[MAXnd + <span class="number">10</span>], len[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> mx[MAXnd + <span class="number">10</span>], hismx[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> lz1[MAXnd + <span class="number">10</span>], lz2[MAXnd + <span class="number">10</span>], lz3[MAXnd + <span class="number">10</span>], lz4[MAXnd + <span class="number">10</span>], lz5[MAXnd + <span class="number">10</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">lz1: 末段增减值</span></span><br><span class="line"><span class="comment">lz2: 末段增减值的历史最大值</span></span><br><span class="line"><span class="comment">lz3: 首段增减值的历史最大值</span></span><br><span class="line"><span class="comment">lz4: (如果有)末端覆盖值</span></span><br><span class="line"><span class="comment">lz5: (如果有)中间段的最大值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    mx[id] = <span class="built_in">max</span>(mx[ls], mx[rs]);</span><br><span class="line">    hismx[id] = <span class="built_in">max</span>(hismx[ls], hismx[rs]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> v1, <span class="keyword">int</span> v2, <span class="keyword">int</span> v3, <span class="keyword">int</span> v4, <span class="keyword">int</span> v5)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v4 == INF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lz4[id] == INF) &#123;</span><br><span class="line">            hismx[id] = <span class="built_in">max</span>(hismx[id], mx[id] + v3);</span><br><span class="line">            mx[id] = mx[id] + v1;</span><br><span class="line">            lz2[id] = lz3[id] = <span class="built_in">max</span>(lz2[id], lz1[id] + v3);</span><br><span class="line">            lz1[id] = lz1[id] + v1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hismx[id] = <span class="built_in">max</span>(hismx[id], mx[id] + v3);</span><br><span class="line">            mx[id] = mx[id] + v1;</span><br><span class="line">            lz2[id] = <span class="built_in">max</span>(lz2[id], lz1[id] + v3);</span><br><span class="line">            lz1[id] = lz1[id] + v1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lz4[id] == INF) &#123;</span><br><span class="line">            hismx[id] = <span class="built_in">max</span>(<span class="built_in">max</span>(<span class="built_in">max</span>(hismx[id], mx[id] + v3), v5), v4 + v2);</span><br><span class="line">            mx[id] = v4 + v1;</span><br><span class="line">            lz3[id] = <span class="built_in">max</span>(lz3[id], lz1[id] + v3);</span><br><span class="line">            lz1[id] = v1;</span><br><span class="line">            lz2[id] = v2;</span><br><span class="line">            lz4[id] = v4;</span><br><span class="line">            lz5[id] = v5;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hismx[id] = <span class="built_in">max</span>(<span class="built_in">max</span>(<span class="built_in">max</span>(hismx[id], mx[id] + v3), v5), v4 + v2);</span><br><span class="line">            mx[id] = v4 + v1;</span><br><span class="line">            lz5[id] = <span class="built_in">max</span>(<span class="built_in">max</span>(<span class="built_in">max</span>(lz5[id], v5), lz4[id] + lz2[id]), lz4[id] + lz1[id] + v3);</span><br><span class="line">            lz1[id] = v1;</span><br><span class="line">            lz2[id] = v2;</span><br><span class="line">            lz4[id] = v4;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">update</span>(ls, lz1[id], lz2[id], lz3[id], lz4[id], lz5[id]);</span><br><span class="line">    <span class="built_in">update</span>(rs, lz1[id], lz2[id], lz3[id], lz4[id], lz5[id]);</span><br><span class="line">    lz1[id] = lz2[id] = lz3[id] = <span class="number">0</span>;</span><br><span class="line">    lz4[id] = INF;</span><br><span class="line">    lz5[id] = -INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> *a)</span> </span>&#123;</span><br><span class="line">    le[id] = l;</span><br><span class="line">    ri[id] = r;</span><br><span class="line">    mid[id] = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    len[id] = r - l + <span class="number">1</span>;</span><br><span class="line">    lz4[id] = INF;</span><br><span class="line">    lz5[id] = -INF;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        mx[id] = hismx[id] = a[l];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">Build</span>(ls, l, mid[id], a);</span><br><span class="line">        <span class="built_in">Build</span>(rs, mid[id] + <span class="number">1</span>, r, a);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyAdd</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="built_in">update</span>(id, v, v, v, INF, -INF);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) <span class="built_in">modifyAdd</span>(ls, l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) <span class="built_in">modifyAdd</span>(rs, l, r, v);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyRep</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        mx[id] = v;</span><br><span class="line">        hismx[id] = <span class="built_in">max</span>(hismx[id], v);</span><br><span class="line">        <span class="keyword">if</span> (lz4[id] != INF) lz5[id] = <span class="built_in">max</span>(lz5[id], lz4[id] + lz2[id]);</span><br><span class="line">        lz1[id] = lz2[id] = <span class="number">0</span>;</span><br><span class="line">        lz4[id] = v;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) <span class="built_in">modifyRep</span>(ls, l, r, v);</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) <span class="built_in">modifyRep</span>(rs, l, r, v);</span><br><span class="line">        <span class="built_in">pushup</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryMax</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> mx[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> ans = -INF;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryMax</span>(ls, l, r));</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryMax</span>(rs, l, r));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryHisMax</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (le[id] &gt;= l &amp;&amp; ri[id] &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> hismx[id];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">int</span> ans = -INF;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid[id]) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryHisMax</span>(ls, l, r));</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid[id]) ans = <span class="built_in">max</span>(ans, <span class="built_in">queryHisMax</span>(rs, l, r));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> rs</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 信息竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 代码 </tag>
            
            <tag> 信息竞赛 </tag>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
